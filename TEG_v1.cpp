//********************************************************************************
//  TridentEventGenerator
//
//  version 1.0 by Wolfgang Altmannshofer (01/18/2019)
//  
//  for questions, comments, bug reports, contact "waltmann AT ucsc.edu"
//
//********************************************************************************

#include <iostream>
#include <fstream>
#include <cstdlib>
#include <cstdio>
#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <random>
#include <ctime>
#include <iomanip>
#include <sstream>
#include <iterator>
#include <vector>
#include <tuple>
#include <algorithm>

using namespace std;
using std::fstream;



//*****************************************************************
// global constants and input parameters
//*****************************************************************
double pi = 3.1415926535897;
double Twopi = 2*pi;
//*****************************************************************
double GF = 0.0000116637; // Fermi constant
double aem = 1/137.036; // em coupling
double sW2 = 0.23119; // sin^2 of the weak mixing angle
//*****************************************************************
double me = 0.000511; // electron mass
double me2 = me*me;
double mmu = 0.105658; // muon mass
double mmu2 = mmu*mmu;
double mtau = 1.778; // tau mass
double mtau2 = mtau*mtau;

//*****************************************************************
// Define masses of various nuclei
//*****************************************************************
double MCarbon = 12.01*0.9315;
double MNitrogen = 14.01*0.9315;
double MOxygen = 16.0*0.9315;
double MSilicon = 28.09*0.9315;
double MArgon = 39.95*0.9315;
double MIron = 55.85*0.9315;
double MTungsten = 183.84*0.9315;
//*****************************************************************
double Mproton = 0.938272;
double Mneutron = 0.939565;
//*****************************************************************
// magnetic moments of proton and neutron
double mup = 2.7928;
double mun = -1.913;

//*****************************************************************
// form factor parameters for proton and neutron
//*****************************************************************
double bpM1 = 12.31;
double bpM2 = 25.57;
double bpM3 = 30.61;
double apM1 = 1.09;
double bpE1 = 11.12;
double bpE2 = 15.16;
double bpE3 = 21.25;
double apE1 = -0.19;
double ffA = 1.68;
double ffB = 3.63;
double bnM1 = 21.3;
double bnM2 = 77;
double bnM3 = 238;
double anM1 = 8.28;

//*****************************************************************
// nuclear parameters, effective couplings, lepton masses ...
//*****************************************************************
double A, Z, M, M2;
double GV, GA, GVSM, GASM;
double m3, m4;
double InterpolationList[192][2]; // array used for interpolation of form factor grid

//*****************************************************************
// variables for reading the neutrino flux distribution file
//*****************************************************************
vector<double> distribution_list;
vector<double> Enumin_list;
vector<double> Enumax_list;
vector<double> probability_list;

int length_probability_list;
int bin;


//*****************************************************************
// flags
//*****************************************************************
int zeroweight;
int anti;
int readerror = 0;
int flagkinematics = 0;
int errorcounter = 0;
int eventcounter = 0;
int reweightcounter = 0;
string q2flag;

//*****************************************************************
// variables for data output
//*****************************************************************
double *data_output;
int PDG1, PDG2, PDG3, PDG4;


//*****************************************************************
// Variables entered in the users interface
//*****************************************************************
int process;
string FormFactor;
string material;
string form_factor;
string energy_type;
string model;
string command;
string filename_in, filename_out;
double Enu, GP, MZP;
double GVtot, GAtot; 
int Nevents;
double ERange_start, ERange_end;
int nXsec;
string xsec_file_out;
string q2distribution_file_out;

//*****************************************************************
// Variables used for random point generation
//*****************************************************************
double eps1, g;
double x1max, x1min;
double x0, x1, x2, x3, x4, x5, x6, x7, x8;
double u1max, u2max, u3max, u4max, u5max, u6max, u7max;
double u1min, u2min, u3min, u4min, u5min, u6min, u7min;
double u1, u2, u3, u4, u5, u6, u7;
double D3max, D3min, D3, D32;
double D4max, D4min, D4, D42, D3D4;
double yplus, yminus;
double phi3, phi4, P2, P5, WC, WC2, WCqc, WB, WB2, qc;
double P0C, PC, q0C, qC, eps1C, eps4C, p4C, P4; 
double cos4, cosPq, sin4, sinPq, cosP1q, cosPp1, sinP1q, sinPp1, cosPhi, sinPhi;
double p1P, q2, qp1, qp3, qp4, p1p3, p1p4, p3P, p4P, Pq, qP, p2P, qp2, p1p2, p2p3, p2p4, p3p4;


//*****************************************************************
// Variables used to define events
//*****************************************************************
double Theta, sintheta, costheta;
double Eq, qx, qy, qz;
double Enuin, pnuinx, pnuiny, pnuinz;
double Enuout, pnuoutx, pnuoutz, pnuouty; 
double Elminus, plminusx, plminusy, plminusz; 
double Elplus, plplusz, plplusy, plplusx;
double Eprime, Pprimez, Pprimey, Pprimex;
double event[5][4];


//*****************************************************************
// Variables for weight and crosssection calculations
//*****************************************************************
double J, PLP, Laa, deltaSigma, weight, maxweight, averageweight;
double crosssectionresult;
double deltacrosssectionresult;
vector<std::tuple<double,double,double> > xsections;
vector<double> q2distribution;

//*****************************************************************
// functions
//*****************************************************************
void SetTridentProcess();
void SetNuclearParameters();
void GenerateEvent();
void GenerateEvent(double);
void GenerateEvents();
void GenerateRandomPoint();
void DetermineWeight();
void FindMaxWeight();
void ComputeCrossSection();
void ComputeCrossSection(double, double, int);
void ComputeQ2Distribution();
void ReadDistribution();
void WriteEventFile(string);
void WriteXSecFile(string);
void WriteQ2DistributionFile(string);
double SquaredMatrixElementPLP(double, double);
double SquaredMatrixElementPLPanti(double, double);
double SquaredMatrixElementL(double, double);
double SquaredMatrixElementLanti(double, double);
double Interpolation(double, int);
double InverseInterpolation(double, int);
double GMp(double);
double GEp(double);
double GMn(double);
double GEn(double);
double GD(double);
double Pauli(double);

//*****************************************************************
// Define the form factor grids
//*****************************************************************

// proton:
double InterpolationListProton[192][2] = {
    0.0000000, 0.35491136115644123, 
    0.0000008, 0.3549105611578789, 
    0.0000064, 0.354904961248448, 
    0.0000216, 0.35488976220442014, 
    0.0000512, 0.35486016704427764, 
    0.0001000, 0.35481138361426373,
    0.0001728, 0.3547386282040495, 
    0.0002744, 0.35463713018644377,
    0.0004096, 0.354502137671319, 
    0.0005832, 0.35432892415924266,
    0.0008000, 0.354112796174763,
    0.0010648, 0.35384910185290785, 
    0.0013824, 0.35353324044529516,
    0.0017576, 0.3531606727043793, 
    0.0021952, 0.3527269320958761,
    0.0027000, 0.3522276367804185,
    0.0032768, 0.35165850229612317, 
    0.0039304, 0.35101535486414515,
    0.0046656, 0.3502941452296272, 
    0.0054872, 0.3494909629408831,
    0.0064000, 0.34860205096039654, 
    0.0074088, 0.34762382049246365, 
    0.0085184, 0.3465528659042747,
    0.0097336, 0.3453859796101249, 
    0.0110592, 0.3441201667824999,
    0.0125000, 0.34275265974916347,
    0.0140608, 0.34128093193232345, 
    0.0157464, 0.33970271118458883,
    0.0175616, 0.3380159923769428, 
    0.0195112, 0.33621904909642053,
    0.0216000, 0.3343104443157112,
    0.0238328, 0.3322890399034934, 
    0.0262144, 0.3301540048529919,
    0.0287496, 0.3279048221169234, 
    0.0314432, 0.32554129394959636,
    0.0343000, 0.32306354567126333, 
    0.0373248, 0.3204720277857366,
    0.0405224, 0.3177675163994695, 
    0.0438976, 0.3149511119085545, 
    0.0474552, 0.3120242359390426, 
    0.0512000, 0.30898862654533726, 
    0.0551368, 0.30584633169080305,
    0.0592704, 0.30259970105380773,
    0.0636056, 0.2992513762208386, 
    0.0681472, 0.2958042793457659,
    0.0729000, 0.2922616003704634,
    0.0778688, 0.2886267829165608, 
    0.0830584, 0.2849035089708541,
    0.0884736, 0.28109568249765743, 
    0.0941192, 0.2772074121199755,
    0.1000000, 0.2732429930177614, 
    0.11, 0.2666951614074109,
    0.14, 0.24840133526455527, 
    0.19, 0.22178857640981323,
    0.26, 0.19098912247923858, 
    0.35, 0.15962869252507347,
    0.46, 0.13024933309001746, 
    0.59, 0.10428094962952672,
    0.74, 0.08227970948006394, 
    0.91, 0.06422082262731268, 
    1.10, 0.04974830786952152, 
    1.31, 0.03835610242089349,
    1.54, 0.029505234450581147, 
    1.79, 0.022690988438595943,
    2.06, 0.017474886047186926, 
    2.35, 0.013494234625941527,
    2.66, 0.010458974337703127, 
    2.99, 0.008142512303684053,
    3.34, 0.006370670362625037, 
    3.71, 0.005010990252110424,
    4.10, 0.003963411060786835, 
    4.51, 0.003152618337299878,
    4.94, 0.002521998298962822, 
    5.39, 0.0020289764666886188,
    5.86, 0.0016414809789114591, 
    6.35, 0.001335286662387736,
    6.86, 0.0010920328847828268, 
    7.39, 0.0008977491405030563,
    7.94, 0.0007417596109981341, 
    8.51, 0.0006158689830646376, 
    9.10, 0.0005137563813479302, 
    9.71, 0.0004305231363241781,
   10.34, 0.00036235431460257165, 
   10.99, 0.00030626450394207155,
   11.66, 0.00025990614314796247, 
   12.35, 0.00022142441600551347,
   13.06, 0.00018934692793303611, 
   13.79, 0.00016249946050335968,
   14.54, 0.00013994135407047648, 
   15.31, 0.00012091572423854551,
   16.10, 0.00010481093591060915, 
   16.91, 0.00009113065720394685,
   17.74, 0.00007947048045865464,
   18.59, 0.00006949959130119641, 
   19.46, 0.000060946334658935325,
   20.35, 0.00005358680184011661, 
   21.26, 0.00004723576945609173,
   22.19, 0.00004173947675715388, 
   23.14, 0.000036969845867152436,
   24.11, 0.00003281983900173365,
   25.10, 0.000029199715110520404, 
   26.11, 0.00002603400073834784, 
   27.14, 0.000023259030157665856, 
   28.19, 0.00002082094089903848, 
   29.26, 0.000018674034885542623, 
   30.35, 0.000016779434105188533, 
   31.46, 0.000015103974376243558, 
   32.59, 0.000013619292216019746,
   33.74, 0.000012301068831559084,
   34.91, 0.000011128402358591577,
   36.10, 0.000010083285103148487, 
   37.31, 0.000009150167011431608,
   38.54, 0.000008315590157387473, 
   39.79, 0.0000075678818872726794,
   41.06, 0.0000068968965464820074,
   42.35, 0.000006293797553303156,
   43.66, 0.000005750873068744655,
   44.99, 0.000005261379713168353,
   46.34, 0.000004819409755855068,
   47.71, 0.000004419777997645781,
   49.10, 0.000004057925214937379,
   50.51, 0.0000037298355637928938,
   51.94, 0.00000343196577824915,
   53.39, 0.0000031611843550554845,
   54.86, 0.000002914719212475154,
   56.35, 0.000002690112555018635,
   57.86, 0.000002485181878399028,
   59.39, 0.0000022979862171571595,
   60.94, 0.000002126796877416817,
   62.51, 0.0000019700720140708097,
   64.10, 0.000001826434509413918,
   65.71, 0.0000016946526921377817,
   67.34, 0.0000015736235043820997,
   68.99, 0.0000014623577824269814,
   70.66, 0.0000013599673654235834,
   72.35, 0.0000012656537878059758,
   74.06, 0.000001178698345943241,
   75.79, 0.0000010984533592047114,
   77.54, 0.0000010243344707744435,
   79.31, 0.0000009558138549708845,
   81.10, 0.0000008924142160932148,
   82.91, 0.0000008337034794185852,
   84.74, 0.0000007792900883250944,
   86.59, 0.000000728818832957915,
   88.46, 0.0000006819671456791537,
   90.35, 0.0000006384418069884009,
   92.26, 0.000000597976012874841,
   94.19, 0.000000560326760835576,
   96.14, 0.0000005252725172141305,
   98.11, 0.0000004926111332011915,
  100.10, 0.00000046215798090108713,
  102.11, 0.00000043374428439082025,
  104.14, 0.00000040721562376003257,
  106.19, 0.00000038243059278234117,
  108.26, 0.0000003592595931891489,
  110.35, 0.00000033758375053979994,
  112.46, 0.0000003172939384493653,
  114.59, 0.00000029828989948067866,
  116.74, 0.000000280479452360349,
  118.91, 0.0000002637777763646586,
  121.10, 0.0000002481067647623743,
  123.31, 0.00000023339444011636185,
  125.54, 0.00000021957442505075086,
  127.79, 0.0000002065854627992727,
  130.06, 0.00000019437098247545037,
  132.35, 0.00000018287870455704816,
  134.66, 0.00000017206028256474816,
  136.99, 0.00000016187097734630985,
  139.34, 0.00000015226936075939175,
  141.71, 0.00000014321704588476764,
  144.10, 0.0000001346784412020875,
  146.51, 0.00000012662052642712278,
  148.94, 0.00000011901264794681052,
  151.39, 0.00000011182633199929873,
  153.86, 0.00000010503511393453219,
  156.35, 0.00000009861438205843786,
  158.86, 0.00000009254123471348657,
  161.39, 0.00000008679434938207754,
  163.94, 0.00000008135386271870999,
  166.51, 0.0000000762012605238495,
  169.10, 0.00000007131927676818101,
  171.71, 0.00000006669180086179382,
  174.34, 0.000000062303792439867,
  176.99, 0.00000005814120300557658,
  179.66, 0.000000054190903833089075,
  182.35, 0.00000005044061958938736,
  185.06, 0.000000046878867183972935,
  187.79, 0.00000004349489940078969,
  190.54, 0.000000040278652907550395,
  193.31, 0.00000003722070027448465,
  196.10, 0.00000003431220566778151,
  198.91, 0.00000003154488391304329};
  
// neutron:
double InterpolationListNeutron[201][2] = {
    0.0000000, 0.0720946188333362,
    0.0000008, 0.07209461883300457, 
    0.0000064, 0.07209461881211196,
    0.0000216, 0.07209461859159688, 
    0.0000512, 0.07209461747528562,
    0.0001000, 0.07209461365403758,
    0.0001728, 0.07209460337361277,
    0.0002744, 0.07209457986930903,
    0.0004096, 0.07209453207229638,
    0.0005832, 0.07209444309489246,
    0.0008000, 0.07209428850474926,
    0.0010648, 0.07209403440101467,
    0.0013824, 0.07209363530893939,
    0.0017576, 0.0720930319130511,
    0.0021952, 0.07209214865283214,
    0.0027000, 0.07209089120871333,
    0.0032768, 0.07208914391003014,
    0.0039304, 0.07208676710025529,
    0.0046656, 0.07208359449819321,
    0.0054872, 0.07207943059677242,
    0.0064000, 0.07207404814345997,
    0.0074088, 0.07206718574803646,
    0.0085184, 0.07205854566438583,
    0.0097336, 0.07204779179298652,
    0.0110592, 0.07203454794986502,
    0.0125000, 0.07201839644584679,
    0.0140608, 0.07199887701700891,
    0.0157464, 0.07197548614332289,
    0.0175616, 0.0719476767876454,
    0.0195112, 0.07191485858156205,
    0.0216000, 0.07187639847825097,
    0.0238328, 0.0718316218856647,
    0.0262144, 0.07177981428611738,
    0.0287496, 0.07172022334100321,
    0.0314432, 0.071652061472063,
    0.0343000, 0.07157450890355936,
    0.0373248, 0.07148671714310062,
    0.0405224, 0.07138781287283376,
    0.0438976, 0.07127690221744423,
    0.0474552, 0.07115307535095396,
    0.0512000, 0.07101541140076677,
    0.0551368, 0.07086298360479236,
    0.0592704, 0.07069486467577646,
    0.0636056, 0.07051013232612581,
    0.0681472, 0.070307874906463,
    0.0729000, 0.07008719711177287,
    0.0778688, 0.06984722571019503,
    0.0830584, 0.06958711525113553,
    0.0884736, 0.06930605371129464,
    0.0941192, 0.06900326803930354,
    0.10, 0.06867802956181829,
    0.11, 0.06810402385073701,
    0.14, 0.06625288809980635,
    0.19, 0.06288613130801046,
    0.26, 0.05793565801214362,
    0.35, 0.051655544939513284,
    0.46, 0.04457300135775631,
    0.59, 0.03731849277371218,
    0.74, 0.030448271381746227,
    0.91, 0.024337193189640848,
    1.10, 0.019159578051501796,
    1.31, 0.014930094076850545,
    1.54, 0.011564829485860455,
    1.79, 0.008935113603828242,
    2.06, 0.006903849402813075,
    2.35, 0.005345233214529056,
    2.66, 0.004152802307577919,
    2.99, 0.00324073210328937,
    3.34, 0.00254189445643889,
    3.71, 0.002004761786342395,
    4.10, 0.0015902247670692442,
    4.51, 0.0012687820051796221,
    4.94, 0.0010182382048326659,
    5.39, 0.0008218974614455215,
    5.86, 0.0006671808020414981,
    6.35, 0.0005445844272407458,
    6.86, 0.00044690164717254346,
    7.39, 0.00036864446114903286,
    7.94, 0.00030561430627283793,
    8.51, 0.0002545834196002937,
    9.10, 0.000213057909134175,
    9.71, 0.00017910110482346334,
   10.34, 0.00015120140338229377,
   10.99, 0.00012817301335308142,
   11.66, 0.00010908109307704792,
   12.35, 0.00009318503426868153,
   13.06, 0.000079895294944851,
   13.79, 0.00006874039110464183,
   14.54, 0.00005934153779451261,
   15.31, 0.00005139307557508415,
   16.10, 0.00004464729232258394,
   16.91, 0.00003890259941837013,
   17.74, 0.00003399427948568824,
   18.59, 0.000029787214383093835,
   19.46, 0.000026170144891604155,
   20.35, 0.00002305112032093306,
   21.26, 0.000020353876494073623,
   22.19, 0.00001801494110713793,
   23.14, 0.000015981311330932448,
   24.11, 0.000014208583422647155,
   25.10, 0.000012659440783443162,
   26.11, 0.000011302427357413937,
   27.14, 0.000010110949028179201,
   28.19, 0.000009062457858933151,
   29.26, 0.000008137783486292764,
   30.35, 0.00000732058335524217,
   31.46, 0.000006596889253967501,
   32.59, 0.000005954732139473548,
   33.74, 0.000005383830816565086,
   34.91, 0.0000048753328575111156,
   36.10, 0.000004421598391400509,
   37.31, 0.000004016019177184351,
   38.54, 0.0000036528668003840855,
   39.79, 0.000003327164976315365,
   41.06, 0.0000030345818614865708,
   42.35, 0.0000027713390157864394,
   43.66, 0.000002534134257380694,
   44.99, 0.0000023200761383885316, 
   46.34, 0.0000021266281648934395,
   47.71, 0.0000019515612074630438,
   49.10, 0.0000017929128122479915,
   50.51, 0.0000016489523391616736,
   51.94, 0.0000015181510316070565,
   53.39, 0.0000013991562689207062,
   54.86, 0.0000012907693739371015,
   56.35, 0.0000011919264485023435,
   57.86, 0.0000011016817931525679,
   59.39, 0.0000010191935365693687,
   60.94, 0.0000009437111583093684,
   62.51, 0.0000008745646366930724, 
   64.10, 0.0000008111549942765959,
   65.71, 0.0000007529460473585724, 
   67.34, 0.00000069945719460519,
   68.99, 0.0000006502571040059414, 
   70.66, 0.0000006049581777542484,
   72.35, 0.00000056321169189359, 
   74.06, 0.000000524703522191577,
   75.79, 0.0000004891503801237266, 
   77.54, 0.0000004562964934163899,
   79.31, 0.0000004259106746063125, 
   81.10, 0.0000003977837287661527,
   82.91, 0.00000037172615812442045, 
   84.74, 0.00000034756612694504663,
   86.59, 0.0000003251476548689864, 
   88.46, 0.00000030432901107797747,
   90.35, 0.00000028498128521982295, 
   92.26, 0.00000026698711412056984, 
   94.19, 0.00000025023954597369607,
   96.14, 0.00000023464102600078012, 
   98.11, 0.00000022010248957374332,
  100.10, 0.00000020654255051945514, 
  102.11, 0.0000001938867738304418,
  104.14, 0.0000001820670233127379, 
  106.19, 0.00000017102087583976101,
  108.26, 0.00000016069109487396806,
  110.35, 0.0000001510251567842943, 
  112.46, 0.00000014197482424496555,
  114.59, 0.00000013349576166427018, 
  116.74, 0.00000012554718817291174,
  118.91, 0.00000011809156421136155, 
  121.10, 0.00000011109430820345826,
  123.31, 0.00000010452354019734886, 
  125.54, 0.0000000983498497016306, 
  127.79, 0.00000009254608525021281, 
  130.06, 0.00000008708716349913605,
  132.35, 0.0000000819498958968487, 
  134.66, 0.00000007711283118014253,
  136.99, 0.00000007255611213447197, 
  139.34, 0.00000006826134522266695,
  141.71, 0.00000006421148183267084, 
  144.10, 0.00000006039071002512605,
  146.51, 0.000000056784355777324556, 
  148.94, 0.000000053378792823047076,
  151.39, 0.00000005016136027938411, 
  153.86, 0.000000047120287333460946, 
  156.35, 0.0000000442446243348178,
  158.86, 0.000000041524179704323284,
  161.39, 0.00000003894946212868072, 
  163.94, 0.000000036511627561637094,
  166.51, 0.0000000342024305996054, 
  169.10, 0.000000032014179841171,
  171.71, 0.00000002993969687740508, 
  174.34, 0.000000027972278593523464,
  176.99, 0.00000002610566249262784, 
  179.66, 0.000000024333994779415518,
  182.35, 0.000000022651800966171, 
  185.06, 0.000000021053958785348548,
  187.79, 0.000000019535673212876094, 
  190.54, 0.000000018092453424185884,
  193.31, 0.00000001672009152110996, 
  196.10, 0.000000015414642882348045,
  198.91, 0.000000014172408003384575};

// Argon: 3-parameter Fermi, Helm, (ad.) Klein-Nystrand
double InterpolationListAr3pF[192][2] = {
    0.0000000, 0.009064890762226647, 
    0.0001000, 0.008965401072506351,
    0.0001331, 0.008932694087135882,
    0.0001728, 0.008893611611748469, 
    0.0002197, 0.008847645724290096,
    0.0002744, 0.00879431388121322, 
    0.0003375, 0.008733162932309824, 
    0.0004096, 0.008663773297402519,
    0.0004913, 0.00858576325723903, 
    0.0005832, 0.008498793305342443,
    0.0006859, 0.00840257032568025,
    0.0008000, 0.008296852618316395,
    0.0009261, 0.0081814529259797,
    0.0010648, 0.008056243171420325,
    0.0012167, 0.007921157955073449, 
    0.0013824, 0.007776197871460146,
    0.0015625, 0.007621432415664943,
    0.0017576, 0.007457002372110704, 
    0.0019683, 0.007283121620431031,
    0.0021952, 0.0071000785299381395, 
    0.0024389, 0.006908235355444478,
    0.0027000, 0.006708029371054425,
    0.0029791, 0.006499971152490813,
    0.0032768, 0.006284641824980943, 
    0.0035937, 0.006062690816296752,
    0.0039304, 0.005834832486356098, 
    0.0042875, 0.005601837860161134,
    0.0046656, 0.005364535901426475, 
    0.0050653, 0.0051238001797039075,
    0.0054872, 0.004880544250267348,
    0.0059319, 0.004635714018722241,
    0.0064000, 0.004390278498576905,
    0.0068921, 0.0041452197378874355, 
    0.0074088, 0.0039015246473167123, 
    0.0079507, 0.003660173257992295,
    0.0085184, 0.003422130689685586,
    0.0091125, 0.0031883334503064764,
    0.0097336, 0.002959684597634732, 
    0.0103823, 0.0027370393189212277, 
    0.0110592, 0.0025211984759095844,
    0.0117649, 0.002312899112675782, 
    0.0125000, 0.0021128071280098132, 
    0.0132651, 0.0019215104918164734,
    0.0140608, 0.0017395136255078034, 
    0.0148877, 0.0015672329632314796, 
    0.0157464, 0.0014049937939444315, 
    0.0166375, 0.0012530284989814287, 
    0.0175616, 0.001111475864099673,
    0.0185193, 0.0009803823266709996, 
    0.0195112, 0.0008597039556965142,
    0.0205379, 0.0007493102979937443,
    0.0216000, 0.0006489889176932642,
    0.0226981, 0.0005584515237006674, 
    0.0238328, 0.0004773407062572494, 
    0.0250047, 0.0004052377830504229, 
    0.0262144, 0.0003416711762835676, 
    0.0274625, 0.0002861253901084263, 
    0.0287496, 0.00023805024321828437, 
    0.0300763, 0.00019687024866007555, 
    0.0314432, 0.00016199393715732316,
    0.0328509, 0.00013282294405464308,
    0.0343000, 0.0001087606908988991, 
    0.0357911, 0.00008922050759153071,
    0.0373248, 0.00007363305964916886, 
    0.0389017, 0.0000614529666759468,
    0.0405224, 0.00005216452191889235, 
    0.0421875, 0.000045286448211470624, 
    0.0438976, 0.00004037565159446315,
    0.0456533, 0.000037029959957419186, 
    0.0474552, 0.00003488985915909477, 
    0.0493039, 0.00003363926270091007,
    0.0512000, 0.000033005372424509234,
    0.0531441, 0.000032757706334260305, 
    0.0551368, 0.00003270638517018567,
    0.0571787, 0.00003269978130943676, 
    0.0592704, 0.000032621641966762896, 
    0.0614125, 0.00003238780337245715,
    0.0636056, 0.00003194261343313779, 
    0.0658503, 0.000031255178304303706,
    0.0681472, 0.000030315542534001086,
    0.0704969, 0.000029130904442776207, 
    0.0729000, 0.00002772195677639521, 
    0.0753571, 0.000026119434189217896,
    0.0778688, 0.000024360927825684972, 
    0.0804357, 0.000022488022677111405,
    0.0830584, 0.000020543791127592652,
    0.0857375, 0.00001857066578056388, 
    0.0884736, 0.000016608700053364467,
    0.0912673, 0.00001469421276496351, 
    0.0941192, 0.000012858801942642564,
    0.0970299, 0.000011128703705451162, 
    0.1000000, 0.000009524464499350071, 
    0.1025000, 0.000008304284561096902,
    0.10707106781186548, 0.000006378863948404085,
    0.11299038105676659, 0.000004438626625335065,
    0.12000000000000001, 0.0000028385843866415056,
    0.12795084971874737, 0.0000017336098760834946,
    0.13674234614174768, 0.0000011107060395208632,
    0.14630064794363035, 0.0000008472961368628182,
    0.15656854249492380, 0.0000007830295595248482,
    0.16750000000000000, 0.0000007792953645741269, 
    0.17905694150420948, 0.000000750588123737054, 
    0.19120718173477352, 0.0000006671745565309263,
    0.20392304845413264, 0.0000005390988838480518,
    0.21718041645257968, 0.00000039433233735038467,
    0.23095800853708795, 0.0000002607233948375059,
    0.24523687548277814, 0.00000015603351975176372,
    0.26000000000000000, 0.00000008575145533681809, 
    0.27523198908875060, 0.00000004591902413678131,
    0.29091883092036785, 0.000000027794966055516582,
    0.30704769981818203, 0.000000022030344354728375,
    0.32360679774997900, 0.000000021255198974857916,
    0.34058522398518165, 0.000000020989694752832348,
    0.35797286679028860, 0.000000019358850624701225,
    0.37576031259048137, 0.000000016236996006081502,
    0.39393876913398140, 0.00000001232973695502864,
    0.41250000000000000, 0.000000008482448978298669, 
    0.43143626838353100, 0.000000005301772797143329,
    0.45074028853269765, 0.0000000030447884289450813,
    0.47040518354904270, 0.0000000016752912555232143,
    0.49042444851725164, 0.0000000009873809252225286,
    0.51079191812887460, 0.0000000007259577814951234,
    0.53150173811932670, 0.0000000006691611462022178,
    0.55254833995939050, 0.0000000006660149313539346,
    0.57392641833938740, 0.000000000638925502797425,
    0.59563091106185060, 0.0000000005662931900980605,
    0.61765698102121640, 0.000000000459004730771499, 
    0.64000000000000000, 0.0000000003398665133116444,
    0.66265553405258530, 0.00000000023001637319393342,
    0.68561933028205270, 0.00000000014258371645004797,
    0.70888730484384380, 0.00000000008180421309258326,
    0.73245553203367590, 0.00000000004519155830870155,
    0.75632023433686700, 0.000000000026694132519602834,
    0.78047777333282540, 0.00000000001948877142839279,
    0.80492464136246510, 0.000000000017803181492484868,
    0.82965745387818800, 0.000000000017708719462840843,
    0.85467294240617910, 0.000000000017130192643114797,
    0.87996794805940580, 0.000000000015414921017030436,
    0.90553941554712270, 0.000000000012763487086011492,
    0.93138438763306110, 0.000000000009723752595136686,
    0.95750000000000000, 0.000000000006842867596215941, 
    0.98388347648318440, 0.000000000004489706855450743, 
    1.01053212463921340, 0.000000000002812256017312611,
    1.03744333162063730, 0.0000000000017773030390986641,
    1.06461456032966860, 0.000000000001243574351493885,
    1.09204334582718720, 0.0000000000010336306306373298,
    1.11972729197565380, 0.0000000000009861147527969138,
    1.14766406829670360, 0.000000000000983332769803212,
    1.17585140702608200, 0.0000000000009576684280359487,
    1.20428710035026690, 0.0000000000008841119881127114,
    1.23296899781061970, 0.0000000000007664567817730129,
    1.26189500386222520, 0.0000000000006230070463288393,
    1.29106307557576500, 0.0000000000004752598292292839,
    1.32047122047183070, 0.0000000000003408505660737346,
    1.35011749447801920, 0.0000000000002305172202883309,
    1.38000000000000010, 0.00000000000014802552035259043,
    1.41011688409851450, 0.00000000000009178197704376728,
    1.44046633676493350, 0.00000000000005703110945847888,
    1.47104658928863530, 0.00000000000003788079065020483,
    1.50185591271000460, 0.000000000000028767446419621273,
    1.53289261635336800, 0.000000000000025268256207980976,
    1.56415504643463200, 0.00000000000002435514109934346,
    1.59564158473880370, 0.000000000000024269883634360814,
    1.62735064736294290, 0.000000000000024207191291338275,
    1.65928068352044940, 0.000000000000023954863889606297,
    1.69143017440288600, 0.00000000000002358555911627845,
    1.72379763209582260, 0.000000000000023242590866880746,
    1.75638159854545600, 0.000000000000023023211925597352,
    1.78918064457298360, 0.000000000000022939923673686547,
    1.82219336893393020, 0.000000000000022931646824712273,
    1.85541839741982880, 0.00000000000002289787729324961,
    1.88885438199983200, 0.000000000000022735648961416725,
    1.92250000000000000, 0.00000000000002236743085689408, 
    1.95635395331817060, 0.000000000000021755481157474682, 
    1.99041496767244230, 0.0000000000000209034241797195,
    2.02468179188145300, 0.000000000000019848667736813127,
    2.05915319717473850, 0.000000000000018650118296047667,
    2.09382797653157660, 0.000000000000017375136933837762,
    2.12870494404681750, 0.000000000000016088482720047558,
    2.16378293432230900, 0.00000000000001484465083093834,
    2.19906080188259430, 0.000000000000013683875941961841,
    2.23453742061365630, 0.00000000000001263129782572552,
    2.27021168322355130, 0.000000000000011698394430965189,
    2.30608250072385120, 0.000000000000010885709523683106,
    2.34214880193086200, 0.000000000000010186032117431571,
    2.37840953298567470, 0.000000000000009587417943212703,
    2.41486365689212900, 0.000000000000009075695334740202,
    2.45151015307185100, 0.00000000000000863631472846488,
    2.48834801693555540, 0.00000000000000825555658609502,
    2.52537625946985800, 0.000000000000007921203199898935,
    2.56259390683888450, 0.000000000000007622815694191894, 
    2.60000000000000000, 0.000000000000007351754334922772};

// Argon: Helm model
double InterpolationListArH[192][2] = {
	 0.00000000000000000, 	 0.009203032105139622581768676923, 
	 0.00010000000000000, 	 0.009103524731294200533771032724, 
	 0.00013310000000000, 	 0.009070803957177060380945299300, 
	 0.00017280000000000, 	 0.009031699874035060277011055518, 
	 0.00021970000000000, 	 0.008985701407465417761555315224, 
	 0.00027440000000000, 	 0.008932322031811710735804687999, 
	 0.00033750000000000, 	 0.008871103675560805187916280090, 
	 0.00040960000000000, 	 0.008801620793843804510525608009, 
	 0.00049130000000000, 	 0.008723484564349581055209270630, 
	 0.00058320000000000, 	 0.008636347157694557880036612119, 
	 0.00068590000000000, 	 0.008539906028165200960189373802, 
	 0.00080000000000000, 	 0.008433908165886138535993765686, 
	 0.00092610000000000, 	 0.008318154247005632440092881552, 
	 0.00106480000000000, 	 0.008192502614574813726844304540, 
	 0.00121670000000000, 	 0.008056873019577097741472648806, 
	 0.00138240000000000, 	 0.007911250049190245506314234092, 
	 0.00156250000000000, 	 0.007755686167985211161568503968, 
	 0.00175760000000000, 	 0.007590304297526333406065379705, 
	 0.00196830000000000, 	 0.007415299860871017029184670832, 
	 0.00219520000000000, 	 0.007230942220892952985999979632, 
	 0.00243890000000000, 	 0.007037575445271227782273459894, 
	 0.00270000000000000, 	 0.006835618336474839212835163949, 
	 0.00297910000000000, 	 0.006625563672175054444335451365, 
	 0.00327680000000000, 	 0.006407976610250370325116975323, 
	 0.00359370000000000, 	 0.006183492222886170092133184539, 
	 0.00393040000000000, 	 0.005952812136148215998998622922, 
	 0.00428750000000000, 	 0.005716700264714848905844846172, 
	 0.00466560000000000, 	 0.005475977646031590997943716559, 
	 0.00506530000000000, 	 0.005231516393799193198610453237, 
	 0.00548720000000000, 	 0.004984232807172191831446284027, 
	 0.00593190000000000, 	 0.004735079689034193961560958996, 
	 0.00640000000000000, 	 0.004485037943892433709436318168, 
	 0.00689210000000000, 	 0.004235107542924988061061597477, 
	 0.00740880000000000, 	 0.003986297960118315338029493233, 
	 0.00795070000000000, 	 0.003739618198828023164920208998, 
	 0.00851840000000000, 	 0.003496066542049688918858407760, 
	 0.00911250000000000, 	 0.003256620171766769645388395205, 
	 0.00973360000000000, 	 0.003022224812530875052291046146, 
	 0.01038230000000000, 	 0.002793784561533516844905600252, 
	 0.01105920000000000, 	 0.002572152071496495648328384220, 
	 0.01176490000000000, 	 0.002358119253442826721706149229, 
	 0.01250000000000000, 	 0.002152408663581456028934812963, 
	 0.01326510000000000, 	 0.001955665731997360389654572188, 
	 0.01406080000000000, 	 0.001768451980524227444210860760, 
	 0.01488770000000000, 	 0.001591239363130717704430949766, 
	 0.01574640000000000, 	 0.001424405844518834970621745661, 
	 0.01663750000000000, 	 0.001268232311670169053241519208, 
	 0.01756160000000000, 	 0.001122900889146346854047253672, 
	 0.01851930000000000, 	 0.000988494702523856714343475360, 
	 0.01951120000000000, 	 0.000864999105987047890373164982, 
	 0.02053790000000000, 	 0.000752304360469648026286948461, 
	 0.02160000000000000, 	 0.000650209718547774457621246658, 
	 0.02269810000000000, 	 0.000558428842321503807015481424, 
	 0.02383280000000000, 	 0.000476596451582478363231953900, 
	 0.02500470000000000, 	 0.000404276072462317359081096502, 
	 0.02621440000000000, 	 0.000340968732280716403312825769, 
	 0.02746250000000000, 	 0.000286122425205460125148537731, 
	 0.02874960000000000, 	 0.000239142156267415804601905727, 
	 0.03007630000000000, 	 0.000199400358810392119065374450, 
	 0.03144320000000000, 	 0.000166247473043952298825051694, 
	 0.03285090000000000, 	 0.000139022471309286884191824818, 
	 0.03430000000000000, 	 0.000117063119107753649088266013, 
	 0.03579110000000000, 	 0.000099715769853181559579172188, 
	 0.03732480000000000, 	 0.000086344505493006880542453119, 
	 0.03890170000000000, 	 0.000076339454228021937543142983, 
	 0.04052240000000000, 	 0.000069124140010078195047078797, 
	 0.04218750000000000, 	 0.000064161745626201079116882053, 
	 0.04389760000000000, 	 0.000060960201172447297753888285, 
	 0.04565330000000000, 	 0.000059076041665652422594286891, 
	 0.04745520000000000, 	 0.000058117010449306627962052368, 
	 0.04930390000000000, 	 0.000057743417898406993013678268, 
	 0.05120000000000000, 	 0.000057668296695340222812655590, 
	 0.05314410000000000, 	 0.000057656424651241496394989822, 
	 0.05513680000000000, 	 0.000057522312776738674983036809, 
	 0.05717870000000000, 	 0.000057127279264028416635827490, 
	 0.05927040000000000, 	 0.000056375748570270143656193995, 
	 0.06141250000000000, 	 0.000055210928396575405046296792, 
	 0.06360560000000000, 	 0.000053610025726814047322080908, 
	 0.06585030000000000, 	 0.000051579166109398881902899786, 
	 0.06814720000000000, 	 0.000049148178113226917093376428, 
	 0.07049690000000000, 	 0.000046365397637334423606384620, 
	 0.07290000000000001, 	 0.000043292634951517753726536047, 
	 0.07535710000000000, 	 0.000040000431597738644146858983, 
	 0.07786880000000000, 	 0.000036563715324180865633499349, 
	 0.08043570000000000, 	 0.000033057939886169143109580226, 
	 0.08305840000000000, 	 0.000029555773721306852788682715, 
	 0.08573749999999999, 	 0.000026124378101812272608573534, 
	 0.08847360000000000, 	 0.000022823292279307447682438342, 
	 0.09126730000000000, 	 0.000019702921205929408186375076, 
	 0.09411920000000000, 	 0.000016803601392208142577700675, 
	 0.09702990000000000, 	 0.000014155202981617675194684486, 
	 0.10000000000000001, 	 0.000011777211679916843063828033, 
	 0.10249999999999999, 	 0.000010023048691633070861415483, 
	 0.10707106781186548, 	 0.000007364649866272630276823382, 
	 0.11299038105676659, 	 0.000004854741500524180895272119, 
	 0.12000000000000001, 	 0.000002969118962161527535944042, 
	 0.12795084971874737, 	 0.000001834038880008433633099019, 
	 0.13674234614174768, 	 0.000001322804821998864957616963, 
	 0.14630064794363035, 	 0.000001185823254585176534877961, 
	 0.15656854249492380, 	 0.000001177024693480268969288539, 
	 0.16750000000000001, 	 0.000001133932015154278839463528, 
	 0.17905694150420948, 	 0.000000997275675550753238219736, 
	 0.19120718173477352, 	 0.000000785159736465164944222187, 
	 0.20392304845413264, 	 0.000000549774191546102140428572, 
	 0.21718041645257968, 	 0.000000340621084919926223933301, 
	 0.23095800853708795, 	 0.000000185544519327759227230406, 
	 0.24523687548277814, 	 0.000000088793253295533273747949, 
	 0.26000000000000001, 	 0.000000038945785552061867220202, 
	 0.27523198908875057, 	 0.000000019006827531879569593590, 
	 0.29091883092036785, 	 0.000000013826283220223163217180, 
	 0.30704769981818203, 	 0.000000013397975548756517496244, 
	 0.32360679774997902, 	 0.000000012883770270926463612303, 
	 0.34058522398518165, 	 0.000000011008618183805110784082, 
	 0.35797286679028861, 	 0.000000008223449090961979257706, 
	 0.37576031259048137, 	 0.000000005380940313121841015295, 
	 0.39393876913398140, 	 0.000000003083895543362278729943, 
	 0.41249999999999998, 	 0.000000001538958027159085761787, 
	 0.43143626838353100, 	 0.000000000664163968841528913497, 
	 0.45074028853269765, 	 0.000000000254580877962280477676, 
	 0.47040518354904270, 	 0.000000000105615715797800392489, 
	 0.49042444851725164, 	 0.000000000070638972634531490883, 
	 0.51079191812887459, 	 0.000000000068125723793089741252, 
	 0.53150173811932666, 	 0.000000000064765578194127767032, 
	 0.55254833995939046, 	 0.000000000053839084904888608381, 
	 0.57392641833938740, 	 0.000000000038844399389119807461, 
	 0.59563091106185062, 	 0.000000000024524014667975538315, 
	 0.61765698102121636, 	 0.000000000013594003069123337134, 
	 0.64000000000000001, 	 0.000000000006584399958937138901, 
	 0.66265553405258526, 	 0.000000000002753258556305703524, 
	 0.68561933028205269, 	 0.000000000000988831984180264773, 
	 0.70888730484384377, 	 0.000000000000334644680897239934, 
	 0.73245553203367586, 	 0.000000000000162538342199867581, 
	 0.75632023433686701, 	 0.000000000000141924748960432188, 
	 0.78047777333282542, 	 0.000000000000138535208621226209, 
	 0.80492464136246511, 	 0.000000000000118990599187391301, 
	 0.82965745387818801, 	 0.000000000000087956550875741275, 
	 0.85467294240617908, 	 0.000000000000056709021305729858, 
	 0.87996794805940581, 	 0.000000000000032209362315743581, 
	 0.90553941554712269, 	 0.000000000000016135979859022758, 
	 0.93138438763306108, 	 0.000000000000007071145172977341, 
	 0.95750000000000002, 	 0.000000000000002664413035167189, 
	 0.98388347648318442, 	 0.000000000000000853841560775102, 
	 1.01053212463921338, 	 0.000000000000000259935900555520, 
	 1.03744333162063729, 	 0.000000000000000126864354295651, 
	 1.06461456032966861, 	 0.000000000000000115585691659672, 
	 1.09204334582718721, 	 0.000000000000000110316064488488, 
	 1.11972729197565379, 	 0.000000000000000090389165878977, 
	 1.14766406829670364, 	 0.000000000000000063522244022675, 
	 1.17585140702608193, 	 0.000000000000000039043905509065, 
	 1.20428710035026687, 	 0.000000000000000021246199263942, 
	 1.23296899781061975, 	 0.000000000000000010262311462939, 
	 1.26189500386222520, 	 0.000000000000000004368850530965, 
	 1.29106307557576505, 	 0.000000000000000001610434555818, 
	 1.32047122047183074, 	 0.000000000000000000501488601770, 
	 1.35011749447801921, 	 0.000000000000000000135250531866, 
	 1.38000000000000012, 	 0.000000000000000000046653618900, 
	 1.41011688409851454, 	 0.000000000000000000035913768066, 
	 1.44046633676493352, 	 0.000000000000000000035068394412, 
	 1.47104658928863530, 	 0.000000000000000000029652952308, 
	 1.50185591271000463, 	 0.000000000000000000021232117293, 
	 1.53289261635336804, 	 0.000000000000000000013207072357, 
	 1.56415504643463210, 	 0.000000000000000000007271523770, 
	 1.59564158473880369, 	 0.000000000000000000003573247833, 
	 1.62735064736294288, 	 0.000000000000000000001565388145, 
	 1.65928068352044944, 	 0.000000000000000000000604627250, 
	 1.69143017440288590, 	 0.000000000000000000000201227242, 
	 1.72379763209582260, 	 0.000000000000000000000055945652, 
	 1.75638159854545606, 	 0.000000000000000000000013534408, 
	 1.78918064457298365, 	 0.000000000000000000000004878337, 
	 1.82219336893393025, 	 0.000000000000000000000004159766, 
	 1.85541839741982884, 	 0.000000000000000000000003947831, 
	 1.88885438199983202, 	 0.000000000000000000000003137801, 
	 1.92250000000000010, 	 0.000000000000000000000002110720, 
	 1.95635395331817064, 	 0.000000000000000000000001239175, 
	 1.99041496767244230, 	 0.000000000000000000000000647322, 
	 2.02468179188145303, 	 0.000000000000000000000000303447, 
	 2.05915319717473855, 	 0.000000000000000000000000127568, 
	 2.09382797653157660, 	 0.000000000000000000000000047610, 
	 2.12870494404681754, 	 0.000000000000000000000000015429, 
	 2.16378293432230917, 	 0.000000000000000000000000004188, 
	 2.19906080188259434, 	 0.000000000000000000000000000940, 
	 2.23453742061365634, 	 0.000000000000000000000000000251, 
	 2.27021168322355127, 	 0.000000000000000000000000000179, 
	 2.30608250072385124, 	 0.000000000000000000000000000173, 
	 2.34214880193086206, 	 0.000000000000000000000000000140, 
	 2.37840953298567470, 	 0.000000000000000000000000000095, 
	 2.41486365689212912, 	 0.000000000000000000000000000055, 
	 2.45151015307185105, 	 0.000000000000000000000000000029, 
	 2.48834801693555541, 	 0.000000000000000000000000000013, 
	 2.52537625946985811, 	 0.000000000000000000000000000006, 
	 2.56259390683888455, 	 0.000000000000000000000000000002, 
	 2.60000000000000009, 	 0.000000000000000000000000000001};

// Argon: Klein-Nystrand model
double InterpolationListArKN[192][2] = {
	 0.00000000000000000, 	 0.007983611415594430230080469357, 
	 0.00010000000000000, 	 0.007884189760169260652311606918, 
	 0.00013310000000000, 	 0.007851534762938712497248872069, 
	 0.00017280000000000, 	 0.007812533805611702325544243308, 
	 0.00021970000000000, 	 0.007766690928970092396010915792, 
	 0.00027440000000000, 	 0.007713538744619809206515270716, 
	 0.00033750000000000, 	 0.007652642896453509813170512643, 
	 0.00040960000000000, 	 0.007583606676200699281409356445, 
	 0.00049130000000000, 	 0.007506075733051505854964702280, 
	 0.00058320000000000, 	 0.007419742810638199799477821017, 
	 0.00068590000000000, 	 0.007324352438354329516978502568, 
	 0.00080000000000000, 	 0.007219705498291973527758003115, 
	 0.00092610000000000, 	 0.007105663584201364277315171591, 
	 0.00106480000000000, 	 0.006982153065046011602978737187, 
	 0.00121670000000000, 	 0.006849168763162407497224748454, 
	 0.00138240000000000, 	 0.006706777155949987870298123482, 
	 0.00156250000000000, 	 0.006555119010614058987218566443, 
	 0.00175760000000000, 	 0.006394411363938663078743118717, 
	 0.00196830000000000, 	 0.006224948763524369710342654116, 
	 0.00219520000000000, 	 0.006047103693495657454615166415, 
	 0.00243890000000000, 	 0.005861326116425693774636407340, 
	 0.00270000000000000, 	 0.005668142074150710890689808252, 
	 0.00297910000000000, 	 0.005468151303200376352198208707, 
	 0.00327680000000000, 	 0.005262023835637723301328350090, 
	 0.00359370000000000, 	 0.005050495572998527429864346061, 
	 0.00393040000000000, 	 0.004834362839491207486375401459, 
	 0.00428750000000000, 	 0.004614475940343285703670872522, 
	 0.00466560000000000, 	 0.004391731771772173359424940031, 
	 0.00506530000000000, 	 0.004167065550072162477546200421, 
	 0.00548720000000000, 	 0.003941441748251001478409172307, 
	 0.00593190000000000, 	 0.003715844348985679595348541326, 
	 0.00640000000000000, 	 0.003491266541840431711363201828, 
	 0.00689210000000000, 	 0.003268700010134539726130986637, 
	 0.00740880000000000, 	 0.003049123968005625680971482083, 
	 0.00795070000000000, 	 0.002833494120556118243264842604, 
	 0.00851840000000000, 	 0.002622731729012470289902347886, 
	 0.00911250000000000, 	 0.002417712968150048224308390488, 
	 0.00973360000000000, 	 0.002219258764505689651702624587, 
	 0.01038230000000000, 	 0.002028125300877823937450994407, 
	 0.01105920000000000, 	 0.001844995365175936246487919945, 
	 0.01176490000000000, 	 0.001670470709825222542857514618, 
	 0.01250000000000000, 	 0.001505065571784934162422042725, 
	 0.01326510000000000, 	 0.001349201483058595687353209414, 
	 0.01406080000000000, 	 0.001203203477747569498032542690, 
	 0.01488770000000000, 	 0.001067297774735323891495686333, 
	 0.01574640000000000, 	 0.000941610985607197045407779079, 
	 0.01663750000000000, 	 0.000826170866122706744338888285, 
	 0.01756160000000000, 	 0.000720908597252353940641744767, 
	 0.01851930000000000, 	 0.000625662549307366764976545692, 
	 0.01951120000000000, 	 0.000540183450893536769646385842, 
	 0.02053790000000000, 	 0.000464140854172347800364606396, 
	 0.02160000000000000, 	 0.000397130760047640534501217635, 
	 0.02269810000000000, 	 0.000338684242191033733036797937, 
	 0.02383280000000000, 	 0.000288276887968593581966503248, 
	 0.02500470000000000, 	 0.000245338857923099371276948188, 
	 0.02621440000000000, 	 0.000209265353962927473305266624, 
	 0.02746250000000000, 	 0.000179427280130383721588535617, 
	 0.02874960000000000, 	 0.000155181878936399685747771215, 
	 0.03007630000000000, 	 0.000135883130763047118736916441, 
	 0.03144320000000000, 	 0.000120891713598859017967518392, 
	 0.03285090000000000, 	 0.000109584335078314473667544793, 
	 0.03430000000000000, 	 0.000101362267995299396754552146, 
	 0.03579110000000000, 	 0.000095658943570531371897169848, 
	 0.03732480000000000, 	 0.000091946483084029285016806898, 
	 0.03890170000000000, 	 0.000089741077257322874097776599, 
	 0.04052240000000000, 	 0.000088607153145729063170067674, 
	 0.04218750000000000, 	 0.000088160299403182133966792866, 
	 0.04389760000000000, 	 0.000088068951728746685961649043, 
	 0.04565330000000000, 	 0.000088054870233801517897219424, 
	 0.04745520000000000, 	 0.000087892468568755239481486707, 
	 0.04930390000000000, 	 0.000087407080177179022058113478, 
	 0.05120000000000000, 	 0.000086472269356914155066275163, 
	 0.05314410000000000, 	 0.000085006313368121388094646174, 
	 0.05513680000000000, 	 0.000082967996230267910661576591, 
	 0.05717870000000000, 	 0.000080351864823117839786714711, 
	 0.05927040000000000, 	 0.000077183103321908520105809615, 
	 0.06141250000000000, 	 0.000073512182866935973230004819, 
	 0.06360560000000000, 	 0.000069409439843166133342691748, 
	 0.06585030000000000, 	 0.000064959728505500512110021338, 
	 0.06814720000000000, 	 0.000060257282325378403538187339, 
	 0.07049690000000000, 	 0.000055400903849977174459463108, 
	 0.07290000000000001, 	 0.000050489585633005750592815220, 
	 0.07535710000000000, 	 0.000045618645552699379683552622, 
	 0.07786880000000000, 	 0.000040876439252632896408697766, 
	 0.08043570000000000, 	 0.000036341691213678175979059221, 
	 0.08305840000000000, 	 0.000032081464772345914620264862, 
	 0.08573749999999999, 	 0.000028149770893570035819970451, 
	 0.08847360000000000, 	 0.000024586796287017438281249579, 
	 0.09126730000000000, 	 0.000021418714059658414675850827, 
	 0.09411920000000000, 	 0.000018658024975864868482420059, 
	 0.09702990000000000, 	 0.000016304364907568739408941921, 
	 0.10000000000000001, 	 0.000014345704456507839236840615, 
	 0.10249999999999999, 	 0.000013009538821543728895086672, 
	 0.10707106781186548, 	 0.000011200933029954420678858847, 
	 0.11299038105676659, 	 0.000009818551865738828392043101, 
	 0.12000000000000001, 	 0.000009112324777689415755818278, 
	 0.12795084971874737, 	 0.000008932165674685516894423451, 
	 0.13674234614174768, 	 0.000008913427698727592371594382, 
	 0.14630064794363035, 	 0.000008683028396642765667180416, 
	 0.15656854249492380, 	 0.000008019674511422206144174024, 
	 0.16750000000000001, 	 0.000006918012730903634120000444, 
	 0.17905694150420948, 	 0.000005553003209945145747549518, 
	 0.19120718173477352, 	 0.000004181421474229561251678092, 
	 0.20392304845413264, 	 0.000003033542267138652896875774, 
	 0.21718041645257968, 	 0.000002238637269470905882438275, 
	 0.23095800853708795, 	 0.000001803707801509300595512592, 
	 0.24523687548277814, 	 0.000001639773929219283420051804, 
	 0.26000000000000001, 	 0.000001614104176674565010676408, 
	 0.27523198908875057, 	 0.000001603345317176140633766228, 
	 0.29091883092036785, 	 0.000001529133755574507558594780, 
	 0.30704769981818203, 	 0.000001369015222305410532186039, 
	 0.32360679774997902, 	 0.000001145971828126467734115042, 
	 0.34058522398518165, 	 0.000000906129248126769492088014, 
	 0.35797286679028861, 	 0.000000695404541017900242948853, 
	 0.37576031259048137, 	 0.000000543090103952751901327726, 
	 0.39393876913398140, 	 0.000000455769119821793262591715, 
	 0.41249999999999998, 	 0.000000420590967235193570565442, 
	 0.43143626838353100, 	 0.000000412355476328994923962607, 
	 0.45074028853269765, 	 0.000000410313761463994547560241, 
	 0.47040518354904270, 	 0.000000396430769473610472480364, 
	 0.49042444851725164, 	 0.000000364221697784491664066805, 
	 0.51079191812887459, 	 0.000000316699484579977121956676, 
	 0.53150173811932666, 	 0.000000262726456836961546158210, 
	 0.55254833995939046, 	 0.000000212464532063353974908833, 
	 0.57392641833938740, 	 0.000000173594909028327668077313, 
	 0.59563091106185062, 	 0.000000149296691823112532530334, 
	 0.61765698102121636, 	 0.000000138168566742723022158058, 
	 0.64000000000000001, 	 0.000000135628702150408865352246, 
	 0.66265553405258526, 	 0.000000135990998360337671727993, 
	 0.68561933028205269, 	 0.000000134409951774782523912965, 
	 0.70888730484384377, 	 0.000000128126710567960737403853, 
	 0.73245553203367586, 	 0.000000116799734027745015733365, 
	 0.75632023433686701, 	 0.000000102032113243168597132778, 
	 0.78047777333282542, 	 0.000000086422229182529182629091, 
	 0.80492464136246511, 	 0.000000072530231048273710456300, 
	 0.82965745387818801, 	 0.000000062086984171475507347644, 
	 0.85467294240617908, 	 0.000000055625897799926634160951, 
	 0.87996794805940581, 	 0.000000052553066256617282369760, 
	 0.90553941554712269, 	 0.000000051539551370568314478509, 
	 0.93138438763306108, 	 0.000000051051443432509770440694, 
	 0.95750000000000002, 	 0.000000049833467497334012186704, 
	 0.98388347648318442, 	 0.000000047214789388214150602400, 
	 1.01053212463921338, 	 0.000000043184508469231293007453, 
	 1.03744333162063729, 	 0.000000038261139011833251040723, 
	 1.06461456032966861, 	 0.000000033234073481325815611560, 
	 1.09204334582718721, 	 0.000000028875586798695841168697, 
	 1.11972729197565379, 	 0.000000025710714455771457713356, 
	 1.14766406829670364, 	 0.000000023899090567989804582020, 
	 1.17585140702608193, 	 0.000000023241271868325727479933, 
	 1.20428710035026687, 	 0.000000023285255821812056469461, 
	 1.23296899781061975, 	 0.000000023485895437695062967212, 
	 1.26189500386222520, 	 0.000000023364185077847485535355, 
	 1.29106307557576505, 	 0.000000022623085496697705677719, 
	 1.32047122047183074, 	 0.000000021196072126836777965836, 
	 1.35011749447801921, 	 0.000000019226848920000294671595, 
	 1.38000000000000012, 	 0.000000016997248496109277970976, 
	 1.41011688409851454, 	 0.000000014831041489766280861532, 
	 1.44046633676493352, 	 0.000000013002866960060176042550, 
	 1.47104658928863530, 	 0.000000011675086595345795291745, 
	 1.50185591271000463, 	 0.000000010874168155356823428929, 
	 1.53289261635336804, 	 0.000000010505980215938663851465, 
	 1.56415504643463210, 	 0.000000010399459640317014938269, 
	 1.59564158473880369, 	 0.000000010362625718894500595166, 
	 1.62735064736294288, 	 0.000000010234476570238220805246, 
	 1.65928068352044944, 	 0.000000009920140128270830205498, 
	 1.69143017440288590, 	 0.000000009403048616083493531024, 
	 1.72379763209582260, 	 0.000000008734805295954604663571, 
	 1.75638159854545606, 	 0.000000008008991825916453492345, 
	 1.78918064457298365, 	 0.000000007328244880174738742389, 
	 1.82219336893393025, 	 0.000000006774156509708722479611, 
	 1.85541839741982884, 	 0.000000006387337027269409583483, 
	 1.88885438199983202, 	 0.000000006161269882174569370478, 
	 1.92250000000000010, 	 0.000000006049544855671586279531, 
	 1.95635395331817064, 	 0.000000005982732075066125560359, 
	 1.99041496767244230, 	 0.000000005889262839647478189263, 
	 2.02468179188145303, 	 0.000000005714461995546343724658, 
	 2.05915319717473855, 	 0.000000005433132998331101859912, 
	 2.09382797653157660, 	 0.000000005053306404856654364204, 
	 2.12870494404681754, 	 0.000000004611251091613522357238, 
	 2.16378293432230917, 	 0.000000004159974955035978949994, 
	 2.19906080188259434, 	 0.000000003754748898264246421418, 
	 2.23453742061365634, 	 0.000000003439476901950877393192, 
	 2.27021168322355127, 	 0.000000003237076995783398880011, 
	 2.30608250072385124, 	 0.000000003145716187292012046890, 
	 2.34214880193086206, 	 0.000000003141155048726557940092, 
	 2.37840953298567470, 	 0.000000003184008949780407665311, 
	 2.41486365689212912, 	 0.000000003229739187785717287667, 
	 2.45151015307185105, 	 0.000000003238817066878495163614, 
	 2.48834801693555541, 	 0.000000003184760694926306443986, 
	 2.52537625946985811, 	 0.000000003058488661503873165382, 
	 2.56259390683888455, 	 0.000000002868436393265770186111, 
	 2.60000000000000009, 	 0.000000002636882669624307180896};
	 
// Argon: Adapted Klein-Nystrand model
double InterpolationListAradKN[192][2] = {
	 0.00000000000000000, 	 0.009314227958818912730953876178, 
	 0.00010000000000000, 	 0.009214729191463186946942087729, 
	 0.00013310000000000, 	 0.009182014988070594588287498539, 
	 0.00017280000000000, 	 0.009142921168772046719430690587, 
	 0.00021970000000000, 	 0.009096938119787959659001685964, 
	 0.00027440000000000, 	 0.009043581140488329492277408406, 
	 0.00033750000000000, 	 0.008982394385383968976599433631, 
	 0.00040960000000000, 	 0.008912954965578954308336179224, 
	 0.00049130000000000, 	 0.008834877163181051665241660942, 
	 0.00058320000000000, 	 0.008747816706763028582471974914, 
	 0.00068590000000000, 	 0.008651475050786637532862499711, 
	 0.00080000000000000, 	 0.008545603597089456576751942407, 
	 0.00092610000000000, 	 0.008430007792248880860164206297, 
	 0.00106480000000000, 	 0.008304551031036756791881003892, 
	 0.00121670000000000, 	 0.008169158293425274677823644254, 
	 0.00138240000000000, 	 0.008023819440858923762727172857, 
	 0.00156250000000000, 	 0.007868592096920951073357741734, 
	 0.00175760000000000, 	 0.007703604038235828746494782138, 
	 0.00196830000000000, 	 0.007529055023584555091098469148, 
	 0.00219520000000000, 	 0.007345217992866174064325868187, 
	 0.00243890000000000, 	 0.007152439572788569198402708338, 
	 0.00270000000000000, 	 0.006951139833051500453720006334, 
	 0.00297910000000000, 	 0.006741811245294842928899026191, 
	 0.00327680000000000, 	 0.006525016807182900183126328386, 
	 0.00359370000000000, 	 0.006301387305593380769308531342, 
	 0.00393040000000000, 	 0.006071617705843630578843583834, 
	 0.00428750000000000, 	 0.005836462668034452135057410516, 
	 0.00466560000000000, 	 0.005596731206695551054386417178, 
	 0.00506530000000000, 	 0.005353280525704155745625456575, 
	 0.00548720000000000, 	 0.005107009076607533712421904681, 
	 0.00593190000000000, 	 0.004858848904665940930669432163, 
	 0.00640000000000000, 	 0.004609757362772988649457506227, 
	 0.00689210000000000, 	 0.004360708288516712723137391805, 
	 0.00740880000000000, 	 0.004112682753621002725019639712, 
	 0.00795070000000000, 	 0.003866659507461835728475696428, 
	 0.00851840000000000, 	 0.003623605246910985809571936755, 
	 0.00911250000000000, 	 0.003384464853074286346673593684, 
	 0.00973360000000000, 	 0.003150151741255707328603907769, 
	 0.01038230000000000, 	 0.002921538473437780732144819495, 
	 0.01105920000000000, 	 0.002699447782530054861654944531, 
	 0.01176490000000000, 	 0.002484644154478727814949756691, 
	 0.01250000000000000, 	 0.002277826108007669370786318908, 
	 0.01326510000000000, 	 0.002079619302312293253193198339, 
	 0.01406080000000000, 	 0.001890570590575341072131498876, 
	 0.01488770000000000, 	 0.001711143121924738356651185534, 
	 0.01574640000000000, 	 0.001541712576695506656948575497, 
	 0.01663750000000000, 	 0.001382564599952715951244885950, 
	 0.01756160000000000, 	 0.001233893476608974521316341999, 
	 0.01851930000000000, 	 0.001095802068611892964022924701, 
	 0.01951120000000000, 	 0.000968303011110171595737794448, 
	 0.02053790000000000, 	 0.000851321140785329510264345387, 
	 0.02160000000000000, 	 0.000744697106225342760239815920, 
	 0.02269810000000000, 	 0.000648192087878114524789052719, 
	 0.02383280000000000, 	 0.000561493534297854480531742016, 
	 0.02500470000000000, 	 0.000484221802590718722412305164, 
	 0.02621440000000000, 	 0.000415937574631128662797779905, 
	 0.02746250000000000, 	 0.000356149907146763138043876751, 
	 0.02874960000000000, 	 0.000304324763472028621356241240, 
	 0.03007630000000000, 	 0.000259893867877682507600695105, 
	 0.03144320000000000, 	 0.000222263720037379000626920345, 
	 0.03285090000000000, 	 0.000190824607436979027221338190, 
	 0.03430000000000000, 	 0.000164959457321482770401910312, 
	 0.03579110000000000, 	 0.000144052376967985129758986762, 
	 0.03732480000000000, 	 0.000127496741444952987670422018, 
	 0.03890170000000000, 	 0.000114702701263192440397399585, 
	 0.04052240000000000, 	 0.000105103998067709126845378775, 
	 0.04218750000000000, 	 0.000098163994330152586445005503, 
	 0.04389760000000000, 	 0.000093380842402077243388780481, 
	 0.04565330000000000, 	 0.000090291738772700261923473408, 
	 0.04745520000000000, 	 0.000088476230418141419819394455, 
	 0.04930390000000000, 	 0.000087558561208049749224717473, 
	 0.05120000000000000, 	 0.000087209066938813119490916947, 
	 0.05314410000000000, 	 0.000087144647205666871548485064, 
	 0.05513680000000000, 	 0.000087128360563313089824470647, 
	 0.05717870000000000, 	 0.000086968205860404879103953135, 
	 0.05927040000000000, 	 0.000086515166930715446994525075, 
	 0.06141250000000000, 	 0.000085660609712490595464388921, 
	 0.06360560000000000, 	 0.000084333130148231161575186898, 
	 0.06585030000000000, 	 0.000082494957765117635532445273, 
	 0.06814720000000000, 	 0.000080138023601752670439964110, 
	 0.07049690000000000, 	 0.000077279802153960093676066112, 
	 0.07290000000000001, 	 0.000073959035355700722359426069, 
	 0.07535710000000000, 	 0.000070231442450839962196237898, 
	 0.07786880000000000, 	 0.000066165513166382706458298890, 
	 0.08043570000000000, 	 0.000061838473137378085391427374, 
	 0.08305840000000000, 	 0.000057332500368990903206415505, 
	 0.08573749999999999, 	 0.000052731259994774021889092641, 
	 0.08847360000000000, 	 0.000048116812023005136331535447, 
	 0.09126730000000000, 	 0.000043566933954492915277104809, 
	 0.09411920000000000, 	 0.000039152885565063100595240009, 
	 0.09702990000000000, 	 0.000034937632242453690899815916, 
	 0.10000000000000001, 	 0.000030974527460913466318966070, 
	 0.10249999999999999, 	 0.000027920226593722454041732184, 
	 0.10707106781186548, 	 0.000023019311963228207058200850, 
	 0.11299038105676659, 	 0.000017961041033851731169371235, 
	 0.12000000000000001, 	 0.000013679936990299021920070369, 
	 0.12795084971874737, 	 0.000010661816096012454008180002, 
	 0.13674234614174768, 	 0.000008961066835856442349826818, 
	 0.14630064794363035, 	 0.000008288072050931509599457601, 
	 0.15656854249492380, 	 0.000008170743366285749471650442, 
	 0.16750000000000001, 	 0.000008134635015325068028838908, 
	 0.17905694150420948, 	 0.000007842018215610655859529148, 
	 0.19120718173477352, 	 0.000007155309657792141512914520, 
	 0.20392304845413264, 	 0.000006123479152130908603247645, 
	 0.21718041645257968, 	 0.000004915593693299229517983031, 
	 0.23095800853708795, 	 0.000003736123316500039108999359, 
	 0.24523687548277814, 	 0.000002752776874860121194296767, 
	 0.26000000000000001, 	 0.000002055063592427448917126327, 
	 0.27523198908875057, 	 0.000001647237383194192105034521, 
	 0.29091883092036785, 	 0.000001467963243129411740503466, 
	 0.30704769981818203, 	 0.000001423420899545187570564260, 
	 0.32360679774997902, 	 0.000001420543513040976461224386, 
	 0.34058522398518165, 	 0.000001390936004523871504369274, 
	 0.35797286679028861, 	 0.000001301413643334098790098059, 
	 0.37576031259048137, 	 0.000001152029011163232181437239, 
	 0.39393876913398140, 	 0.000000965672960696685745224312, 
	 0.41249999999999998, 	 0.000000774471674150786380122296, 
	 0.43143626838353100, 	 0.000000607576173454512459162324, 
	 0.45074028853269765, 	 0.000000483252183353930460947675, 
	 0.47040518354904270, 	 0.000000406197715842196594813877, 
	 0.49042444851725164, 	 0.000000369357185011532379394542, 
	 0.51079191812887459, 	 0.000000358508579104580702068592, 
	 0.53150173811932666, 	 0.000000357641785779383689683589, 
	 0.55254833995939046, 	 0.000000353478607881547622866574, 
	 0.57392641833938740, 	 0.000000338155338360170672689720, 
	 0.59563091106185062, 	 0.000000309829347676497874298308, 
	 0.61765698102121636, 	 0.000000271574016069642147854131, 
	 0.64000000000000001, 	 0.000000229274703094923436700762, 
	 0.66265553405258526, 	 0.000000189938638080409103771340, 
	 0.68561933028205269, 	 0.000000157971850470052005663041, 
	 0.70888730484384377, 	 0.000000135773599123105078479657, 
	 0.73245553203367586, 	 0.000000123227398998998714785540, 
	 0.75632023433686701, 	 0.000000118130638818328388233040, 
	 0.78047777333282542, 	 0.000000117156154545931855409968, 
	 0.80492464136246511, 	 0.000000116895158581206446343657, 
	 0.82965745387818801, 	 0.000000114702092764072416082088, 
	 0.85467294240617908, 	 0.000000109174625963284685001281, 
	 0.87996794805940581, 	 0.000000100228965878804857769571, 
	 0.90553941554712269, 	 0.000000088838075997458413672276, 
	 0.93138438763306108, 	 0.000000076567245003024663992444, 
	 0.95750000000000002, 	 0.000000065061233803837047144563, 
	 0.98388347648318442, 	 0.000000055615975277964385186504, 
	 1.01053212463921338, 	 0.000000048919732573964319593391, 
	 1.03744333162063729, 	 0.000000044990911007458856744135, 
	 1.06461456032966861, 	 0.000000043287898101358262839117, 
	 1.09204334582718721, 	 0.000000042931079216592284734602, 
	 1.11972729197565379, 	 0.000000042963109050534161634494, 
	 1.14766406829670364, 	 0.000000042579363339830128196580, 
	 1.17585140702608193, 	 0.000000041280763479745218685915, 
	 1.20428710035026687, 	 0.000000038928289839052638632991, 
	 1.23296899781061975, 	 0.000000035704956833444745751220, 
	 1.26189500386222520, 	 0.000000032011000006949436724876, 
	 1.29106307557576505, 	 0.000000028328344624919498821948, 
	 1.32047122047183074, 	 0.000000025090683242179436045319, 
	 1.35011749447801921, 	 0.000000022587585214174041179285, 
	 1.38000000000000012, 	 0.000000020918305172119077188646, 
	 1.41011688409851454, 	 0.000000019997074753844517276793, 
	 1.44046633676493352, 	 0.000000019599902844613257358427, 
	 1.47104658928863530, 	 0.000000019435445066197406144500, 
	 1.50185591271000463, 	 0.000000019220169440557833862457, 
	 1.53289261635336804, 	 0.000000020903676932570383211089, 
	 1.56415504643463210, 	 0.000000017889730877197114006904, 
	 1.59564158473880369, 	 0.000000016676977159399964218916, 
	 1.62735064736294288, 	 0.000000015208044925647610722800, 
	 1.65928068352044944, 	 0.000000013648877493902750115933, 
	 1.69143017440288590, 	 0.000000012180597629272817550513, 
	 1.72379763209582260, 	 0.000000010957417252298991289314, 
	 1.75638159854545606, 	 0.000000010075857639940327831071, 
	 1.78918064457298365, 	 0.000000009560166343054166213084, 
	 1.82219336893393025, 	 0.000000009364730993774820784062, 
	 1.85541839741982884, 	 0.000000009390664729379311475719, 
	 1.88885438199983202, 	 0.000000009511240922331551131737, 
	 1.92250000000000010, 	 0.000000009599816617092417839498, 
	 1.95635395331817064, 	 0.000000009554287376137208824969, 
	 1.99041496767244230, 	 0.000000009313657432181593946884, 
	 2.02468179188145303, 	 0.000000008864505406670073242699, 
	 2.05915319717473855, 	 0.000000008237440505767135692425, 
	 2.09382797653157660, 	 0.000000007495600774533433206477, 
	 2.12870494404681754, 	 0.000000006718511976230337693529, 
	 2.16378293432230917, 	 0.000000005985057825641958473266, 
	 2.19906080188259434, 	 0.000000005358949943683169048789, 
	 2.23453742061365634, 	 0.000000004879117872594526669360, 
	 2.27021168322355127, 	 0.000000005107111202587046787543, 
	 2.30608250072385124, 	 0.000000004374539752098164298076, 
	 2.34214880193086206, 	 0.000000004299579380318863943372, 
	 2.37840953298567470, 	 0.000000004286695312233315779672, 
	 2.41486365689212912, 	 0.000000004291267181183622312880, 
	 2.45151015307185105, 	 0.000000004276854352349682540014, 
	 2.48834801693555541, 	 0.000000004220517794416565960682, 
	 2.52537625946985811, 	 0.000000004114634009609362883874, 
	 2.56259390683888455, 	 0.000000003965372054078350895903, 
	 2.60000000000000009, 	 0.000000003788631727994242968317};

// Iron:
double InterpolationListFe[192][2] = {
    0.0000000, 0.007708714989239153, 
    0.0001000, 0.0076093052706569485,
    0.0001331, 0.0075766594599204,
    0.0001728, 0.007537672935314042, 
    0.0002197, 0.007491851887643216,
    0.0002744, 0.007438731669425366, 
    0.0003375, 0.007377881350158115, 
    0.0004096, 0.007308908712254484,
    0.0004913, 0.007231463906437165, 
    0.0005832, 0.007145246017992584,
    0.0006859, 0.007050006696216314,
    0.0008000, 0.006945555098846328,
    0.0009261, 0.006831762595296850,
    0.0010648, 0.006708565866038321,
    0.0012167, 0.006575972190463427, 
    0.0013824, 0.006434061660855705,
    0.0015625, 0.006282990095653268,
    0.0017576, 0.006122990829170266, 
    0.0019683, 0.005954376665086176,
    0.0021952, 0.005777539129354056, 
    0.0024389, 0.005592948642803091,
    0.0027000, 0.005401152796032328,
    0.0029791, 0.005202773989732125,
    0.0032768, 0.004998505508455877, 
    0.0035937, 0.004789105970683600,
    0.0039304, 0.004575395448169053, 
    0.0042875, 0.004358246617895979,
    0.0046656, 0.004138581115519516, 
    0.0050653, 0.003917353588811202,
    0.0054872, 0.0036955480989264607,
    0.0059319, 0.0034741655782181196,
    0.0064000, 0.0032542130868616907,
    0.0068921, 0.0030366927736735043, 
    0.0074088, 0.002822589753955372, 
    0.0079507, 0.002612861897646956,
    0.0085184, 0.0024084265472237368,
    0.0091125, 0.0022101500367806975,
    0.0097336, 0.0020188379191218085, 
    0.0103823, 0.0018352241309121003, 
    0.0110592, 0.0016599632471773224,
    0.0117649, 0.0014936211449486604, 
    0.0125000, 0.001336670216161997, 
    0.0132651, 0.0011894841390874796,
    0.0140608, 0.0010523339197457768, 
    0.0148877, 0.0009253862199419865, 
    0.0157464, 0.0008087046238411683,
    0.0166375, 0.0007022495313464513, 
    0.0175616, 0.0006058833288807683,
    0.0185193, 0.0005193742125612004, 
    0.0195112, 0.00044240328659635544,
    0.0205379, 0.00037457236743847325,
    0.0216000, 0.0003154132836507223,
    0.0226981, 0.0002643976435565329, 
    0.0238328, 0.0002209479515594144, 
    0.0250047, 0.00018444893238844128,
    0.0262144, 0.00015425921907910177, 
    0.0274625, 0.0001297229147462644, 
    0.0287496, 0.00011018099247793085,
    0.0300763, 0.00009498215835821136, 
    0.0314432, 0.00008349297682658389, 
    0.0328509, 0.00007510705430462801,
    0.0343000, 0.00006925310693551514, 
    0.0357911, 0.00006540177491144265,
    0.0373248, 0.00006307107022790397, 
    0.0389017, 0.00006183043342529447,
    0.0405224, 0.00006130331964174271, 
    0.0421875, 0.00006116839555061044, 
    0.0438976, 0.00006115937107315936,
    0.0456533, 0.00006106357341778097, 
    0.0474552, 0.00006071938840559449, 
    0.0493039, 0.000060012721598843254,
    0.0512000, 0.000058872651414854114,
    0.0531441, 0.00005726645974185306, 
    0.0551368, 0.00005519423194449544,
    0.0571787, 0.000052683217986204035, 
    0.0592704, 0.0000497821395983702, 
    0.0614125, 0.000046555616036453895,
    0.0636056, 0.000043078863334367344, 
    0.0658503, 0.000039432800076813155,
    0.0681472, 0.000035699667956018545,
    0.0704969, 0.00003195924844101546, 
    0.0729000, 0.00002828572912602835, 
    0.0753571, 0.00002474524600369312,
    0.0778688, 0.000021394101724706873, 
    0.0804357, 0.000018277636126516478,
    0.0830584, 0.000015429704478946394,
    0.0857375, 0.000012872701718402775, 
    0.0884736, 0.000010618057763141534,
    0.0912673, 0.000008667120030095286, 
    0.0941192, 0.000007012334488834134,
    0.0970299, 0.0000056386358774760945, 
    0.1000000, 0.000004524960587955847, 
    0.1025000, 0.0000037827485565902246,
    0.1070710678118655, 0.000002804672477426654,
    0.1129903810567666, 0.0000020818562306035776,
    0.1200000000000000, 0.0000017205444421616975,
    0.1279508497187474, 0.0000016233114847922,
    0.1367423461417477, 0.000001616980335352853,
    0.1463006479436304, 0.0000015571977292403035,
    0.1565685424949238, 0.0000013811612377381518,
    0.1675000000000000, 0.0000011057741992234024, 
    0.1790569415042095, 0.000000792411410993873, 
    0.1912071817347735, 0.0000005061277501663869,
    0.2039230484541326, 0.00000028870626544398757,
    0.2171804164525797, 0.00000015117661703187741,
    0.2309580085370879, 0.00000008091264905631378,
    0.2452368754827781, 0.00000005450687750140146, 
    0.2600000000000000, 0.00000004911693439204673,
    0.2752319890887506, 0.00000004879191729001772,
    0.2909188309203679, 0.000000045753714371640426,
    0.3070476998181820, 0.000000038481315591556425,
    0.3236067977499790, 0.000000028739508279610767,
    0.3405852239851817, 0.00000001905312247888031,
    0.3579728667902886, 0.000000011250402372743096,
    0.3757603125904814, 0.000000006026355626982868,
    0.3939387691339814, 0.000000003152950004600945,
    0.4125000000000000, 0.000000001930135922162648,
    0.4314362683835310, 0.0000000015954129563820765, 
    0.4507402885326977, 0.0000000015677111220793877,
    0.4704051835490427, 0.000000001521613517798182,
    0.4904244485172516, 0.0000000013483619647782546,
    0.5107919181288746, 0.0000000010705880392867956,
    0.5315017381193267, 0.0000000007602201673841345,
    0.5525483399593905, 0.0000000004837058037113819,
    0.5739264183393874, 0.0000000002780140851208741,
    0.5956309110618506, 0.0000000001493723111149711,
    0.6176569810212164, 0.00000000008350748755836623,
    0.6400000000000000, 0.00000000005816017449643092, 
    0.6626555340525853, 0.000000000052569309371636114, 
    0.6856193302820527, 0.00000000005226661175184759,
    0.7088873048438438, 0.00000000004985921996238874,
    0.7324555320336759, 0.00000000004343306133243705,
    0.7563202343368670, 0.00000000003417207324780026,
    0.7804777733328254, 0.00000000002426722446523826,
    0.8049246413624651, 0.000000000015588081548969152,
    0.8296574538781880, 0.000000000009134856941010168,
    0.8546729424061791, 0.0000000000050486302464797994,
    0.8799679480594058, 0.0000000000029000814299257534,
    0.9055394155471227, 0.0000000000020307616922138207,
    0.9313843876330611, 0.0000000000018155409147728499,
    0.9575000000000000, 0.000000000001802392048853609, 
    0.9838834764831844, 0.0000000000017436845070837145, 
    1.0105321246392134, 0.0000000000015589154303949347,
    1.0374433316206373, 0.0000000000012703871797405537,
    1.0646145603296686, 0.0000000000009419641570465203,
    1.0920433458271872, 0.00000000000063626245395524,
    1.1197272919756538, 0.00000000000039335933077615493,
    1.1476640682967036, 0.00000000000022669587549747528,
    1.1758514070260820, 0.00000000000012910846120372429,
    1.2042871003502669, 0.0000000000000824355919133146,
    1.2329689978106197, 0.0000000000000662369640694646,
    1.2618950038622252, 0.00000000000006350807101684354,
    1.2910630755757650, 0.00000000000006310659081008146,
    1.3204712204718307, 0.00000000000005966138619535146,
    1.3501174944780192, 0.0000000000000520855491092563,
    1.3800000000000001, 0.0000000000000416941120038576,
    1.4101168840985145, 0.00000000000003058721457939205,
    1.4404663367649335, 0.00000000000002059469495900529,
    1.4710465892886353, 0.000000000000012798677417515134,
    1.5018559127100046, 0.000000000000007492856381863059,
    1.5328926163533680, 0.000000000000004387601678531686,
    1.5641550464346320, 0.0000000000000028926722945549504,
    1.5956415847388037, 0.000000000000002365526897806384,
    1.6273506473629429, 0.0000000000000022730986752455535,
    1.6592806835204494, 0.000000000000002261238583102665,
    1.6914301744028860, 0.0000000000000021529562627426844,
    1.7237976320958226, 0.000000000000001905920936622066,
    1.7563815985454560, 0.0000000000000015569539563929381,
    1.7891806445729836, 0.0000000000000011725750100474937,
    1.8221933689339302, 0.0000000000000008149350718018938,
    1.8554183974198288, 0.0000000000000005246344011702202,
    1.8888543819998320, 0.0000000000000003171305486995996,
    1.9225000000000000, 0.00000000000000018755465286048785, 
    1.9563539533181706, 0.00000000000000011896804943153943, 
    1.9904149676724423, 0.00000000000000009043118150850742,
    2.0246817918814530, 0.00000000000000008289909306750262,
    2.0591531971747385, 0.0000000000000000823674297755631,
    2.0938279765315766, 0.0000000000000000806269271310609,
    2.1287049440468175, 0.00000000000000007442337044321555,
    2.1637829343223090, 0.00000000000000006387340987753255,
    2.1990608018825943, 0.000000000000000050809448897434086,
    2.2345374206136563, 0.000000000000000037462302031901945,
    2.2702116832235513, 0.000000000000000025639988230037084,
    2.3060825007238512, 0.00000000000000001637900044080695,
    2.3421488019308620, 0.000000000000000009944902730005644,
    2.3784095329856747, 0.000000000000000006030472392744876, 
    2.4148636568921290, 0.00000000000000000401846692572576, 
    2.4515101530718510, 0.000000000000000003217805287151963, 
    2.4883480169355554, 0.00000000000000000302710376533775, 
    2.5253762594698580, 0.00000000000000000301615808839364, 
    2.5625939068388845, 0.000000000000000002939240754657754, 
    2.6000000000000000, 0.0000000000000000027043040951614707};
    
// Tungsten
double InterpolationListW[192][2]{
    0.00000000000000000, 0.003695128689397661134186101606,
    0.00010000000000000, 0.003596311193751529182438542165,
    0.00013310000000000, 0.003564129321169989990381044009,
    0.00017280000000000, 0.003525871622518108542548853634,
    0.00021970000000000, 0.003481150999616229330807515296, 
    0.00027440000000000, 0.003429636618345667433555012948,
    0.00033750000000000, 0.003371062575188015462968049718,
    0.00040960000000000, 0.003305234796949360880774504423,
    0.00049130000000000, 0.003232039171150257513692727329,
    0.00058320000000000, 0.003151447459784728014758892201,
    0.00068590000000000, 0.003063523967814780861462775619,
    0.00080000000000000, 0.002968429503735806832681598522,
    0.00092610000000000, 0.002866425601250018224963600488,
    0.00106480000000000, 0.002757875552210145575493527303,
    0.00121670000000000, 0.002643245249672632191106913524,
    0.00138240000000000, 0.002523100439388445241639669092,
    0.00156250000000000, 0.002398103445924693825214157883,
    0.00175760000000000, 0.002269006058417696088808090948,
    0.00196830000000000, 0.002136641747462460303591536004,
    0.00219520000000000, 0.002001914020506826742684669540,
    0.00243890000000000, 0.001865784224127538899404288308,
    0.00270000000000000, 0.001729255748391713689779414231,
    0.00297910000000000, 0.001593358095971507447721760009,
    0.00327680000000000, 0.001459127926568040559476835405,
    0.00359370000000000, 0.001327590689587635278123833871,
    0.00393040000000000, 0.001199740094139545689214121360,
    0.00428750000000000, 0.001076519149078587105419768655,
    0.00466560000000000, 0.000958800116265603476727041876,
    0.00506530000000000, 0.000847367171634470762141277955,
    0.00548720000000000, 0.000742899141068094587096737325,
    0.00593190000000000, 0.000645956086824647345706607027,
    0.00640000000000000, 0.000556967046884506702605910355,
    0.00689210000000000, 0.000476222591307931596236319161,
    0.00740880000000000, 0.000403869340216060244627693798,
    0.00795070000000000, 0.000339909906865134149155788235,
    0.00851840000000000, 0.000284205172591857682922594774,
    0.00911250000000000, 0.000236482090041511319169695304,
    0.00973360000000000, 0.000196343635305141475319579136,
    0.01038230000000000, 0.000163283812050447110211445767,
    0.01105920000000000, 0.000136704040981590406152526573,
    0.01176490000000000, 0.000115933570341277098164449455,
    0.01250000000000000, 0.000100250007174439615016681149,
    0.01326510000000000, 0.000088902418208645607932902322,
    0.01406080000000000, 0.000081132971335133672458050924,
    0.01488770000000000, 0.000076199504888837952176414148,
    0.01574640000000000, 0.000073395006993703641880698318,
    0.01663750000000000, 0.000072066478611421163269143420,
    0.01756160000000000, 0.000071629322373924499372903341,
    0.01851930000000000, 0.000071579958110363047429566818,
    0.01951120000000000, 0.000071503091954874537904823795,
    0.02053790000000000, 0.000071076668739469692692364844,
    0.02160000000000000, 0.000070071290819926192530719966,
    0.02269810000000000, 0.000068347498152854200561233389,
    0.02383280000000000, 0.000065848047089199371675882766,
    0.02500470000000000, 0.000062588906726471714957182879,
    0.02621440000000000, 0.000058646385901953974439503731,
    0.02746250000000000, 0.000054144321339817312827100843,
    0.02874960000000000, 0.000049238875859818827013421327,
    0.03007630000000000, 0.000044104929738992178233931291,
    0.03144320000000000, 0.000038921581137551386096393169,
    0.03285090000000000, 0.000033860623097418873978566717,
    0.03430000000000000, 0.000029075323038021136048568091,
    0.03579110000000000, 0.000024693120755109754254795137,
    0.03732480000000000, 0.000020809274586979974663251275,
    0.03890170000000000, 0.000017484750240888430615525742,
    0.04052240000000000, 0.000014745056091790060385257437,
    0.04218750000000000, 0.000012583010121752873620732532,
    0.04389760000000000, 0.000010961868873855927728204647,
    0.04565330000000000, 0.000009821582528476718881469895,
    0.04745520000000000, 0.000009084450271823019283840873,
    0.04930390000000000, 0.000008662856339111752243661510,
    0.05120000000000000, 0.000008465351948175297758692089,
    0.05314410000000000, 0.000008403826225206875578216913,
    0.05513680000000000, 0.000008398157595558918852066653,
    0.05717870000000000, 0.000008381266103093087312136435,
    0.05927040000000000, 0.000008301170931208957880199049,
    0.06141250000000000, 0.000008123204228323913959832099,
    0.06360560000000000, 0.000007829215882762603404519675,
    0.06585030000000000, 0.000007417133272897836383948621,
    0.06814720000000000, 0.000006897891174651087987153980,
    0.07049690000000000, 0.000006293232407180837804027643,
    0.07290000000000001, 0.000005631479502527495451717852,
    0.07535710000000000, 0.000004944808705966125984419997,
    0.07786880000000000, 0.000004265104576296993169135918,
    0.08043570000000000, 0.000003621857562561175849466825,
    0.08305840000000000, 0.000003039076293290251217627364,
    0.08573749999999999, 0.000002534544631396641230100747,
    0.08847360000000000, 0.000002118250278621680210330283,
    0.09126730000000000, 0.000001793170696313064269841525,
    0.09411920000000000, 0.000001555111767694160187049720,
    0.09702990000000000, 0.000001394676753318171640543119,
    0.10000000000000001, 0.000001297983290828323104228268,
    0.10249999999999999, 0.000001254924506377355299354998,
    0.10707106781186548, 0.000001229861184039941504012473,
    0.11299038105676659, 0.000001227141481514125375768204,
    0.12000000000000001, 0.000001179048976254858718329941,
    0.12795084971874737, 0.000001025766928099246724369505,
    0.13674234614174768, 0.000000777205934864249292435407,
    0.14630064794363035, 0.000000510778413216322671182128,
    0.15656854249492380, 0.000000312428721185513045067360,
    0.16750000000000001, 0.000000216925680721194659079207,
    0.17905694150420948, 0.000000195952054413119055499372,
    0.19120718173477352, 0.000000193728738823053288714912,
    0.20392304845413264, 0.000000171701951713326088805287,
    0.21718041645257968, 0.000000126882261673310385492627,
    0.23095800853708795, 0.000000079041115713236238096523,
    0.24523687548277814, 0.000000046851163088579313646739,
    0.26000000000000001, 0.000000034192222768513116137210,
    0.27523198908875057, 0.000000032547651473543999010407,
    0.29091883092036785, 0.000000031407360896973513717465,
    0.30704769981818203, 0.000000025980029898803638393016,
    0.32360679774997902, 0.000000017783042712266502709208,
    0.34058522398518165, 0.000000010619458418262810744516,
    0.35797286679028861, 0.000000006707319889020493748030,
    0.37576031259048137, 0.000000005615861378076390273478,
    0.39393876913398140, 0.000000005552845209570005330138,
    0.41249999999999998, 0.000000005088287331889566630666,
    0.43143626838353100, 0.000000003917133654862589525436,
    0.45074028853269765, 0.000000002536377650852199474543,
    0.47040518354904270, 0.000000001520279103945360942795,
    0.49042444851725164, 0.000000001061033019015534319717,
    0.51079191812887459, 0.000000000973160871092161848306,
    0.53150173811932666, 0.000000000958593044315863642162,
    0.55254833995939046, 0.000000000840347727912005798205,
    0.57392641833938740, 0.000000000619778629984397204070,
    0.59563091106185062, 0.000000000393189963059818780330,
    0.61765698102121636, 0.000000000242278757345858472251,
    0.64000000000000001, 0.000000000181490195452227086526,
    0.66265553405258526, 0.000000000172589428399842617481,
    0.68561933028205269, 0.000000000168424127427941769815,
    0.70888730484384377, 0.000000000145005238639781218947,
    0.73245553203367586, 0.000000000105897197624125525704,
    0.75632023433686701, 0.000000000067501301164655555759,
    0.78047777333282542, 0.000000000042466279243148403859,
    0.80492464136246511, 0.000000000032467201771646800280,
    0.82965745387818801, 0.000000000031003413370638567228,
    0.85467294240617908, 0.000000000030310762794907931871,
    0.87996794805940581, 0.000000000026364778961207829657,
    0.90553941554712269, 0.000000000019627509855128067186,
    0.93138438763306108, 0.000000000012788981282876350206,
    0.95750000000000002, 0.000000000008091182870355115809,
    0.98388347648318442, 0.000000000006024446434533652579,
    1.01053212463921338, 0.000000000005627416398891575363,
    1.03744333162063729, 0.000000000005561983253468598482,
    1.06461456032966861, 0.000000000005005215863607871496,
    1.09204334582718721, 0.000000000003896078558192949788,
    1.11972729197565379, 0.000000000002643732312960800394,
    1.14766406829670364, 0.000000000001680033422288215609,
    1.17585140702608193, 0.000000000001178324726815277816,
    1.20428710035026687, 0.000000000001036095057688271570,
    1.23296899781061975, 0.000000000001027429273540456148,
    1.26189500386222520, 0.000000000000970445057725500324,
    1.29106307557576505, 0.000000000000807210869117171405,
    1.32047122047183074, 0.000000000000584005509727708304,
    1.35011749447801921, 0.000000000000381215953628350461,
    1.38000000000000012, 0.000000000000251628361751833890,
    1.41011688409851454, 0.000000000000198342555363835389,
    1.44046633676493352, 0.000000000000189393168539772633,
    1.47104658928863530, 0.000000000000186793175639923153,
    1.50185591271000463, 0.000000000000168377736642979535,
    1.53289261635336804, 0.000000000000133026794286872359,
    1.56415504643463210, 0.000000000000092655392983313026,
    1.59564158473880369, 0.000000000000060240514219833799,
    1.62735064736294288, 0.000000000000041873815299672686,
    1.65928068352044944, 0.000000000000035563672379559286,
    1.69143017440288590, 0.000000000000034926579820462017,
    1.72379763209582260, 0.000000000000033918145500318351,
    1.75638159854545606, 0.000000000000029719559818969172,
    1.78918064457298365, 0.000000000000022883010232727959,
    1.82219336893393025, 0.000000000000015698533178355450,
    1.85541839741982884, 0.000000000000010251312031163263,
    1.88885438199983202, 0.000000000000007331066103560663,
    1.92250000000000010, 0.000000000000006408685336418073,
    1.95635395331817064, 0.000000000000006336473121869100,
    1.99041496767244230, 0.000000000000006107310615730045,
    2.02468179188145303, 0.000000000000005296056500526293,
    2.05915319717473855, 0.000000000000004033340843207276,
    2.09382797653157660, 0.000000000000002729843840271910,
    2.12870494404681754, 0.000000000000001742478667112368,
    2.16378293432230917, 0.000000000000001208590324411657,
    2.19906080188259434, 0.000000000000001033336000262735,
    2.23453742061365634, 0.000000000000001018764004692058,
    2.27021168322355127, 0.000000000000000981689055640717,
    2.30608250072385124, 0.000000000000000842974295177797,
    2.34214880193086206, 0.000000000000000616254481370487,
    2.37840953298567470, 0.000000000000000374702034629345,
    2.41486365689212912, 0.000000000000000182013798702996,
    2.45151015307185105, 0.000000000000000071618941888907,
    2.48834801693555541, 0.000000000000000029366348261159,
    2.52537625946985811, 0.000000000000000024654974470743,
    2.56259390683888455, 0.000000000000000020782759879762,
    2.60000000000000009, 0.000000000000000000000000000000};

//*****************************************************************
// Neutrino fluxes
//*****************************************************************

// near detector flux based on http://home.fnal.gov/~ljf26/DUNE2015CDRFluxes/ "Reference beam 80 GeV, 204m x 4m DP"
double numu_flux_80_ref[171] = {
    0.0,	0.5,	0.016929222000352028,
    0.5,	0.5625,	0.0035194637647099304,
    0.5625,	0.625,	0.003982911652574092,
    0.625,	0.6875,	0.004689226073879411,
    0.6875,	0.75,	0.0056384070286258844,
    0.75,	0.8125,	0.006587587983372361,
    0.8125,	0.875,	0.007536768938118833,
    0.875,	0.9375,	0.008526097329341153,
    0.9375,	1.0,	0.009555573157039324,
    1.0,	1.125,	0.02219957379717314,
    1.125,	1.25,	0.025883419771255443,
    1.25,	1.375,	0.02913320840862738,
    1.375,	1.5,	0.03187450855068453,
    1.5,	1.675,	0.048215685044267764,
    1.675,	1.75,	0.021233326414717354,
    1.75,	1.875,	0.03557762174307849,
    1.875,	2.0,	0.03565148018823996,
    2.0,	2.25,	0.07080576484251018,
    2.25,	2.5,	0.06872942021309965,
    2.5,	2.75,	0.06598451916158472,
    2.75,	3.0,	0.0638627151674644,
    3.0,	3.25,	0.061082341199759714,
    3.25,	3.5,	0.057105041640653234,
    3.5,	3.75,	0.051882186886053255,
    3.75,	4.0,	0.0458938047948257,
    4.0,	4.5,	0.07090599111203268,
    4.5,	5.0,	0.04338023277731533,
    5.0,	5.5,	0.022817643597432203,
    5.5,	6.0,	0.01168663424300967,
    6.0,	6.5,	0.006511242709143518,
    6.5,	7.0,	0.004193352246408958,
    7.0,	7.5,	0.0032400995695741996,
    7.5,	8.0,	0.002645292794772628,
    8.0,	9.0,	0.004495807219796442,
    9.0,	10.0,	0.0038447555266115387,
    10.0,	11.0,	0.003264430725120436,
    11.0,	12.0,	0.003016677815429217,
    12.0,	13.0,	0.002728910054138131,
    13.0,	14.0,	0.002513499782078639,
    14.0,	15.0,	0.0020709043104832217,
    15.0,	16.0,	0.0016787775293643737,
    16.0,	18.0,	0.0026596485819110377,
    18.0,	20.0,	0.0017968094847206754,
    20.0,	22.0,	0.0012576733837704945,
    22.0,	24.0,	0.0008581662813377083,
    24.0,	26.0,	0.0005765734934597889,
    26.0,	28.0,	0.0004577245506450493,
    28.0,	30.0,	0.0003508510890818546,
    30.0,	32.0,	0.0002462679176518669,
    32.0,	36.0,	0.00032606693225858274,
    36.0,	40.0,	0.00018456856534692867,
    40.0,	44.0,	0.00009852534531531461,
    44.0,	48.0,	0.00006343354787143141,
    48.0,	52.0,	0.000030809803926768894,
    52.0,	56.0,	0.000011299529263990873,
    56.0,	60.0,	0.000005557938727995897,
    60.0,	68.0,	0.0000018957899910279147};



// near detector flux based on http://home.fnal.gov/~ljf26/DUNE2015CDRFluxes/ "Optimized beam 80 GeV, 204m x 4m DP"
double numu_flux_80_opt[171] = {
    0.0,	0.5,	0.03034113538120069,
    0.5,	0.5625,	0.006747431882687749,
    0.5625,	0.625,	0.007476965320143888,
    0.625,	0.6875,	0.008336766421166137,
    0.6875,	0.75,	0.009326835185754495,
    0.75,	0.8125,	0.010316903950342854,
    0.8125,	0.875,	0.011306972714931215,
    0.875,	0.9375,	0.012391037909538776,
    0.9375,	1.0,	0.013569099534165534,
    1.0,	1.125,	0.030672383942211386,
    1.125,	1.25,	0.03451434692344474,
    1.25,	1.375,	0.03748602638740438,
    1.375,	1.5,	0.04005918454582847,
    1.5,	1.675,	0.05962435797896461,
    1.675,	1.75,	0.0263186073085578,
    1.75,	1.875,	0.0444851520160936,
    1.875,	2.0,	0.04490571080412061,
    2.0,	2.25,	0.09008680533109388,
    2.25,	2.5,	0.0902747683840343,
    2.5,	2.75,	0.0858632583701365,
    2.75,	3.0,	0.07498992233281734,
    3.0,	3.25,	0.0602229444977563,
    3.25,	3.5,	0.04628229048937517,
    3.5,	3.75,	0.033905887606413776,
    3.75,	4.0,	0.02386662472418749,
    4.0,	4.5,	0.025533628318441377,
    4.5,	5.0,	0.009353100921686858,
    5.0,	5.5,	0.0046030700306817635,
    5.5,	6.0,	0.0027517617786446988,
    6.0,	6.5,	0.001977845331000316,
    6.5,	7.0,	0.0016665395149737246,
    7.0,	7.5,	0.0014323250577805108,
    7.5,	8.0,	0.0013552261671801195,
    8.0,	9.0,	0.002536287098192517,
    9.0,	10.0,	0.002371288987763375,
    10.0,	11.0,	0.002204698768910719,
    11.0,	12.0,	0.0021418852089266677,
    12.0,	13.0,	0.0018342405480526543,
    13.0,	14.0,	0.0013923581678720381,
    14.0,	15.0,	0.0009701278560560644,
    15.0,	16.0,	0.0007828216685109261,
    16.0,	18.0,	0.0010753673798828643,
    18.0,	20.0,	0.0007720520390220245,
    20.0,	22.0,	0.0005228429792411134,
    22.0,	24.0,	0.00037012535120660114,
    24.0,	26.0,	0.0002843041537946402,
    26.0,	28.0,	0.00020385348138638127,
    28.0,	30.0,	0.00013748029013793429,
    30.0,	32.0,	0.00010316788559361339,
    32.0,	36.0,	0.00012871903903485235,
    36.0,	40.0,	0.000054839624543784474,
    40.0,	44.0,	0.00004010488785026944,
    44.0,	48.0,	0.000017500839847014438,
    48.0,	52.0,	0.000006481329801199818,
    52.0,	56.0,	0.000004535351611847288,
    56.0,	60.0,	0.0,
    60.0,	68.0,	0.0};



// near detector flux based on http://home.fnal.gov/~ljf26/2017DUNEFluxes/ "Optimized Flux from Oct 2017"
double numu_flux_120[171] = {
    0.0,	0.5,	0.030303591670871570,
    0.5,	0.5625,	0.007325160279266537,
    0.5625,	0.625,	0.00831420556915676,
    0.625,	0.6875,	0.0092649822017217,
    0.6875,	0.75,	0.010177490176961356,
    0.75,	0.8125,	0.011089998152201012,
    0.8125,	0.875,	0.012002506127440669,
    0.875,	0.9375,	0.012866938965250384,
    0.9375,	1.0,	0.01368329666563017,
    1.0,	1.125,	0.02981566643239965,
    1.125,	1.25,	0.03220392586360711,
    1.25,	1.375,	0.033715013924502914,
    1.375,	1.5,	0.03522672108125194,
    1.5,	1.675,	0.05191022811276219,
    1.675,	1.75,	0.02340588339903388,
    1.75,	1.875,	0.04074077161351495,
    1.875,	2.0,	0.04221264820234592,
    2.0,	2.25,	0.08635063058041385,
    2.25,	2.5,	0.08617694573832219,
    2.5,	2.75,	0.08257354348321329,
    2.75,	3.0,	0.07431057564520524,
    3.0,	3.25,	0.06386527046619168,
    3.25,	3.5,	0.05217367665645861,
    3.5,	3.75,	0.039271345374811986,
    3.75,	4.0,	0.0270606612990639,
    4.0,	4.5,	0.026355764749912615,
    4.5,	5.0,	0.00875048176370311,
    5.0,	5.5,	0.004490114781372806,
    5.5,	6.0,	0.0033879731839047745,
    6.0,	6.5,	0.002876149673881406,
    6.5,	7.0,	0.0026130818997861897,
    7.0,	7.5,	0.002329693056554013,
    7.5,	8.0,	0.002168072939454591,
    8.0,	9.0,	0.004049331387068357,
    9.0,	10.0,	0.003650845389807714,
    10.0,	11.0,	0.0033657482369343636,
    11.0,	12.0,	0.002988543774761638,
    12.0,	13.0,	0.002791422570813419,
    13.0,	14.0,	0.002451290649273626,
    14.0,	15.0,	0.0020017201441648773,
    15.0,	16.0,	0.0015097853117731971,
    16.0,	18.0,	0.001974246426192922,
    18.0,	20.0,	0.001297185416941049,
    20.0,	22.0,	0.0010996380537390308,
    22.0,	24.0,	0.0008003730332882926,
    24.0,	26.0,	0.0006079483260725642,
    26.0,	28.0,	0.00046160044345219,
    28.0,	30.0,	0.0003936343042457902,
    30.0,	32.0,	0.0002616542978478585,
    32.0,	36.0,	0.000414133212573968,
    36.0,	40.0,	0.0003136944562050756,
    40.0,	44.0,	0.00017357603823251104,
    44.0,	48.0,	0.00012754192584631867,
    48.0,	52.0,	0.00009999238026499851,
    52.0,	56.0,	0.00005469424256255198,
    56.0,	60.0,	0.00004329356188231641,
    60.0,	68.0,	0.000055096685887558225};



// near detector flux based on http://home.fnal.gov/~ljf26/DUNE2015CDRFluxes/ "Reference beam 80 GeV, 204m x 4m DP"
double antinumu_flux_80_ref[171] = {
    0.0,	0.5,	0.01825673024309818,
    0.5,	0.5625,	0.0037435614044700376,
    0.5625,	0.625,	0.0042405180692678315,
    0.625,	0.6875,	0.0049920236448223075,
    0.6875,	0.75,	0.0059980781311334665,
    0.75,	0.8125,	0.007004132617444623,
    0.8125,	0.875,	0.008010187103755782,
    0.875,	0.9375,	0.009050374769044776,
    0.9375,	1.0,	0.010124695613311606,
    1.0,	1.125,	0.023472353759423706,
    1.125,	1.25,	0.02714697735977361,
    1.25,	1.375,	0.030198941183406092,
    1.375,	1.5,	0.03289593124377594,
    1.5,	1.675,	0.0498076771943437,
    1.675,	1.75,	0.021877647146512504,
    1.75,	1.875,	0.03652421902104553,
    1.875,	2.0,	0.03648289501905491,
    2.0,	2.25,	0.07223106793427846,
    2.25,	2.5,	0.06974152404692055,
    2.5,	2.75,	0.06670896536964209,
    2.75,	3.0,	0.06386072168337455,
    3.0,	3.25,	0.06034554705023989,
    3.25,	3.5,	0.05641341629865335,
    3.5,	3.75,	0.051071486463199194,
    3.75,	4.0,	0.04488188691427714,
    4.0,	4.5,	0.06982754813705945,
    4.5,	5.0,	0.04181225687413341,
    5.0,	5.5,	0.022092370442488882,
    5.5,	6.0,	0.011148788465610923,
    6.0,	6.5,	0.006031380265294175,
    6.5,	7.0,	0.003720617605005496,
    7.0,	7.5,	0.0028263626133770135,
    7.5,	8.0,	0.002342387805578202,
    8.0,	9.0,	0.003921238950271192,
    9.0,	10.0,	0.0030855503623381524,
    10.0,	11.0,	0.0027108282840837177,
    11.0,	12.0,	0.002306186953168327,
    12.0,	13.0,	0.0020301373652827303,
    13.0,	14.0,	0.0018033532792124073,
    14.0,	15.0,	0.0015979080660849783,
    15.0,	16.0,	0.0012834312411885817,
    16.0,	18.0,	0.0019487411878449862,
    18.0,	20.0,	0.0013955243226500662,
    20.0,	22.0,	0.0008726802217109163,
    22.0,	24.0,	0.000616424078577991,
    24.0,	26.0,	0.00045713747328431765,
    26.0,	28.0,	0.0002933077928016845,
    28.0,	30.0,	0.00021117461180226863,
    30.0,	32.0,	0.0001675030147755297,
    32.0,	36.0,	0.00021599982280790325,
    36.0,	40.0,	0.00011328128492115294,
    40.0,	44.0,	0.00004049846207606754,
    44.0,	48.0,	0.000026887499140459588,
    48.0,	52.0,	0.00001204543400193698,
    52.0,	56.0,	0.000005274256665845189,
    56.0,	60.0,	0.0000016145424910991908,
    60.0,	68.0,	0.0};



// near detector flux based on http://home.fnal.gov/~ljf26/DUNE2015CDRFluxes/ "Optimized beam 80 GeV, 204m x 4m DP"
double antinumu_flux_80_opt[171] = {
    0.0,	0.5,	0.032017705747784155,
    0.5,	0.5625,	0.007066740035244301,
    0.5625,	0.625,	0.007830726567261167,
    0.625,	0.6875,	0.008730319899990468,
    0.6875,	0.75,	0.009765520033432208,
    0.75,	0.8125,	0.01080072016687394,
    0.8125,	0.875,	0.011835920300315675,
    0.875,	0.9375,	0.012972656624967518,
    0.9375,	1.0,	0.014210929140829467,
    1.0,	1.125,	0.03213667582924477,
    1.125,	1.25,	0.036074382984965424,
    1.25,	1.375,	0.038996707232958935,
    1.375,	1.5,	0.04134482848691386,
    1.5,	1.675,	0.06078156687926477,
    1.675,	1.75,	0.026721246880099057,
    1.75,	1.875,	0.045140789284024305,
    1.875,	2.0,	0.04546904018690806,
    2.0,	2.25,	0.09063954584433898,
    2.25,	2.5,	0.0897961171726243,
    2.5,	2.75,	0.08513363366996156,
    2.75,	3.0,	0.07329137349575966,
    3.0,	3.25,	0.058944890786123874,
    3.25,	3.5,	0.045467812459545315,
    3.5,	3.75,	0.033710232929523964,
    3.75,	4.0,	0.02351633024836754,
    4.0,	4.5,	0.02505110281936181,
    4.5,	5.0,	0.008834178461360332,
    5.0,	5.5,	0.00425487122012456,
    5.5,	6.0,	0.002414662562510736,
    6.0,	6.5,	0.0015626525928399086,
    6.5,	7.0,	0.0012401411559136194,
    7.0,	7.5,	0.0011064752381958747,
    7.5,	8.0,	0.0009850018960010484,
    8.0,	9.0,	0.0017609113605877007,
    9.0,	10.0,	0.0015694146164649495,
    10.0,	11.0,	0.0015635419634853012,
    11.0,	12.0,	0.00141031975554254,
    12.0,	13.0,	0.001254203825119499,
    13.0,	14.0,	0.000912589471141923,
    14.0,	15.0,	0.0006811509723404491,
    15.0,	16.0,	0.0005198642357066324,
    16.0,	18.0,	0.0007521965539834551,
    18.0,	20.0,	0.0005145520272562831,
    20.0,	22.0,	0.00038757842471173157,
    22.0,	24.0,	0.00024191276085998802,
    24.0,	26.0,	0.00017593738303970662,
    26.0,	28.0,	0.00012048208979391254,
    28.0,	30.0,	0.00008541132620394874,
    30.0,	32.0,	0.000056738576009409317,
    32.0,	36.0,	0.00007488843968917636,
    36.0,	40.0,	0.000035688295576053556,
    40.0,	44.0,	0.00001783328829162683,
    44.0,	48.0,	0.00001093931179028006,
    48.0,	52.0,	0.000005693029836663955,
    52.0,	56.0,	0.000002653458937761415,
    56.0,	60.0,	0.0,
    60.0,	68.0,	0.0};



// near detector flux based on http://home.fnal.gov/~ljf26/2017DUNEFluxes/ "Optimized Flux from Oct 2017"
double antinumu_flux_120[171] = {
    0.0,	0.5,	0.0321359050286081,
    0.5,	0.5625,	0.007724772727462366,
    0.5625,	0.625,	0.008786717267445156,
    0.625,	0.6875, 0.009812237294690178,
    0.6875,	0.75,	0.01080133280919744,
    0.75,	0.8125,	0.011790428323704699,
    0.8125,	0.875,	0.012779523838211961,
    0.875,	0.9375,	0.013710907373463088,
    0.9375,	1.0,	0.014584578929458084,
    1.0,	1.125,	0.031790172526901146,
    1.125,	1.25,	0.0342620427630537,
    1.25,	1.375,	0.03571109701137884,
    1.375,	1.5,	0.03725497004050725,
    1.5,	1.675,	0.05492595769894863,
    1.675,	1.75,	0.024600041571568563,
    1.75,	1.875,	0.042470996749425144,
    1.875,	2.0,	0.04364888165303451,
    2.0,	2.25,	0.08848564032988822,
    2.25,	2.5,	0.08746327258323745,
    2.5,	2.75,	0.08226544894585297,
    2.75,	3.0,	0.07322770192771758,
    3.0,	3.25,	0.06285845595222407,
    3.25,	3.5,	0.05101935426294282,
    3.5,	3.75,	0.038080787649461115,
    3.75,	4.0,	0.025991647528913923,
    4.0,	4.5,	0.024891534326302752,
    4.5,	5.0,	0.00778427319564024,
    5.0,	5.5,	0.0037416460990595565,
    5.5,	6.0,	0.0025970785271238776,
    6.0,	6.5,	0.0021992877748121483,
    6.5,        7.0,	0.001907938302185849,
    7.0,	7.5,	0.0016754140434782155,
    7.5,	8.0,	0.0014670568549266187,
    8.0,	9.0,	0.002663608108531453,
    9.0,	10.0,	0.0023484909705061775,
    10.0,	11.0,	0.0020316802125716063,
    11.0,	12.0,	0.0018284531897471803,
    12.0,	13.0,	0.001515227152750712,
    13.0,	14.0,	0.0013332931012492184,
    14.0,	15.0,	0.0011305227400014838,
    15.0,	16.0,	0.000814670014534146,
    16.0,	18.0,	0.0011228668931355299,
    18.0,	20.0,	0.0007323357654980637,
    20.0,	22.0,	0.0005061904521708212,
    22.0,	24.0,	0.00036900414173661613,
    24.0,	26.0,	0.00031595150721968907,
    26.0,	28.0,	0.0002078178107456328,
    28.0,	30.0,	0.00015267618966929812,
    30.0,	32.0,	0.00011551311317866273,
    32.0,	36.0,	0.00014425222782976594,
    36.0,	40.0,	0.00007788375890669317,
    40.0,	44.0,	0.00009511022557287958,
    44.0,	48.0,	0.00001946114999093325,
    48.0,	52.0,	0.000011623247055257786,
    52.0,	56.0,	0.000008325302790221006,
    56.0,	60.0,	0.0000037980739304323178,
    60.0,	68.0,	0.0000041427398514044845};

        
        
    
//  flux at CCFR
double numu_flux_CCFR[162] = {
    0.0,	10.0,	0.000037775962788312634,
    10.0,	20.0,	0.02458920053986933,
    20.0,	30.0,	0.045881338366761774,
    30.0,	40.0,	0.06294566208378195,
    40.0,	50.0,	0.08031171546587008,
    50.0,	60.0,	0.08916206237236166,
    60.0,	70.0,	0.0926002104221988,
    70.0,	80.0,	0.09196515875767519,
    80.0,	90.0,	0.08780048241670889,
    90.0,	100.0,	0.0791942824715018,
    100.0,	110.0,	0.0663909968797867,
    110.0,	120.0,	0.05247498389825363,
    120.0,	130.0,	0.03749875252043434,
    130.0,	140.0,	0.026572702661156588,
    140.0,	150.0,	0.01936118028051229,
    150.0,	160.0,	0.014363352640400317,
    160.0,	170.0,	0.011400646027288307,
    170.0,	180.0,	0.009422886598273117,
    180.0,	190.0,	0.008327433151667812,
    190.0,	200.0,	0.007427815738578398,
    200.0,	210.0,	0.00673322149772076,
    210.0,	220.0,	0.006622979888122211,
    220.0,	230.0,	0.007116300917840607,
    230.0,	240.0,	0.007561192812130129,
    240.0,	250.0,	0.007961951435918133,
    250.0,	260.0,	0.007912541008804811,
    260.0,	270.0,	0.007369270125380283,
    270.0,	280.0,	0.006659363730835975,
    280.0,	290.0,	0.005759760209025636,
    290.0,	300.0,	0.0048661352688074595,
    300.0,	310.0,	0.003974041345155108,
    310.0,	320.0,	0.003247487351897969,
    320.0,	330.0,	0.002673475530266109,
    330.0,	340.0,	0.0022025228976508466,
    340.0,	350.0,	0.0018350608646777167,
    350.0,	360.0,	0.0015494848227251424,
    360.0,	370.0,	0.0013430977923676066,
    370.0,	380.0,	0.0011515151567521881,
    380.0,	390.0,	0.0009736619396604278,
    390.0,	400.0,	0.0008261018485383254,
    400.0,	410.0,	0.0007104143914044875,
    410.0,	420.0,	0.0006052942572998031,
    420.0,	430.0,	0.0005094905100473813,
    430.0,	440.0,	0.0004258270249614714,
    440.0,	450.0,	0.00035378840012588225,
    450.0,	460.0,	0.0002963134108985226,
    460.0,	470.0,	0.0002554321028758032,
    470.0,	480.0,	0.00021643619426781096,
    480.0,	490.0,	0.00017883719829326234,
    490.0,	500.0,	0.00014275731450908731,
    500.0,	510.0,	0.00010810647997151652,
    510.0,	520.0,	0.00007480143831081152,
    520.0,	530.0,	0.00004276527749746225,
    530.0,	540.0,	0.000012089438571004829};
    
double numu_flux_BNB_MiniBooNE[600] = {
    0.0,	0.05,	0.004379336931380108,
    0.05,	0.1,	0.01651117964533539,
    0.1,	0.15,	0.021434078643022353,
    0.15,	0.2,	0.02573245952197379,
    0.2,	0.25,	0.03195836545875095,
    0.25,	0.3,	0.035080956052428676,
    0.3,	0.35,	0.03750963762528912,
    0.35,	0.4,	0.039417887432536665,
    0.4,	0.45,	0.04165381649961448,
    0.45,	0.5,	0.04319583654587509,
    0.5,	0.55,	0.04392829606784892,
    0.55,	0.6,	0.04417887432536618,
    0.6,	0.65,	0.043851195065535885,
    0.65,	0.7,	0.043427139552814124,
    0.7,	0.75,	0.04267540478026218,
    0.75,	0.8,	0.04155744024672325,
    0.8,	0.85,	0.04005397070161907,
    0.85,	0.9,	0.03839629915188901,
    0.9,	0.95,	0.03650732459521969,
    0.95,	1.0,	0.034483423284502726,
    1.0,	1.05,	0.032324595219737885,
    1.05,	1.1,	0.030030840400925237,
    1.1,	1.15,	0.027737085582112467,
    1.15,	1.2,	0.025404780262143427,
    1.2,	1.25,	0.02299537393986124,
    1.25,	1.3,	0.020605242868157306,
    1.3,	1.35,	0.01831727062451813,
    1.35,	1.4,	0.016106399383191923,
    1.4,	1.45,	0.014028527370855835,
    1.45,	1.5,	0.01212798766383964,
    1.5,	1.55,	0.010400925212027765,
    1.55,	1.6,	0.008868542791056292,
    1.6,	1.65,	0.0075212027756360565,
    1.65,	1.7,	0.006331919814957601,
    1.7,	1.75,	0.00531996915959908,
    1.75,	1.8,	0.004456437933693141,
    1.8,	1.85,	0.0037239784117193554,
    1.85,	1.9,	0.003114880493446404,
    1.9,	1.95,	0.0026117964533538957,
    1.95,	2.0,	0.0021935235158057073,
    2.0,	2.05,	0.0018483037779491068,
    2.05,	2.1,	0.0015709329221279963,
    2.1,	2.15,	0.0013353893600616762,
    2.15,	2.2,	0.0011443716268311548,
    2.2,	2.25,	0.000992097147262911,
    2.25,	2.3,	0.0008631457208943687,
    2.3,	2.35,	0.0007584811102544375,
    2.35,	2.4,	0.0006746337702390108,
    2.4,	2.45,	0.0006071703932151151,
    2.45,	2.5,	0.0005526214340786411,
    2.5,	2.55,	0.0005040478026214323,
    2.55,	2.6,	0.0004643407864302261,
    2.6,	2.65,	0.00043812644564379183,
    2.65,	2.7,	0.00040670778720123575,
    2.7,	2.75,	0.00038454124903623615,
    2.75,	2.8,	0.00037008481110254306,
    2.8,	2.85,	0.00034984579799537583,
    2.85,	2.9,	0.0003326908249807235,
    2.9,	2.95,	0.00032093292212798943,
    2.95,	3.0,	0.0003085967617579017,
    3.0,	3.05,	0.00029953739398612075,
    3.05,	3.1,	0.0002877794911333863,
    3.1,	3.15,	0.0002779491133384725,
    3.15,	3.2,	0.00027216653816499755,
    3.2,	3.25,	0.000262721665381649,
    3.25,	3.3,	0.00025501156515034604,
    3.3,	3.35,	0.00024383191981495884,
    3.35,	3.4,	0.00023457979953739314,
    3.4,	3.45,	0.00022802621434078765,
    3.45,	3.5,	0.00021973785659213488,
    3.5,	3.55,	0.00021241326137239706,
    3.55,	3.6,	0.00020431765612953076,
    3.6,	3.65,	0.00019545104086353055,
    3.65,	3.7,	0.00018696993060909891,
    3.7,	3.75,	0.00018003084040092455,
    3.75,	3.8,	0.0001734965304548953,
    3.8,	3.85,	0.0001665574402467241,
    3.85,	3.9,	0.00015786430223592847,
    3.9,	3.95,	0.0001516383962991527,
    3.95,	4.0,	0.0001438704703161136,
    4.0,	4.05,	0.00013774094063222773,
    4.05,	4.1,	0.00013130300693908975,
    4.1,	4.15,	0.00012526985350809738,
    4.15,	4.2,	0.00011921742482652232,
    4.2,	4.25,	0.0001129144178874321,
    4.25,	4.3,	0.00010821125674633731,
    4.3,	4.35,	0.00010254433307632963,
    4.35,	4.4,	9.668465690054108e-05,
    4.4,	4.45,	9.184656900539672e-05,
    4.45,	4.5,	8.791441788743223e-05,
    4.5,	4.55,	8.251734772552015e-05,
    4.55,	4.6,	7.877794911333818e-05,
    4.6,	4.65,	7.403623747108817e-05,
    4.65,	4.7,	7.000771010023104e-05,
    4.7,	4.75,	6.615265998457956e-05,
    4.75,	4.8,	6.289514263685406e-05,
    4.8,	4.85,	5.8134155744024464e-05,
    4.85,	4.9,	5.5069390902082504e-05,
    4.9,	4.95,	5.1831148804934275e-05,
    4.95,	5.0,	4.874710871241309e-05,
    5.0,	5.05,	4.572089437162666e-05,
    5.05,	5.1,	4.2925983037779345e-05,
    5.1,	5.15,	4.0535851966076135e-05,
    5.15,	5.2,	3.772166538164982e-05,
    5.2,	5.25,	3.535080956052416e-05,
    5.25,	5.3,	3.334618350038539e-05,
    5.3,	5.35,	3.1129529683885775e-05,
    5.35,	5.4,	2.9163454124904038e-05,
    5.4,	5.45,	2.7101002313029976e-05,
    5.45,	5.5,	2.5115651503469455e-05,
    5.5,	5.55,	2.3400154202004545e-05,
    5.55,	5.6,	2.1761757902852657e-05,
    5.6,	5.65,	2.0181187355435906e-05,
    5.65,	5.7,	1.8444487278334556e-05,
    5.7,	5.75,	1.7097147262914356e-05,
    5.75,	5.8,	1.570547417116417e-05,
    5.8,	5.85,	1.4319583654587459e-05,
    5.85,	5.9,	1.3039707016191396e-05,
    5.9,	5.95,	1.1752120277563568e-05,
    5.95,	6.0,	1.058596761757899e-05,
    6.0,	6.05,	9.593292212798732e-06,
    6.05,	6.1,	8.567848882035436e-06,
    6.1,	6.15,	7.646491904394866e-06,
    6.15,	6.2,	6.730917501927501e-06,
    6.2,	6.25,	5.853893600616787e-06,
    6.25,	6.3,	5.001927525057808e-06,
    6.3,	6.35,	4.2887432536622826e-06,
    6.35,	6.4,	3.573631457208995e-06,
    6.4,	6.45,	2.9626060138781706e-06,
    6.45,	6.5,	2.351580570547409e-06,
    6.5,	6.55,	1.8851195065535782e-06,
    6.55,	6.6,	1.5115651503469494e-06,
    6.6,	6.65,	1.1946800308404178e-06,
    6.65,	6.7,	9.225134926754015e-07,
    6.7,	6.75,	6.426368542791034e-07,
    6.75,	6.8,	3.7991518889745427e-07,
    6.8,	6.85,	1.8101387818041565e-07,
    6.85,	6.9,	5.277563608326983e-08,
    6.9,	6.95,	1.169043947571314e-08,
    6.95,	7.0,	7.970316114109456e-09,
    7.0,	7.05,	3.725905936777165e-09,
    7.05,	7.1,	1.9059367771780968e-09,
    7.1,	7.15,	8.662297609869051e-11,
    7.15,	7.2,	0.0,
    7.2,	7.25,	0.0,
    7.25,	7.3,	0.0,
    7.3,	7.35,	0.0,
    7.35,	7.4,	0.0,
    7.4,	7.45,	0.0,
    7.45,	7.5,	0.0,
    7.5,	7.55,	0.0,
    7.55,	7.6,	0.0,
    7.6,	7.65,	0.0,
    7.65,	7.7,	0.0,
    7.7,	7.75,	0.0,
    7.75,	7.8,	0.0,
    7.8,	7.85,	0.0,
    7.85,	7.9,	0.0,
    7.9,	7.95,	0.0,
    7.95,	8.0,	0.0,
    8.0,	8.05,	0.0,
    8.05,	8.1,	0.0,
    8.1,	8.15,	0.0,
    8.15,	8.2,	0.0,
    8.2,	8.25,	0.0,
    8.25,	8.3,	0.0,
    8.3,	8.35,	0.0,
    8.35,	8.4,	0.0,
    8.4,	8.45,	0.0,
    8.45,	8.5,	0.0,
    8.5,	8.55,	0.0,
    8.55,	8.6,	0.0,
    8.6,	8.65,	0.0,
    8.65,	8.7,	0.0,
    8.7,	8.75,	0.0,
    8.75,	8.8,	0.0,
    8.8,	8.85,	0.0,
    8.85,	8.9,	0.0,
    8.9,	8.95,	0.0,
    8.95,	9.0,	0.0,
    9.0,	9.05,	0.0,
    9.05,	9.1,	0.0,
    9.1,	9.15,	0.0,
    9.15,	9.2,	0.0,
    9.2,	9.25,	0.0,
    9.25,	9.3,	0.0,
    9.3,	9.35,	0.0,
    9.35,	9.4,	0.0,
    9.4,	9.45,	0.0,
    9.45,	9.5,	0.0,
    9.5,	9.55,	0.0,
    9.55,	9.6,	0.0,
    9.6,	9.65,	0.0,
    9.65,	9.7,	0.0,
    9.7,	9.75,	0.0,
    9.75,	9.8,	0.0,
    9.8,	9.85,	0.0,
    9.85,	9.9,	0.0,
    9.9,	9.95,	0.0,
    9.95,	10.0,	0.0};
    
double numu_flux_BNB_SBND[600] {
<<<<<<< HEAD
    0.0,	0.05,	0.007263157894736844,
    0.05,	0.1,	0.020773993808049538,
    0.1,	0.15,	0.022718266253869968,
    0.15,	0.2,	0.025851393188854495,
    0.2,	0.25,	0.03367801857585139,
    0.25,	0.3,	0.03671207430340556,
    0.3,	0.35,	0.040055727554179556,
    0.35,	0.4,	0.04356656346749229,
    0.4,	0.45,	0.046798761609907105,
    0.45,	0.5,	0.048990712074303396,
    0.5,	0.55,	0.05033436532507744,
    0.55,	0.6,	0.05124458204334358,
    0.6,	0.65,	0.05097832817337466,
    0.65,	0.7,	0.0497337461300309,
    0.7,	0.75,	0.04787616099071212,
    0.75,	0.8,	0.04562848297213626,
    0.8,	0.85,	0.04272445820433431,
    0.85,	0.9,	0.039572755417956684,
    0.9,	0.95,	0.036278637770897786,
    0.95,	1.0,	0.03299690402476783,
    1.0,	1.05,	0.029473684210526343,
    1.05,	1.1,	0.02608049535603717,
    1.1,	1.15,	0.022941176470588156,
    1.15,	1.2,	0.020136222910216738,
    1.2,	1.25,	0.017269349845201253,
    1.25,	1.3,	0.014978328173374626,
    1.3,	1.35,	0.012848297213622302,
    1.35,	1.4,	0.010959752321981386,
    1.4,	1.45,	0.009368421052631588,
    1.45,	1.5,	0.007969040247678024,
    1.5,	1.55,	0.006724458204334372,
    1.55,	1.6,	0.0057114551083591375,
    1.6,	1.65,	0.004841486068111437,
    1.65,	1.7,	0.0040445820433436565,
    1.7,	1.75,	0.003443343653250777,
    1.75,	1.8,	0.0029374613003096,
    1.8,	1.85,	0.0024978328173374626,
    1.85,	1.9,	0.002133126934984512,
    1.9,	1.95,	0.0018222910216718281,
    1.95,	2.0,	0.001572136222910218,
    2.0,	2.05,	0.0013609907120742985,
    2.05,	2.1,	0.001182043343653257,
    2.1,	2.15,	0.0010365325077399345,
    2.15,	2.2,	0.0009195046439628531,
    2.2,	2.25,	0.0008247678018575824,
    2.25,	2.3,	0.0007232198142414835,
    2.3,	2.35,	0.0006606811145510871,
    2.35,	2.4,	0.0005803715170278618,
    2.4,	2.45,	0.0005684829721362259,
    2.45,	2.5,	0.0004977089783281715,
    2.5,	2.55,	0.00047157894736841945,
    2.55,	2.6,	0.0004351083591331292,
    2.6,	2.65,	0.0004251393188854474,
    2.65,	2.7,	0.00037727554179566773,
    2.7,	2.75,	0.00038452012383900796,
    2.75,	2.8,	0.0003544272445820421,
    2.8,	2.85,	0.00034030959752322167,
    2.85,	2.9,	0.00033566563467492147,
    2.9,	2.95,	0.00031931888544891815,
    2.95,	3.0,	0.0003045201238390082,
    3.0,	3.05,	0.0003043962848297203,
    3.05,	3.1,	0.0002822910216718281,
    3.1,	3.15,	0.00027739938080495257,
    3.15,	3.2,	0.00026613003095975375,
    3.2,	3.25,	0.00025777089783281644,
    3.25,	3.3,	0.00025659442724458115,
    3.3,	3.35,	0.00024006191950464527,
    3.35,	3.4,	0.00022724458204334287,
    3.4,	3.45,	0.0002274922600619207,
    3.45,	3.5,	0.00021170278637770818,
    3.5,	3.55,	0.00020390092879256895,
    3.55,	3.6,	0.00019498452012384004,
    3.6,	3.65,	0.00018823529411764642,
    3.65,	3.7,	0.00017715170278637866,
    3.7,	3.75,	0.00017430340557275482,
    3.75,	3.8,	0.0001688544891640861,
    3.8,	3.85,	0.0001554179566563476,
    3.85,	3.9,	0.00016253869969040188,
    3.9,	3.95,	0.00014198142414860757,
    3.95,	4.0,	0.00013981424148606762,
    4.0,	4.05,	0.0001299071207430336,
    4.05,	4.1,	0.00012185758513931845,
    4.1,	4.15,	0.00011195046439628641,
    4.15,	4.2,	0.00010817337461300271,
    4.2,	4.25,	0.00010191950464396248,
    4.25,	4.3,	0.00010148606811145475,
    4.3,	4.35,	9.077399380804922e-05,
    4.35,	4.4,	8.8792569659444e-05,
    4.4,	4.45,	8.154798761609879e-05,
    4.45,	4.5,	7.758513931888516e-05,
    4.5,	4.55,	7.47368421052629e-05,
    4.55,	4.6,	6.699690402476757e-05,
    4.6,	4.65,	6.786377708978424e-05,
    4.65,	4.7,	6.0749226006191745e-05,
    4.7,	4.75,	5.744272445820414e-05,
    4.75,	4.8,	5.5461300309597336e-05,
    4.8,	4.85,	4.8941176470588066e-05,
    4.85,	4.9,	4.487925696594491e-05,
    4.9,	4.95,	4.251393188854474e-05,
    4.95,	5.0,	4.3461300309597376e-05,
    5.0,	5.05,	3.6470588235293986e-05,
    5.05,	5.1,	3.665634674922587e-05,
    5.1,	5.15,	3.27863777089788e-05,
    5.15,	5.2,	2.8247678018575755e-05,
    5.2,	5.25,	2.8154798761609805e-05,
    5.25,	5.3,	2.730650154798752e-05,
    5.3,	5.35,	2.569659442724449e-05,
    5.35,	5.4,	2.456346749226041e-05,
    5.4,	5.45,	2.1448916408668658e-05,
    5.45,	5.5,	1.9275541795665567e-05,
    5.5,	5.55,	1.8613003095975166e-05,
    5.55,	5.6,	1.549226006191945e-05,
    5.6,	5.65,	1.4736842105263369e-05,
    5.65,	5.7,	1.370278637770893e-05,
    5.7,	5.75,	1.1244582043343613e-05,
    5.75,	5.8,	1.1808049535603675e-05,
    5.8,	5.85,	1.2848297213622245e-05,
    5.85,	5.9,	1.0489164086687457e-05,
    5.9,	5.95,	7.746130030959726e-06,
    5.95,	6.0,	6.897832817337436e-06,
    6.0,	6.05,	6.6130030959752085e-06,
    6.05,	6.1,	6.427244582043322e-06,
    6.1,	6.15,	5.2910216718267e-06,
    6.15,	6.2,	4.346130030959736e-06,
    6.2,	6.25,	5.007430340557258e-06,
    6.25,	6.3,	3.779566563467479e-06,
    6.3,	6.35,	2.834674922600609e-06,
    6.35,	6.4,	2.9287925696594845e-06,
    6.4,	6.45,	3.1176470588235183e-06,
    6.45,	6.5,	1.8897832817337394e-06,
    6.5,	6.55,	1.0390092879256931e-06,
    6.55,	6.6,	8.501547987616069e-07,
    6.6,	6.65,	7.560371517027971e-07,
    6.65,	6.7,	6.613003095975208e-07,
    6.7,	6.75,	5.66873065015478e-07,
    6.75,	6.8,	3.779566563467479e-07,
    6.8,	6.85,	9.448916408668697e-08,
    6.85,	6.9,	0.0,
    6.9,	6.95,	0.0,
    6.95,	7.0,	0.0,
    7.0,	7.05,	0.0,
    7.05,	7.1,	0.0,
    7.1,	7.15,	0.0,
    7.15,	7.2,	0.0,
    7.2,	7.25,	0.0,
    7.25,	7.3,	0.0,
    7.3,	7.35,	0.0,
    7.35,	7.4,	0.0,
    7.4,	7.45,	0.0,
    7.45,	7.5,	0.0,
    7.5,	7.55,	0.0,
    7.55,	7.6,	0.0,
    7.6,	7.65,	0.0,
    7.65,	7.7,	0.0,
    7.7,	7.75,	0.0,
    7.75,	7.8,	0.0,
    7.8,	7.85,	0.0,
    7.85,	7.9,	0.0,
    7.9,	7.95,	0.0,
    7.95,	8.0,	0.0,
    8.0,	8.05,	0.0,
    8.05,	8.1,	0.0,
    8.1,	8.15,	0.0,
    8.15,	8.2,	0.0,
    8.2,	8.25,	0.0,
    8.25,	8.3,	0.0,
    8.3,	8.35,	0.0,
    8.35,	8.4,	0.0,
    8.4,	8.45,	0.0,
    8.45,	8.5,	0.0,
    8.5,	8.55,	0.0,
    8.55,	8.6,	0.0,
    8.6,	8.65,	0.0,
    8.65,	8.7,	0.0,
    8.7,	8.75,	0.0,
    8.75,	8.8,	0.0,
    8.8,	8.85,	0.0,
    8.85,	8.9,	0.0,
    8.9,	8.95,	0.0,
    8.95,	9.0,	0.0,
    9.0,	9.05,	0.0,
    9.05,	9.1,	0.0,
    9.1,	9.15,	0.0,
    9.15,	9.2,	0.0,
    9.2,	9.25,	0.0,
    9.25,	9.3,	0.0,
    9.3,	9.35,	0.0,
    9.35,	9.4,	0.0,
    9.4,	9.45,	0.0,
    9.45,	9.5,	0.0,
    9.5,	9.55,	0.0,
    9.55,	9.6,	0.0,
    9.6,	9.65,	0.0,
    9.65,	9.7,	0.0,
    9.7,	9.75,	0.0,
    9.75,	9.8,	0.0,
    9.8,	9.85,	0.0,
    9.85,	9.9,	0.0,
    9.9,	9.95,	0.0,
    9.95,	10.0,	0.0};
        
//***************************************************
    bool is_nan(double x) { return x != x; }  
//***************************************************

//***************************************************
    std::random_device entropySource;
    std::mt19937 generator(entropySource());
    std::uniform_real_distribution<double> realdistribution(0.0,1.0);
//***************************************************

//*******************************************************
// Interpolation functions for the form factor grids
//*******************************************************

double Interpolation(double x, int r){

    double x1, y1, x2, y2, slope, interp;

    for (int i = 0; i < r-1; i++){
        if (InterpolationList[i][0] < x && x < InterpolationList[i+1][0]){
            // Set the x and y values of the two points
            x1 = InterpolationList[i][0];
            x2 = InterpolationList[i+1][0];
            y1 = InterpolationList[i][1];
            y2 = InterpolationList[i+1][1];
        }
    }
    
    // Calculate the slope of the line between the two points
    slope = (y2-y1)/(x2-x1);
    // Calculate the y value for the given x value
    interp = slope*(x-x1)+y1;

    return interp;
}

double InverseInterpolation(double y, int r){

    double x1, y1, x2, y2, slope, invinterp;

    for (int i = 0; i < r-1; i++){
        if (InterpolationList[i][1] > y && y > InterpolationList[i+1][1]){
            // Set the x and y values of the two points
            x1 = InterpolationList[i][0];
            x2 = InterpolationList[i+1][0];
            y1 = InterpolationList[i][1];
            y2 = InterpolationList[i+1][1];
        }
    }
    							    
    // Calculate the slope of the line between the two points
    slope = (x2-x1)/(y2-y1);   
    // Calculate the y value for the given x value
    invinterp = slope*(y-y1)+x1;

    return invinterp;
}



//***********************************************
// proton and neutron form factors
//***********************************************

// dipole form factor
double GD(double q2){double ff;
  
  ff = 1/(1+q2/0.71)/(1+q2/0.71);
  
  return ff;}

  
// magnetic form factor of the proton (from 0812.3539)
double GMp(double q2){double ff;
  
  ff = mup*(1+apM1*q2/4/Mproton/Mproton)/(1+bpM1*q2/4/Mproton/Mproton
             +bpM2*q2*q2/4/4/Mproton/Mproton/Mproton/Mproton
	     +bpM3*q2*q2*q2/4/4/4/Mproton/Mproton/Mproton/Mproton/Mproton/Mproton);
  
  return ff;}

  
// electric form factor of the proton (from 0812.3539)
double GEp(double q2){double ff;
  
  ff = (1+apE1*q2/4/Mproton/Mproton)/(1+bpE1*q2/4/Mproton/Mproton
             +bpE2*q2*q2/4/4/Mproton/Mproton/Mproton/Mproton
	     +bpE3*q2*q2*q2/4/4/4/Mproton/Mproton/Mproton/Mproton/Mproton/Mproton);
  
  return ff;}
  
  
// magnetic form factor of the neutron (from 0812.3539)
double GMn(double q2){double ff;
  
  ff = mun*(1+anM1*q2/4/Mneutron/Mneutron)/(1+bnM1*q2/4/Mneutron/Mneutron
             +bnM2*q2*q2/4/4/Mneutron/Mneutron/Mneutron/Mneutron
	     +bnM3*q2*q2*q2/4/4/4/Mneutron/Mneutron/Mneutron/Mneutron/Mneutron/Mneutron);
  
  return ff;}
  
  
// electric form factor of the neutron (from 0812.3539)
double GEn(double q2){double ff;
  
  ff = ffA*q2/4/Mneutron/Mneutron/(1+ffB*q2/4/Mneutron/Mneutron)*GD(q2);
  
  return ff;}


  
//***********************************************
// Pauli blocking factor for nucleons scattering inside the nucleus (from Lovseth/Radomski)
//***********************************************

double Pauli(double p){double blockingfactor;
  
  if (p > 2*0.235){blockingfactor = 1;}
  else {blockingfactor = 1.5*p/2/0.235 - 0.5*p*p*p/8/0.235/0.235/0.235;}
  
  return blockingfactor;}
  

//***********************************************
// define the trident processes
//***********************************************

void SetTridentProcess(){

     if(process == 1){ // nu_e -> nu_e e+ e-
         m3 = me; m4 = me;
         GVSM = 0.5 + 2*sW2; GASM = -0.5;
	     anti = 0;
         PDG1 = 12; PDG2 = 12; PDG3 = -11; PDG4 = 11;}
    
    else if(process == 2){ // nu_e -> nu_e mu+ mu-
         m3 = mmu; m4 = mmu;
         GVSM = -0.5 + 2*sW2; GASM = 0.5;
	     anti = 0;
         PDG1 = 12; PDG2 = 12; PDG3 = -13; PDG4 = 13;}
         
    else if(process == 3){ // nu_e -> nu_mu mu+ e-
         m3 = mmu; m4 = me; 
         GVSM = 1.0; GASM = -1.0;
         anti = 0; 
         PDG1 = 12; PDG2 = 14; PDG3 = -13; PDG4 = 11;}
         
    else if(process == 4){ // anti-nu_e -> anti-nu_e e+ e-
         m3 = me; m4 = me; 
         GVSM = 0.5 + 2*sW2; GASM = -0.5;
         anti = 1;
         PDG1 = -12; PDG2 = -12; PDG3 = -11; PDG4 = 11;}
         
    else if(process == 5){ // anti-nu_e -> anti-nu_e mu+ mu-
         m3 = mmu; m4 = mmu; 
         GVSM = -0.5 + 2*sW2; GASM = 0.5;
         anti = 1;
         PDG1 = -12; PDG2 = -12; PDG3 = -13; PDG4 = 13;}
    
    else if(process == 6){ // anti-nu_e -> anti-nu_mu e+ mu-
         m3 = me; m4 = mmu; 
         GVSM = 1.0; GASM = -1.0;
         anti = 1;
         PDG1 = -12; PDG2 = -14; PDG3 = -11; PDG4 = 13;}
    
    else if(process == 7){ // nu_mu -> nu_mu e+ e-
         m3 = me; m4 = me;
         GVSM = -0.5 + 2*sW2; GASM = 0.5;
	     anti = 0;
         PDG1 = 14; PDG2 = 14; PDG3 = -11; PDG4 = 11;}
         
    else if(process == 8){ // nu_mu -> nu_mu mu+ mu-
         m3 = mmu; m4 = mmu;
         GVSM = 0.5 + 2*sW2; GASM = -0.5;
         anti = 0;  
         PDG1 = 14; PDG2 = 14; PDG3 = -13; PDG4 = 13;}
         
    else if(process == 9){ // nu_mu -> nu_e e+ mu-
         m3 = me; m4 = mmu; 
         GVSM = 1.0; GASM = -1.0;
         anti = 0;
         PDG1 = 14; PDG2 = 12; PDG3 = -11; PDG4 = 13;}
         
    else if(process == 10){ // anti-nu_mu -> anti-nu_mu e+ e-
         m3 = me; m4 = me; 
         GVSM = -0.5 + 2*sW2; GASM = 0.5;
         anti = 1;  
         PDG1 = -14; PDG2 = -14; PDG3 = -11; PDG4 = 11;}

    else if(process == 11){ // anti-nu_mu -> anti-nu_mu mu+ mu-
         m3 = mmu; m4 = mmu; 
         GVSM = 0.5 + 2*sW2; GASM = -0.5;
         anti = 1;
         PDG1 = -14; PDG2 = -14; PDG3 = -13; PDG4 = 13;}

    else if(process == 12){ // anti-nu_mu -> anti-nu_e mu+ e-
         m3 = mmu; m4 = me; 
         GVSM = 1.0; GASM = -1.0; 
         anti = 1;
         PDG1 = -14; PDG2 = -12; PDG3 = -13; PDG4 = 11;}

     else if(process == 13){ // nu_mu -> nu_mu tau+ tau-
         m3 = mtau; m4 = mtau;
	 GVSM = -0.5 + 2*sW2; GASM = 0.5;
	 anti = 0;
         PDG1 = 14; PDG2 = 14; PDG3 = -15; PDG4 = 15;}
 
     else if(process == 14){ // nu_mu -> nu_tau tau+ mu-
         m3 = mtau; m4 = mmu;
	 GVSM = 1.0; GASM = -1.0;
	 anti = 0;
         PDG1 = 14; PDG2 = 16; PDG3 = -15; PDG4 = 13;}
  
     else if(process == 15){ // nu_e -> nu_tau tau+ e-
         m3 = mtau; m4 = me; 
         GVSM = 1.0; GASM = -1.0;
         anti = 0; 
         PDG1 = 12; PDG2 = 16; PDG3 = -15; PDG4 = 11;}

    return;
  
}


//***********************************************
// set the nuclear parameters
//***********************************************

void SetNuclearParameters(){
            
    if (material.compare("Ar") == 0){
        A = 40;
        Z = 18;
        M = MArgon;
	    M2 = M*M;
	    for (int jj = 0; jj < 192; jj++){
            for (int kk = 0; kk < 2; kk++){
             	if (FormFactor=="3pF")
            	{	InterpolationList[jj][kk] = InterpolationListAr3pF[jj][kk];}
            	else if (FormFactor=="H")
            	{	InterpolationList[jj][kk] = InterpolationListArH[jj][kk];}
            	else if (FormFactor=="KN")
            	{	InterpolationList[jj][kk] = InterpolationListArKN[jj][kk];}
            	else if (FormFactor=="adKN")
            	{	InterpolationList[jj][kk] = InterpolationListAradKN[jj][kk];}
	    }}}
           
    else if (material.compare("Fe") == 0){
        A = 56;
        Z = 26;
        M = MIron;
	    M2 = M*M;
	    for (int jj = 0; jj < 192; jj++){
            for (int kk = 0; kk < 2; kk++){
                InterpolationList[jj][kk] = InterpolationListFe[jj][kk];}}}

    else if (material.compare("W") == 0){
        A = 184;
	Z = 74;
	M = MTungsten;
	    M2 = M*M;
	    for (int jj = 0; jj < 192; jj++){
	    for (int kk = 0; kk < 2; kk++){
	        InterpolationList[jj][kk] = InterpolationListW[jj][kk];}}}

    else if (material.compare("proton") == 0){
        A = 1;
        Z = 1;
        M = Mproton;
	    M2 = M*M;
	    for (int jj = 0; jj < 192; jj++){
            for (int kk = 0; kk < 2; kk++){
                InterpolationList[jj][kk] = InterpolationListProton[jj][kk];}}}
            
    else if (material.compare("neutron") == 0){
        A = 1;
        Z = 1; // "charge" of the neutron is taken care by the form factor
        M = Mneutron;
	    M2 = M*M;
	    for (int jj = 0; jj < 192; jj++){
            for (int kk = 0; kk < 2; kk++){
                InterpolationList[jj][kk] = InterpolationListNeutron[jj][kk];}}}
            
    return;

}
    
    
//*******************************************************
// main program
//*******************************************************

int main(){
    
        // Define the trident process
        std::cout << "\n";
	    std::cout << "Select the trident process  [enter 1 - 15]\n\n";
	    std::cout << " [1] nu_e -> nu_e e+ e-                  [7] nu_mu -> nu_mu e+ e- \n";
	    std::cout << " [2] nu_e -> nu_e mu+ mu-                [8] nu_mu -> nu_mu mu+ mu- \n";
	    std::cout << " [3] nu_e -> nu_mu mu+ e-                [9] nu_mu -> nu_e e+ mu- \n";
	    std::cout << " [4] anti-nu_e -> anti-nu_e e+ e-        [10] anti-nu_mu -> anti-nu_mu e+ e- \n";
	    std::cout << " [5] anti-nu_e -> anti-nu_e mu+ mu-      [11] anti-nu_mu -> anti-nu_mu mu+ mu- \n";
	    std::cout << " [6] anti-nu_e -> anti-nu_mu e+ mu-      [12] anti-nu_mu -> anti-nu_e mu+ e- \n";
	    std::cout << " [13] nu_mu -> nu_mu tau+ tau-           [14] nu_mu -> nu_tau tau+ mu- \n";
	    std::cout << " [15] nu_e -> nu_tau tau+ e-\n\n";
        std::cin >> process;
	    if(process != 1 && process != 2 && process != 3 && process != 4 && process != 5 && 
	       process != 6 && process != 7 && process != 8 && process != 9 && process != 10 && 
	       process != 11 && process != 12 && process != 13 && process != 14 && process != 15){
        std::cout << "\n Invalid selection \n";
	    return 0;}
	   
	SetTridentProcess();
 	
 	
	// Define the target material
	    std::cout << "\n";
        std::cout << "Select the target material  [enter Ar, Fe, proton, neutron] \n\n";
	    std::cout << " [Ar] Argon      [Fe] Iron      [W] Tungsten \n\n";
	    std::cout << " [proton]  Proton inside an ideal Fermi gas  \n";  
	    std::cout << " [neutron] Neutron inside an ideal Fermi gas \n\n";
        std::cin >> material;
	    if(material.compare("Ar") != 0 && material.compare("Fe") != 0 && material.compare("W") != 0 &&
	       material.compare("proton") != 0 && material.compare("neutron") != 0 ){
	    std::cout << "\n Invalid selection \n";
	    return 0;}

	    std::cout << "Select the form factor \n";
	    std::cout << "[3pF] Altmannshofer   [H] Helm     [KN] Klein-Nystrand    [adKN] ad. Klein-Nystrand \n";
	    std::cout << "[HFSKE2] HFSKE2       [N2LO] N2LO  [RMF] RMF              [ShellModel] Shell Model \n\n";
	std::cin >> FormFactor;
	    if(FormFactor.compare("3pF") != 0 && FormFactor.compare("H") != 0 && FormFactor.compare("KN") != 0 && FormFactor.compare("adKN") != 0){
	    std::cout << "\n Invalid selection \n";
	    return 0;}

	SetNuclearParameters();
	
	
	// Define the incoming neutrino spectrum
	    std::cout << "\n";
        std::cout << "Are you using a fixed neutrino energy or an energy distribution? \n\n";
	    std::cout << "[1] fixed neutrino energy \n\n";
	    std::cout << "[2] nu_mu flux at DUNE near detector: 'Reference beam 80 GeV, 204m x 4m DP' from the CDR \n";
        std::cout << "[3] nu_mu flux at DUNE near detector: 'Optimized beam 80 GeV, 204m x 4m DP' from the CDR \n";
        std::cout << "[4] nu_mu flux at DUNE near detector: 'Optimized beam 120 GeV' for the TDR \n\n";
        std::cout << "[5] anti-nu_mu flux at DUNE near detector: 'Reference beam 80 GeV, 204m x 4m DP' from the CDR \n";
        std::cout << "[6] anti-nu_mu flux at DUNE near detector: 'Optimized beam 80 GeV, 204m x 4m DP' from the CDR \n";
        std::cout << "[7] anti-nu_mu flux at DUNE near detector: 'Optimized beam 120 GeV' for the TDR \n\n";
        std::cout << "[8] nu_mu flux at the CCFR experiment \n\n";
	std::cout << "[9] nu_mu BNB flux at MiniBooNE detector \n\n";
	std::cout << "[10] nu_mu BNB flux at SBND detector \n\n";
        std::cin >> energy_type;
	    if(energy_type.compare("1") != 0 && energy_type.compare("2") != 0 && energy_type.compare("3") != 0 && 
           energy_type.compare("4") != 0 && energy_type.compare("5") != 0 && energy_type.compare("6") != 0 && 
           energy_type.compare("7") != 0 && energy_type.compare("8") != 0 && energy_type.compare("9") != 0 &&
	   energy_type.compare("10") != 0 ){
	    std::cout << "\n Invalid selection \n";
	    return 0;}
        
        if(energy_type.compare("1") == 0){
	    Enu = 0.0;
	    std::cout << "\n";
        std::cout << "Enter the energy of the neutrino beam (in GeV) \n\n";
        std::cin >> Enu;}
	       
        if(energy_type.compare("2") == 0){
            std::vector<double> v(std::begin(numu_flux_80_ref), std::end(numu_flux_80_ref));
            distribution_list = v;
	        ReadDistribution();}
	        
        if(energy_type.compare("3") == 0){
            std::vector<double> v(std::begin(numu_flux_80_opt), std::end(numu_flux_80_opt));
            distribution_list = v;
	        ReadDistribution();}
	        
        if(energy_type.compare("4") == 0){
            std::vector<double> v(std::begin(numu_flux_120), std::end(numu_flux_120));
            distribution_list = v;
	        ReadDistribution();}
	        
        if(energy_type.compare("5") == 0){
            std::vector<double> v(std::begin(antinumu_flux_80_ref), std::end(antinumu_flux_80_ref));
            distribution_list = v;
	        ReadDistribution();}
	        
        if(energy_type.compare("6") == 0){
            std::vector<double> v(std::begin(antinumu_flux_80_opt), std::end(antinumu_flux_80_opt));
            distribution_list = v;
	        ReadDistribution();}
	        
        if(energy_type.compare("7") == 0){
            std::vector<double> v(std::begin(antinumu_flux_120), std::end(antinumu_flux_120));
            distribution_list = v;
	        ReadDistribution();}
	        
        if(energy_type.compare("8") == 0){
            std::vector<double> v(std::begin(numu_flux_CCFR), std::end(numu_flux_CCFR));
            distribution_list = v;
	        ReadDistribution();}
 
	if(energy_type.compare("9") == 0){
            std::vector<double> v(std::begin(numu_flux_BNB_MiniBooNE), std::end(numu_flux_BNB_MiniBooNE));
            distribution_list = v;
	        ReadDistribution();}
       	
	if(energy_type.compare("10") == 0){
            std::vector<double> v(std::begin(numu_flux_BNB_SBND), std::end(numu_flux_BNB_SBND));
            distribution_list = v;
	        ReadDistribution();}

        
        // Define the particle physics model
        std::cout << "\n";
        std::cout << "Select the model \n\n";
	    std::cout << "[4F]      Model independent 4 Fermi operators \n";
	    std::cout << "[SM]      Standard Model \n";
	    std::cout << "[LmuLtau] Standard Model + Z' gauge boson based on L_mu - L_tau \n\n";
        std::cin >> model;
    	if(model.compare("SM") != 0 && model.compare("4F") != 0 && model.compare("LmuLtau") != 0 ){
	    std::cout << "\n Invalid selection \n";
	    return 0;}
	   	
        if(model.compare("SM") == 0){
        GAtot=0.0; GVtot=0.0; GP=0.0; MZP=1000.0;}
	
	    if(model.compare("4F") == 0){
        GP=0.0; MZP=1000.0;
	    std::cout << "\n";
        std::cout << "Enter the value of the vector coupling g_V \n\n";
        std::cin >> GVtot; 
	    std::cout << "\n";
        std::cout << "Enter the value of the axial-vector coupling g_A \n\n";
        std::cin >> GAtot;}
        
        if(model.compare("LmuLtau") == 0){
	    GAtot=0.0; GVtot=0.0;
        std::cout << "\n";
        std::cout << "Enter the value of the L_mu - L_tau gauge coupling g' \n\n";
        std::cin >> GP; 
	    std::cout << "\n";
        std::cout << "Enter the value of the Z' mass (in GeV) \n\n";
        std::cin >> MZP;}
        
        
        // Cross section or event generation
        std::cout << "\n";
        std::cout << "You can compute the trident [CrossSection] or [CrossSectionOverRange] or [GenerateEvents] or [Q2Distribution] \n\n";
        std::cin >> command;
	    if(command.compare("CrossSection") != 0 && command.compare("CrossSectionOverRange") != 0 && 
	       command.compare("GenerateEvents") != 0 && command.compare("Q2Distribution") != 0 ){
	    std::cout << "\n Invalid selection \n";
	    return 0;}
	   
        if(command.compare("GenerateEvents") == 0){
	    std::cout << "\n";
        std::cout << "Enter the number of events to be generated \n\n";
        std::cin >> Nevents; 
	    data_output = new double[20*Nevents];
	    std::cout << "\n";
        std::cout << "Enter the name of the output file \n\n";
        std::cin >> filename_out;}
        
        
	if(command.compare("CrossSectionOverRange") == 0){
	    std::cout << "\n";
	std::cout << "Enter energy range start \n\n";
	std::cin >> ERange_start;
	    std::cout << "\n";
	std::cout << "Enter energy range end \n\n";
	std::cin >> ERange_end;
	    std::cout << "\n";
	std::cout << "Enter the number of xsec to be calculated \n\n";
	std::cin >> nXsec;
	    std::cout << "\n";
	std::cout << "Enter the name of the output file \n\n";
	std::cin >> xsec_file_out;
	    std::cout << "\n";}


	// Compute cross section
        if(command.compare("CrossSection") == 0){
	std::cout << "\n";
	std::cout << "Do you wish to generate the Q2 distribution? [y/n] \n\n";
	std::cin >> q2flag;
	if (q2flag == "y"){
	    std::cout << "\n\n";
	    std::cout << "Enter the name of the output file \n\n";
	    std::cin >> q2distribution_file_out;
	}
	    ComputeCrossSection();
	if (q2flag == "y"){
	    WriteQ2DistributionFile(q2distribution_file_out.c_str());
	}
        std::cout << "\n\n";
	    std::cout << "The trident cross section is  ( " << crosssectionresult << " +- " << deltacrosssectionresult << " ) fb  \n";
        std::cout << "(uncertainty is the statistical uncertainty of the numerical phase space integration) \n\n";}

	if(command.compare("CrossSectionOverRange") == 0){
	    ComputeCrossSection(ERange_start, ERange_end, nXsec);
	    WriteXSecFile(xsec_file_out.c_str());
	    std::cout << "\n\n";
	    std::cout << "Generated " << nXsec << " trident cross sections for the energy range (" << ERange_start << ", " << ERange_end << ") GeV \n";
	    std::cout << "File was generated and saved as " << xsec_file_out;}

	// Compute Q2 distribution
	if(command.compare("Q2Distribution") == 0){
	q2flag = "y";
	std::cout << "\n";
	std::cout << "Enter the name of the output file \n\n";
	std::cin >> q2distribution_file_out;
	    ComputeQ2Distribution();
	    WriteQ2DistributionFile(q2distribution_file_out.c_str());
	}
        
        // Generate Events
        if(command.compare("GenerateEvents") == 0){
        FindMaxWeight();
	    GenerateEvents();
	    WriteEventFile(filename_out.c_str());}
	   
	      
	return 0;
}

//********************************************************************
// Generate a random point in phase space
//********************************************************************

void GenerateEvent(){
	
    if (energy_type.compare("1") == 0){
      eps1 = Enu;
    }
    else if (energy_type.compare("1") != 0){  
      bin = realdistribution(generator)*length_probability_list;
      eps1 = realdistribution(generator)*(Enumax_list[bin]-Enumin_list[bin])+Enumin_list[bin];       
    }

    // Generate a random point if the neutrino energy is high enough.
    // Otherwise set flag to return a zero weight event.
   
    if ((1-(m3+m4)*(m3+m4)/2/(eps1*eps1)*(1+eps1/M))*(1-(m3+m4)*(m3+m4)/2/(eps1*eps1)*(1+eps1/M)) - (m3+m4)*(m3+m4)*(m3+m4)*(m3+m4)/4/(eps1*eps1*eps1*eps1)*(1+2*eps1/M) < 0) {
        zeroweight=1;
	for (int jj = 0; jj < 4; jj++){
        for (int kk = 0; kk < 4; kk++){
        event[jj][kk] = 0.0;}}
        //std::cout << "The neutrino energy is too small to create the charged leptons";
        return;}
        
    else {zeroweight=0; GenerateRandomPoint();}
    
    // Rotate around z-axis by random angle
    Theta = Twopi*realdistribution(generator);
    sintheta = sin(Theta);
    costheta = cos(Theta);

    // Define the event
    event[0][0] = Enuin;
    event[0][1] = pnuinx;
    event[0][2] = pnuiny;
    event[0][3] = pnuinz;
    
    event[1][0] = Enuout;
    event[1][1] = pnuoutx*costheta+pnuouty*sintheta;
    event[1][2] = -pnuoutx*sintheta+pnuouty*costheta;
    event[1][3] = pnuoutz;
    
    event[2][0] = Elminus;
    event[2][1] = plminusx*costheta+plminusy*sintheta;
    event[2][2] = -plminusx*sintheta+plminusy*costheta;
    event[2][3] = plminusz;
    
    event[3][0] = Elplus;
    event[3][1] = plplusx*costheta+plplusy*sintheta;
    event[3][2] = -plplusx*sintheta+plplusy*costheta;
    event[3][3] = plplusz;

    event[4][0] = Eprime;
    event[4][1] = Pprimex*costheta+Pprimey*sintheta;
    event[4][2] = -Pprimex*sintheta+Pprimey*costheta;
    event[4][3] = Pprimez;
    
    return;
}

void GenerateEvent(double energy){
    
    eps1 = energy;

    // Generate a random point if the neutrino energy is high enough.
    // Otherwise set flag to return a zero weight event.
   
    if ((1-(m3+m4)*(m3+m4)/2/(eps1*eps1)*(1+eps1/M))*(1-(m3+m4)*(m3+m4)/2/(eps1*eps1)*(1+eps1/M)) - (m3+m4)*(m3+m4)*(m3+m4)*(m3+m4)/4/(eps1*eps1*eps1*eps1)*(1+2*eps1/M) < 0) {
        zeroweight=1;
	for (int jj = 0; jj < 4; jj++){
        for (int kk = 0; kk < 4; kk++){
        event[jj][kk] = 0.0;}}
        //std::cout << "The neutrino energy is too small to create the charged leptons";
        return;}
        
    else {zeroweight=0; GenerateRandomPoint();}
    
    // Rotate around z-axis by random angle
    Theta = Twopi*realdistribution(generator);
    sintheta = sin(Theta);
    costheta = cos(Theta);

    // Define the event
    event[0][0] = Enuin;
    event[0][1] = pnuinx;
    event[0][2] = pnuiny;
    event[0][3] = pnuinz;
    
    event[1][0] = Enuout;
    event[1][1] = pnuoutx*costheta+pnuouty*sintheta;
    event[1][2] = -pnuoutx*sintheta+pnuouty*costheta;
    event[1][3] = pnuoutz;
    
    event[2][0] = Elminus;
    event[2][1] = plminusx*costheta+plminusy*sintheta;
    event[2][2] = -plminusx*sintheta+plminusy*costheta;
    event[2][3] = plminusz;
    
    event[3][0] = Elplus;
    event[3][1] = plplusx*costheta+plplusy*sintheta;
    event[3][2] = -plplusx*sintheta+plplusy*costheta;
    event[3][3] = plplusz;

    event[4][0] = Eprime;
    event[4][1] = Pprimex*costheta+Pprimey*sintheta;
    event[4][2] = -Pprimex*sintheta+Pprimey*costheta;
    event[4][3] = Pprimez;
    
    return;
}

//*************************************************************************

void GenerateRandomPoint(){
 
    g = eps1/M;
    x0 = M*eps1; // (B.1) of Lovseth, Radomski
    
    x1max = 2*eps1*eps1/(1+2*g)*(1-(m3+m4)*(m3+m4)/2/(eps1*eps1)*(1+g)+sqrt((1-(m3+m4)*(m3+m4)/2/(eps1*eps1)*(1+g))*(1-(m3+m4)*(m3+m4)/2/(eps1*eps1)*(1+g))-(m3+m4)*(m3+m4)*(m3+m4)*(m3+m4)/4/(eps1*eps1*eps1*eps1)*(1+2*g)));
    x1min = (m3+m4)*(m3+m4)*(m3+m4)*(m3+m4)/x1max/(1+2*g); // (B.4) of Lovseth, Radomski
    
    u1max = Interpolation(x1min, 192);
    double q2_cutoff;
    if (material.compare("Ar") == 0 || material.compare("Fe") == 0 || material.compare("W") == 0){
       q2_cutoff = 2.5;
    }
    if (material.compare("proton") == 0 || material.compare("neutron") == 0){
       q2_cutoff = 196.0;
    }

    // put hard cut off for the form factor
    // at some point the interpolation function becomes ureliable
    // Altmannshofer et al. had an initial cutoff of 1 GeV^2.
    if (x1max > q2_cutoff){u1min = Interpolation(q2_cutoff, 192);}
    else{u1min = Interpolation(x1max, 192);}
    if (x1min > q2_cutoff){u1min = Interpolation(x1min, 192);}

    u1 = u1min + (u1max-u1min)*realdistribution(generator);
    x1 = InverseInterpolation(u1, 192);
    
    
    u2max = (1+2*g)*(x1max-x1)*(x1-x1min)/((m3+m4)*(m3+m4)+x1*(1+g)+2*eps1*sqrt((x1+(x1*x1)/4/M2)));
    u2min = 0.0; // (B.5) of Lovseth, Radomski
    
    u2 = u2min + (u2max-u2min)*realdistribution(generator);
    x2 = (u2+x1+(m3+m4)*(m3+m4))/2;
    
    
    WB = sqrt(u2+(m3+m4)*(m3+m4));
    WB2 = WB*WB;
    yplus = (WB2-m3*m3-m4*m4)+sqrt(WB2*WB2+(m3*m3-m4*m4)*(m3*m3-m4*m4)-2*m3*m3*WB2-2*m4*m4*WB2);
    yminus = 4*m3*m3*m4*m4/yplus; // (B.9b) of Lovseth, Radomski
    
    D3max = m3*m3+x1*m4*m4/(WB2)+x2*yplus/(WB2);
    D3min = m3*m3+x1*m4*m4/(WB2)+x2*yminus/(WB2); // (B.9b) of Lovseth, Radomski
    
    u3max = log(D3max);
    u3min = log(D3min); // (B.9a) of Lovseth, Radomski
    u3 = u3min + (u3max-u3min)*realdistribution(generator);

    x3 = (exp(u3)-x1)/2; // (B.8) of Lovseth, Radomski
    D3 = x1+2*x3;
    D32 = D3*D3;
    
    u4max = ((D3max-D3)*(D3-D3min)*WB2/x1/(u2+2*m3*(m3+m4)+2*x3*(x2-x1)/x1+2*x2*sqrt(x3*x3+m3*m3*x1)/x1))*((D3max-D3)*(D3-D3min)*WB2/x1/(u2+2*m3*(m3+m4)+2*x3*(x2-x1)/x1+2*x2*sqrt(x3*x3+m3*m3*x1)/x1));
    //  (B.10) of Lovseth, Radomski (square is according to Brown et al.)
    u4min = 0.0;
    u4 = u4min + (u4max-u4min)*realdistribution(generator);

    x5 = x2-x3-(m4*m4-m3*m3+x1+sqrt(u4))/2; // (B.8) of Lovseth, Radomski
    
    u5max = Twopi; // (B.11) of Lovseth, Radomski
    u5min = 0.0;
    u5 = u5min + (u5max-u5min)*realdistribution(generator);

    phi3 = u5;
    
    P2 = M2*(u2max-u2)/2*(x2+eps1*x1/2/M+eps1*sqrt(x1+x1*x1/4/M2))/(x2*x2); // (B.13) of Lovseth, Radomski
    P5 = x1/2*(sqrt(u4max)-sqrt(u4))*((sqrt(u4max)-sqrt(u4))/2+2*x2*sqrt(x3*x3+m3*m3*x1)/x1)/(x2*x2);
    
    WC = sqrt(sqrt(u4)+m4*m4); // from (24) of Lovseth, Radomski
    WC2 = WC*WC;
    qc = 1/WC*sqrt((x2-x3)*(x2-x3)-2*x1*x5+m3*m3*x1); // (B.16) of Lovseth, Radomski
    WCqc = sqrt((x2-x3)*(x2-x3)-2*x1*x5+m3*m3*x1);
    
    x7 = (x0*x1*x5+x0*x2*x3-x1*x2*x5/2)/(x2*x2)-sqrt(P2*P5)*cos(u5); // (B.12) of Lovseth, Radomski
    
    u7max = Twopi; // (B.17) of Lovseth, Radomski
    u7min = 0.0;
    u7 = u7min + (u7max-u7min)*realdistribution(generator);

    phi4 = u7;
    
    D4max = m4*m4*(WC2+2*x5-m3*m3)/WC2+(1-m4*m4/WC2)/2*(WC2+x1+2*x5-m3*m3+sqrt((WC2+2*x5+x1-m3*m3)*(WC2+2*x5+x1-m3*m3)-4*x1*(2*x5-m3*m3))); // (B.18) of Lovseth, Radomski
    D4min = m4*m4*(WC2+2*x5-m3*m3)/WC2+2*(1-m4*m4/WC2)*x1*(2*x5-m3*m3)/((WC2+x1+2*x5-m3*m3)+sqrt((WC2+x1+2*x5-m3*m3)*(WC2+x1+2*x5-m3*m3)-4*x1*(2*x5-m3*m3))); // (B.19) of Lovseth, Radomski

    u6max = log(D4max); // (B.17) of Lovseth, Radomski
    u6min = log(D4min);
    u6 = u6min + (u6max-u6min)*realdistribution(generator);

    
    x4 = (-x1+exp(u6))/2; // (B.15) of Lovseth, Radomski
    D4 = x1+2*x4;
    D42 = D4*D4;
    D3D4 = D3*D4;
    
    P4 = (D4max-D4)*(D4-D4min)/4/(qc*qc); // below (B.21) of Lovseth, Radomski
    
    x6 = ((WC2+m4*m4)/2*(x2*(x2-x3)-x1*x5)+x4*(x2-x5)*(x2-x1-x3)-x4*x2*WC2)/WCqc/WCqc-x2*sqrt(P4*P5)*cos(phi4)/WCqc; // (B.21) of Lovseth, Radomski
    
    // x8 result in (B.21) of Lovseth, Radomski is missing a term according to Brown et al. and is not used in the following
    
    // below (B.20) in Lovseth, Radomski
    P0C = (x0-0.5*x1-x7)/WC; // note the typo ...x7/WC) in Lovseth, Radomski
    PC = sqrt(P0C*P0C-M2);
    q0C = (x2-x1-x3)/WC;
    qC = sqrt(q0C*q0C+x1);
    eps1C = (x2-x5)/WC;
    eps4C = (WC2+m4*m4)/2/WC;
    p4C = sqrt(u4)/2/WC;
    
    cos4 = (eps4C*q0C-x4)/p4C/qC;
    sin4 = sqrt(1-cos4*cos4);
    
    flagkinematics = 0;
      
    if(cos4*cos4>1.01){
      flagkinematics = 1; 
//      std::cout << "Warning: event with extreme kinematics. Numerical precision is insufficient. \n";
//      std::cout << "cos4^2-1 = " << (eps4C*q0C-x4)/p4C/qC*(eps4C*q0C-x4)/p4C/qC-1 << "\n\n";
    }
    
    if(1-cos4*cos4<1.0e-16){
      sin4=0.0; // adhoc fix
      cos4=1.0; // adhoc fix
    }
      
    cosPq = (P0C*q0C+x1/2)/PC/qC;
    sinPq = sqrt(1-cosPq*cosPq);
    
    if(1-cosPq*cosPq<1.0e-16){
      flagkinematics = 1;
//      std::cout << "Warning: event with extreme kinematics. Numerical precision is insufficient. \n";
//      std::cout << "cosPq^2-1 = " << (P0C*q0C+x1/2)/PC/qC*(P0C*q0C+x1/2)/PC/qC-1 << "\n\n";
    }
    
    cosP1q = (eps1C*q0C-x2)/eps1C/qC;
    sinP1q = sqrt(1-cosP1q*cosP1q);
    
    if(1-cosP1q*cosP1q<1.0e-16){
      flagkinematics = 1;
//      std::cout << "Warning: event with extreme kinematics. Numerical precision is insufficient. \n";
//      std::cout << "cosP1q^2-1 = " << (eps1C*q0C-x2)/eps1C/qC*(eps1C*q0C-x2)/eps1C/qC-1 << "\n\n";
    }
   
    cosPp1 = (P0C*eps1C-x0)/eps1C/PC;
    sinPp1 = sqrt(1-cosPp1*cosPp1);
    
    if(1-cosPp1*cosPp1<1.0e-16){
      flagkinematics = 1;
//      std::cout << "Warning: event with extreme kinematics. Numerical precision is insufficient. \n";
//      std::cout << "cosPp1^2-1 = " << (P0C*eps1C-x0)/eps1C/PC*(P0C*eps1C-x0)/eps1C/PC-1 << "\n\n";
    }
   
    cosPhi = (cosPp1-cosPq*cosP1q)/(sinPq*sinP1q);
    sinPhi = sqrt(1-cosPhi*cosPhi);
    
    if(cosPhi>1.01){
      flagkinematics = 1;
//      std::cout << "Warning: event with extreme kinematics. Numerical precision is insufficient. \n";
//      std::cout << "cosPhi^2-1 = " << (cosPp1-cosPq*cosP1q)/(sinPq*sinP1q)*(cosPp1-cosPq*cosP1q)/(sinPq*sinP1q)-1 << "\n\n";
    }
      if(1-cosPhi*cosPhi<1.0e-16){
      sinPhi=0.0; // adhoc fix
      cosPhi=1.0; // adhoc fix
    }

    x8 = P0C*eps4C-PC*p4C*(cos4*cosPq+sin4*sinPq*(cos(phi4)*cosPhi-sin(phi4)*sinPhi)); // (B .20) in Lovseth, Radomski

    // (B.1) and (B.2) of Lovseth, Radomski
    p1P = -x0;
    q2 = x1;
    qp1 = -x2;
    qp3 = -x3;
    qp4 = -x4;
    p1p3 = -x5;
    p1p4 = -x6;
    p3P = -x7;
    p4P = -x8;
    Pq = x1*0.5;
    qP = Pq;
    p2P = x1*0.5-x0+x7+x8;
    qp2 = x1-x2+x3+x4;
    p1p2 = -x2+x5+x6;
    p2p3 = (m3*m3-m4*m4+x1)*0.5-x2+x4+x6;
    p2p4 = (m4*m4-m3*m3+x1)*0.5-x2+x3+x5;
    p3p4 = (m3*m3+m4*m4-x1)*0.5+x2-x3-x4-x5-x6;
    
       
    // Define the 4 momenta of the events
    
    Enuin = eps1;
    pnuinx = 0.0;
    pnuiny = 0.0;
    pnuinz = eps1;
    
    // note that signs are such that the metric of Lovseth, Radomski is taken into account
    
    Eq = -qP/M;
    qz = Eq+qp1/eps1;
    qy = sqrt(q2-2*Eq*qp1/eps1-qp1*qp1/eps1/eps1);
    qx = 0.0;
    
    Elplus = -p3P/M;
    plplusz = Elplus+p1p3/eps1; 
    plplusy = (Eq*Elplus+qp3-qz*plplusz)/qy;
    plplusx = sqrt(-2*Elplus*p1p3/eps1-p1p3*p1p3/eps1/eps1-plplusy*plplusy-m3*m3);

    Enuout = -p2P/M; 
    pnuoutz = Enuout+p1p2/eps1;
    pnuouty = (Eq*Enuout+qp2-qz*pnuoutz)/qy;
    pnuoutx = 1/plplusx*(p2p3-p1p2*p1p3/eps1/eps1-p1p2*Elplus/eps1-p1p3*Enuout/eps1-pnuouty*plplusy);
    
    Elminus = -p4P/M;
    plminusz = Elminus+p1p4/eps1;
    plminusy = (Eq*Elminus+qp4-qz*plminusz)/qy;
    plminusx = -plplusx-pnuoutx;
        
    // special case where the anti-muon has no momentum in x direction
    if (-2*Elplus*p1p3/eps1-p1p3*p1p3/eps1/eps1-plplusy*plplusy < 0){
       flagkinematics = 1;
//       std::cout << "Warning: event with extreme kinematics. Numerical precision is insufficient. \n";
//       std::cout << "Elplus = " << Elplus << "\n";
//       std::cout << "plplusz = " << plplusz << "\n";
//       std::cout << "plplusy = " << plplusy << "\n";
//       std::cout << "plplusx = " << plplusx << "\n\n";
    }
    if (-2*Elplus*p1p3/eps1-p1p3*p1p3/eps1/eps1-plplusy*plplusy-m3*m3 < 0){
        plplusx = 0.0;
	    plminusx = sqrt(-2*Elminus*p1p4/eps1-p1p4*p1p4/eps1/eps1-plminusy*plminusy-m4*m4);
	    pnuoutx = -plminusx;
    }
    
    // special case where both muon and anti-muon have no momentum in x direction
    if (-2*Elplus*p1p3/eps1-p1p3*p1p3/eps1/eps1-plplusy*plplusy-m3*m3 < 0 && -2*Elminus*p1p4/eps1-p1p4*p1p4/eps1/eps1-plminusy*plminusy < 0){
       flagkinematics = 1;
//       std::cout << "Warning: event with extreme kinematics. Numerical precision is insufficient. \n";
//       std::cout << "Elminus = " << Elminus << "\n";
//       std::cout << "plminusz = " << plminusz << "\n";
//       std::cout << "plminusy = " << plminusy << "\n";
//       std::cout << "plminusx = " << plminusx << "\n\n";
    }
    if (-2*Elplus*p1p3/eps1-p1p3*p1p3/eps1/eps1-plplusy*plplusy-m3*m3 < 0 && -2*Elminus*p1p4/eps1-p1p4*p1p4/eps1/eps1-plminusy*plminusy-m4*m4 < 0){
        plplusx = 0.0;
	    plminusx = 0.0;
	    pnuoutx = 0.0;
    }
   
    
    // special case where the momentum transfer to the nucleon has no y component    
    if (q2-2*Eq*qp1/eps1-qp1*qp1/eps1/eps1 < -q2){
       flagkinematics = 1;
//       std::cout << "Warning: event with extreme kinematics. Numerical precision is insufficient. \n";
//       std::cout << "Eq = " << Eq << "\n";
//       std::cout << "qz = " << qz << "\n";
//       std::cout << "qy = " << qy << "\n\n";
    }
    if (q2-2*Eq*qp1/eps1-qp1*qp1/eps1/eps1 < 0){
        qy = 0.0;
	
	    plplusy = sqrt(-2*Elplus*p1p3/eps1-p1p3*p1p3/eps1/eps1-m3*m3);
        plplusx = 0.0;
	
	    pnuouty = (Elplus*Enuout+p2p3-plplusz*pnuoutz)/plplusy;
        pnuoutx = sqrt(-2*Enuout*p1p2/eps1-p1p2*p1p2/eps1/eps1-pnuouty*pnuouty);
	
 	    plminusy = (Elplus*Elminus+p3p4-plplusz*plminusz)/plplusy;
        plminusx = -plplusx-pnuoutx;
    }
    
    
    // special case where the momentum transfer to the nucleon has no y component and the outgoing neutrino has no momentum in x direction   
    if (q2-2*Eq*qp1/eps1-qp1*qp1/eps1/eps1 < 0 && -2*Enuout*p1p2/eps1-p1p2*p1p2/eps1/eps1 < 0){
       flagkinematics = 1;
//       std::cout << "Warning: event with extreme kinematics. Numerical precision is insufficient. \n";
//       std::cout << "Enuout = " << Enuout << "\n";
//       std::cout << "pnuoutz = " << pnuoutz << "\n";
//       std::cout << "pnuouty = " << pnuouty << "\n";
//       std::cout << "pnuoutx = " << pnuoutx << "\n\n";
    }
    if (q2-2*Eq*qp1/eps1-qp1*qp1/eps1/eps1 < 0 && -2*Enuout*p1p2/eps1-p1p2*p1p2/eps1/eps1-pnuouty*pnuouty < 0){
        qy = 0.0;
	
	    plplusy = sqrt(-2*Elplus*p1p3/eps1-p1p3*p1p3/eps1/eps1-m3*m3);
        plplusx = 0.0;
	
	    pnuouty = (Elplus*Enuout+p2p3-plplusz*pnuoutz)/plplusy;
        pnuoutx = 0.0;
	
	    plminusy = (Elplus*Elminus+p3p4-plplusz*plminusz)/plplusy;
        plminusx = 0.0;
    }
    
    
    // special case where the momentum transfer to the nucleon and the momentum of the anti-muon have no y component
    if (q2-2*Eq*qp1/eps1-qp1*qp1/eps1/eps1 < 0 && -2*Elplus*p1p3/eps1-p1p3*p1p3/eps1/eps1 < 0){
       flagkinematics = 1;
//       std::cout << "Warning: event with extreme kinematics. Numerical precision is insufficient. \n";
//       std::cout << "Elplus = " << Elplus << "\n";
//       std::cout << "plplusz = " << plplusz << "\n";
//       std::cout << "plplusy = " << plplusy << "\n";
//       std::cout << "plplusx = " << plplusx << "\n\n";
    }
    if (q2-2*Eq*qp1/eps1-qp1*qp1/eps1/eps1 < 0 && -2*Elplus*p1p3/eps1-p1p3*p1p3/eps1/eps1-m3*m3 < 0){
        qy = 0.0;
	
	    plplusy = 0.0;
        plplusx = 0.0;
	
	    plminusy = sqrt(-2*Elminus*p1p4/eps1-p1p4*p1p4/eps1/eps1-m4*m4);
        plminusx = 0.0;
	
        pnuouty = -plminusy;
        pnuoutx = 0.0;
    }
    
    
    // special case where the momentum transfer to the nucleon and the momenta of the muon and anti-muon have no y component
    if (q2-2*Eq*qp1/eps1-qp1*qp1/eps1/eps1 < 0 && -2*Elplus*p1p3/eps1-p1p3*p1p3/eps1/eps1-m3*m3 < 0 && -2*Elminus*p1p4/eps1-p1p4*p1p4/eps1/eps1 < 0){
       flagkinematics = 1;
//       std::cout << "Warning: event with extreme kinematics. Numerical precision is insufficient. \n";
//       std::cout << "Elminus = " << Elminus << "\n";
//       std::cout << "plminusz = " << plminusz << "\n";
//       std::cout << "plminusy = " << plminusy << "\n";
//       std::cout << "plminusx = " << plminusx << "\n\n";
    }
    if (q2-2*Eq*qp1/eps1-qp1*qp1/eps1/eps1 < 0 && -2*Elplus*p1p3/eps1-p1p3*p1p3/eps1/eps1-m3*m3 < 0 && -2*Elminus*p1p4/eps1-p1p4*p1p4/eps1/eps1-m4*m4 < 0){
        qy = 0.0;
	
	    plplusy = 0.0;
        plplusx = 0.0;
	
	    plminusy = 0.0;
        plminusx = 0.0;
	
        pnuouty = 0.0;
        pnuoutx = 0.0;
    }
    
    
    // nuclear recoil 4-momentum
    
        Eprime = M + Enuin - Enuout - Elplus - Elminus;
        Pprimex = - pnuoutx - plplusx - plminusx;
        Pprimey = - pnuouty - plplusy - plminusy;
        Pprimez = pnuinz - pnuoutz - plplusz - plminusz;
   
    if (q2flag == "y" and flagkinematics != 1){
        q2distribution.push_back(q2);
    }

    return;
}


//*****************************************************************
// squared matrix elements for neutrino and anti-neutrino tridents
//*****************************************************************

double SquaredMatrixElementPLP(double GFV, double GFA){

    double GFA2, GFV2, GFAGFV, result;
    
    GFA2 = GFA*GFA;
    GFV2 = GFV*GFV;
    GFAGFV = GFA*GFV;

    result = 4*((64*GFA2*m3*m4*p1p2*p3P*p3P)/D32 - 
                (64*GFV2*m3*m4*p1p2*p3P*p3P)/D32 + 
                (64*GFA2*p1p4*p2p3*p3P*p3P)/D32 + 
                (128*GFAGFV*p1p4*p2p3*p3P*p3P)/D32 + 
                (64*GFV2*p1p4*p2p3*p3P*p3P)/D32 + 
                (64*GFA2*p1p3*p2p4*p3P*p3P)/D32 - 
                (128*GFAGFV*p1p3*p2p4*p3P*p3P)/D32 + 
                (64*GFV2*p1p3*p2p4*p3P*p3P)/D32 - 
                (128*GFA2*m3*m4*p1p2*p3P*p4P)/D3D4 + 
                (128*GFV2*m3*m4*p1p2*p3P*p4P)/D3D4 - 
                (128*GFA2*p1p4*p2p3*p3P*p4P)/D3D4 - 
                (256*GFAGFV*p1p4*p2p3*p3P*p4P)/D3D4 - 
                (128*GFV2*p1p4*p2p3*p3P*p4P)/D3D4 - 
                (128*GFA2*p1p3*p2p4*p3P*p4P)/D3D4 + 
                (256*GFAGFV*p1p3*p2p4*p3P*p4P)/D3D4 - 
                (128*GFV2*p1p3*p2p4*p3P*p4P)/D3D4 + 
                (64*GFA2*m3*m4*p1p2*p4P*p4P)/D42 - 
                (64*GFV2*m3*m4*p1p2*p4P*p4P)/D42 + 
                (64*GFA2*p1p4*p2p3*p4P*p4P)/D42 + 
                (128*GFAGFV*p1p4*p2p3*p4P*p4P)/D42 + 
                (64*GFV2*p1p4*p2p3*p4P*p4P)/D42 + 
                (64*GFA2*p1p3*p2p4*p4P*p4P)/D42 - 
                (128*GFAGFV*p1p3*p2p4*p4P*p4P)/D42 + 
                (64*GFV2*p1p3*p2p4*p4P*p4P)/D42 - 
                (16*GFA2*M2*m3*m4*p1p2*q2)/D32 - 
                (16*GFA2*M2*m3*m4*p1p2*q2)/D42 + 
                (32*GFA2*M2*m3*m4*p1p2*q2)/D3D4 + 
                (16*GFV2*M2*m3*m4*p1p2*q2)/D32 + 
                (16*GFV2*M2*m3*m4*p1p2*q2)/D42 - 
                (32*GFV2*M2*m3*m4*p1p2*q2)/D3D4 + 
                (64*GFA2*m3*m4*p1P*p2P*q2)/D3D4 - 
                (64*GFV2*m3*m4*p1P*p2P*q2)/D3D4 - 
                (16*GFA2*M2*p1p4*p2p3*q2)/D32 - 
                (16*GFA2*M2*p1p4*p2p3*q2)/D42 - 
                (32*GFA2*M2*p1p4*p2p3*q2)/D3D4 - 
                (32*GFAGFV*M2*p1p4*p2p3*q2)/D32 - 
                (32*GFAGFV*M2*p1p4*p2p3*q2)/D42 + 
                (64*GFAGFV*M2*p1p4*p2p3*q2)/D3D4 - 
                (16*GFV2*M2*p1p4*p2p3*q2)/D32 - 
                (16*GFV2*M2*p1p4*p2p3*q2)/D42 - 
                (32*GFV2*M2*p1p4*p2p3*q2)/D3D4 - 
                (16*GFA2*M2*p1p3*p2p4*q2)/D32 - 
                (16*GFA2*M2*p1p3*p2p4*q2)/D42 - 
                (32*GFA2*M2*p1p3*p2p4*q2)/D3D4 + 
                (32*GFAGFV*M2*p1p3*p2p4*q2)/D32 + 
                (32*GFAGFV*M2*p1p3*p2p4*q2)/D42 - 
                (64*GFAGFV*M2*p1p3*p2p4*q2)/D3D4 - 
                (16*GFV2*M2*p1p3*p2p4*q2)/D32 - 
                (16*GFV2*M2*p1p3*p2p4*q2)/D42 - 
                (32*GFV2*M2*p1p3*p2p4*q2)/D3D4 - 
                (32*GFA2*p1p4*p2P*p3P*q2)/D32 - 
                (32*GFA2*p1p4*p2P*p3P*q2)/D3D4 - 
                (64*GFAGFV*p1p4*p2P*p3P*q2)/D32 + 
                (64*GFAGFV*p1p4*p2P*p3P*q2)/D3D4 - 
                (32*GFV2*p1p4*p2P*p3P*q2)/D32 - 
                (32*GFV2*p1p4*p2P*p3P*q2)/D3D4 - 
                (32*GFA2*p1P*p2p4*p3P*q2)/D32 - 
                (32*GFA2*p1P*p2p4*p3P*q2)/D3D4 + 
                (64*GFAGFV*p1P*p2p4*p3P*q2)/D32 - 
                (64*GFAGFV*p1P*p2p4*p3P*q2)/D3D4 - 
                (32*GFV2*p1P*p2p4*p3P*q2)/D32 - 
                (32*GFV2*p1P*p2p4*p3P*q2)/D3D4 + 
                (64*GFA2*M2*p1p2*p3p4*q2)/D3D4 + 
                (64*GFV2*M2*p1p2*p3p4*q2)/D3D4 + 
                (64*GFA2*p1P*p2P*p3p4*q2)/D3D4 + 
                (64*GFV2*p1P*p2P*p3p4*q2)/D3D4 - 
                (32*GFA2*p1p3*p2P*p4P*q2)/D42 - 
                (32*GFA2*p1p3*p2P*p4P*q2)/D3D4 + 
                (64*GFAGFV*p1p3*p2P*p4P*q2)/D42 - 
                (64*GFAGFV*p1p3*p2P*p4P*q2)/D3D4 - 
                (32*GFV2*p1p3*p2P*p4P*q2)/D42 -
                (32*GFV2*p1p3*p2P*p4P*q2)/D3D4 - 
                (32*GFA2*p1P*p2p3*p4P*q2)/D42 - 
                (32*GFA2*p1P*p2p3*p4P*q2)/D3D4 - 
                (64*GFAGFV*p1P*p2p3*p4P*q2)/D42 + 
                (64*GFAGFV*p1P*p2p3*p4P*q2)/D3D4 - 
                (32*GFV2*p1P*p2p3*p4P*q2)/D42 - 
                (32*GFV2*p1P*p2p3*p4P*q2)/D3D4 + 
                (64*GFA2*p1p2*p3P*p4P*q2)/D3D4 + 
                (64*GFV2*p1p2*p3P*p4P*q2)/D3D4 - 
                (64*GFA2*m3*m4*p1p2*p3P*qP)/D32 + 
                (64*GFA2*m3*m4*p1p2*p3P*qP)/D3D4 + 
                (64*GFV2*m3*m4*p1p2*p3P*qP)/D32 - 
                (64*GFV2*m3*m4*p1p2*p3P*qP)/D3D4 - 
                (64*GFA2*p1p4*p2p3*p3P*qP)/D32 + 
                (64*GFA2*p1p4*p2p3*p3P*qP)/D3D4 - 
                (128*GFAGFV*p1p4*p2p3*p3P*qP)/D32 + 
                (128*GFAGFV*p1p4*p2p3*p3P*qP)/D3D4 - 
                (64*GFV2*p1p4*p2p3*p3P*qP)/D32 + 
                (64*GFV2*p1p4*p2p3*p3P*qP)/D3D4 - 
                (64*GFA2*p1p3*p2p4*p3P*qP)/D32 + 
                (64*GFA2*p1p3*p2p4*p3P*qP)/D3D4 + 
                (128*GFAGFV*p1p3*p2p4*p3P*qP)/D32 - 
                (128*GFAGFV*p1p3*p2p4*p3P*qP)/D3D4 - 
                (64*GFV2*p1p3*p2p4*p3P*qP)/D32 + 
                (64*GFV2*p1p3*p2p4*p3P*qP)/D3D4 - 
                (64*GFA2*m3*m4*p1p2*p4P*qP)/D42 + 
                (64*GFA2*m3*m4*p1p2*p4P*qP)/D3D4 + 
                (64*GFV2*m3*m4*p1p2*p4P*qP)/D42 - 
                (64*GFV2*m3*m4*p1p2*p4P*qP)/D3D4 - 
                (64*GFA2*p1p4*p2p3*p4P*qP)/D42 + 
                (64*GFA2*p1p4*p2p3*p4P*qP)/D3D4 - 
                (128*GFAGFV*p1p4*p2p3*p4P*qP)/D42 + 
                (128*GFAGFV*p1p4*p2p3*p4P*qP)/D3D4 - 
                (64*GFV2*p1p4*p2p3*p4P*qP)/D42 + 
                (64*GFV2*p1p4*p2p3*p4P*qP)/D3D4 - 
                (64*GFA2*p1p3*p2p4*p4P*qP)/D42 + 
                (64*GFA2*p1p3*p2p4*p4P*qP)/D3D4 + 
                (128*GFAGFV*p1p3*p2p4*p4P*qP)/D42 - 
                (128*GFAGFV*p1p3*p2p4*p4P*qP)/D3D4 - 
                (64*GFV2*p1p3*p2p4*p4P*qP)/D42 + 
                (64*GFV2*p1p3*p2p4*p4P*qP)/D3D4 - 
                (64*GFA2*p1p4*p2p3*qP*qP)/D3D4 - 
                (64*GFV2*p1p4*p2p3*qP*qP)/D3D4 - 
                (64*GFA2*p1p3*p2p4*qP*qP)/D3D4 - 
                (64*GFV2*p1p3*p2p4*qP*qP)/D3D4 + 
                (64*GFA2*p1p2*p3p4*qP*qP)/D3D4 + 
                (64*GFV2*p1p2*p3p4*qP*qP)/D3D4 - 
                (64*GFA2*p2p4*p3P*p3P*qp1)/D32 + 
                (128*GFAGFV*p2p4*p3P*p3P*qp1)/D32 - 
                (64*GFV2*p2p4*p3P*p3P*qp1)/D32 + 
                (64*GFA2*p2p3*p3P*p4P*qp1)/D3D4 + 
                (128*GFAGFV*p2p3*p3P*p4P*qp1)/D3D4 + 
                (64*GFV2*p2p3*p3P*p4P*qp1)/D3D4 + 
                (64*GFA2*p2p4*p3P*p4P*qp1)/D3D4 - 
                (128*GFAGFV*p2p4*p3P*p4P*qp1)/D3D4 + 
                (64*GFV2*p2p4*p3P*p4P*qp1)/D3D4 - 
                (64*GFA2*p2p3*p4P*p4P*qp1)/D42 - 
                (128*GFAGFV*p2p3*p4P*p4P*qp1)/D42 - 
                (64*GFV2*p2p3*p4P*p4P*qp1)/D42 - 
                (64*GFA2*m3*m4*p2P*qP*qp1)/D3D4 + 
                (64*GFV2*m3*m4*p2P*qP*qp1)/D3D4 + 
                (64*GFA2*p2p4*p3P*qP*qp1)/D32 - 
                (128*GFAGFV*p2p4*p3P*qP*qp1)/D32 + 
                (128*GFAGFV*p2p4*p3P*qP*qp1)/D3D4 + 
                (64*GFV2*p2p4*p3P*qP*qp1)/D32 - 
                (64*GFA2*p2P*p3p4*qP*qp1)/D3D4 - 
                (64*GFV2*p2P*p3p4*qP*qp1)/D3D4 + 
                (64*GFA2*p2p3*p4P*qP*qp1)/D42 + 
                (128*GFAGFV*p2p3*p4P*qP*qp1)/D42 - 
                (128*GFAGFV*p2p3*p4P*qP*qp1)/D3D4 + 
                (64*GFV2*p2p3*p4P*qP*qp1)/D42 - 
                (64*GFA2*p1p4*p3P*p3P*qp2)/D32 - 
                (128*GFAGFV*p1p4*p3P*p3P*qp2)/D32 - 
                (64*GFV2*p1p4*p3P*p3P*qp2)/D32 + 
                (64*GFA2*p1p3*p3P*p4P*qp2)/D3D4 - 
                (128*GFAGFV*p1p3*p3P*p4P*qp2)/D3D4 + 
                (64*GFV2*p1p3*p3P*p4P*qp2)/D3D4 + 
                (64*GFA2*p1p4*p3P*p4P*qp2)/D3D4 + 
                (128*GFAGFV*p1p4*p3P*p4P*qp2)/D3D4 + 
                (64*GFV2*p1p4*p3P*p4P*qp2)/D3D4 - 
                (64*GFA2*p1p3*p4P*p4P*qp2)/D42 + 
                (128*GFAGFV*p1p3*p4P*p4P*qp2)/D42 - 
                (64*GFV2*p1p3*p4P*p4P*qp2)/D42 - 
                (64*GFA2*m3*m4*p1P*qP*qp2)/D3D4 + 
                (64*GFV2*m3*m4*p1P*qP*qp2)/D3D4 + 
                (64*GFA2*p1p4*p3P*qP*qp2)/D32 + 
                (128*GFAGFV*p1p4*p3P*qP*qp2)/D32 - 
                (128*GFAGFV*p1p4*p3P*qP*qp2)/D3D4 + 
                (64*GFV2*p1p4*p3P*qP*qp2)/D32 - 
                (64*GFA2*p1P*p3p4*qP*qp2)/D3D4 - 
                (64*GFV2*p1P*p3p4*qP*qp2)/D3D4 + 
                (64*GFA2*p1p3*p4P*qP*qp2)/D42 - 
                (128*GFAGFV*p1p3*p4P*qP*qp2)/D42 + 
                (128*GFAGFV*p1p3*p4P*qP*qp2)/D3D4 + 
                (64*GFV2*p1p3*p4P*qP*qp2)/D42 - 
                (64*GFA2*M2*m3*m4*qp1*qp2)/D3D4 + 
                (64*GFV2*M2*m3*m4*qp1*qp2)/D3D4 - 
                (64*GFA2*M2*p3p4*qp1*qp2)/D3D4 - 
                (64*GFV2*M2*p3p4*qp1*qp2)/D3D4 - 
                (128*GFA2*p3P*p4P*qp1*qp2)/D3D4 - 
                (128*GFV2*p3P*p4P*qp1*qp2)/D3D4 + 
                (64*GFA2*p1p4*p2P*p3P*qp3)/D32 + 
                (128*GFAGFV*p1p4*p2P*p3P*qp3)/D32 + 
                (64*GFV2*p1p4*p2P*p3P*qp3)/D32 + 
                (64*GFA2*p1P*p2p4*p3P*qp3)/D32 - 
                (128*GFAGFV*p1P*p2p4*p3P*qp3)/D32 + 
                (64*GFV2*p1P*p2p4*p3P*qp3)/D32 - 
                (64*GFA2*p1p4*p2P*p4P*qp3)/D3D4 - 
                (128*GFAGFV*p1p4*p2P*p4P*qp3)/D3D4 - 
                (64*GFV2*p1p4*p2P*p4P*qp3)/D3D4 - 
                (64*GFA2*p1P*p2p4*p4P*qp3)/D3D4 + 
                (128*GFAGFV*p1P*p2p4*p4P*qp3)/D3D4 - 
                (64*GFV2*p1P*p2p4*p4P*qp3)/D3D4 + 
                (64*GFA2*p1p4*p2P*qP*qp3)/D3D4 + 
                (64*GFV2*p1p4*p2P*qP*qp3)/D3D4 + 
                (64*GFA2*p1P*p2p4*qP*qp3)/D3D4 + 
                (64*GFV2*p1P*p2p4*qP*qp3)/D3D4 - 
                (64*GFA2*p1p2*p4P*qP*qp3)/D3D4 - 
                (64*GFV2*p1p2*p4P*qP*qp3)/D3D4 + 
                (32*GFA2*M2*p2p4*qp1*qp3)/D32 + 
                (32*GFA2*M2*p2p4*qp1*qp3)/D3D4 - 
                (64*GFAGFV*M2*p2p4*qp1*qp3)/D32 + 
                (64*GFAGFV*M2*p2p4*qp1*qp3)/D3D4 + 
                (32*GFV2*M2*p2p4*qp1*qp3)/D32 + 
                (32*GFV2*M2*p2p4*qp1*qp3)/D3D4 + 
                (64*GFA2*p2P*p4P*qp1*qp3)/D3D4 + 
                (128*GFAGFV*p2P*p4P*qp1*qp3)/D3D4 + 
                (64*GFV2*p2P*p4P*qp1*qp3)/D3D4 + 
                (32*GFA2*M2*p1p4*qp2*qp3)/D32 + 
                (32*GFA2*M2*p1p4*qp2*qp3)/D3D4 + 
                (64*GFAGFV*M2*p1p4*qp2*qp3)/D32 - 
                (64*GFAGFV*M2*p1p4*qp2*qp3)/D3D4 + 
                (32*GFV2*M2*p1p4*qp2*qp3)/D32 + 
                (32*GFV2*M2*p1p4*qp2*qp3)/D3D4 + 
                (64*GFA2*p1P*p4P*qp2*qp3)/D3D4 - 
                (128*GFAGFV*p1P*p4P*qp2*qp3)/D3D4 + 
                (64*GFV2*p1P*p4P*qp2*qp3)/D3D4 - 
                (64*GFA2*p1p3*p2P*p3P*qp4)/D3D4 + 
                (128*GFAGFV*p1p3*p2P*p3P*qp4)/D3D4 - 
                (64*GFV2*p1p3*p2P*p3P*qp4)/D3D4 - 
                (64*GFA2*p1P*p2p3*p3P*qp4)/D3D4 - 
                (128*GFAGFV*p1P*p2p3*p3P*qp4)/D3D4 - 
                (64*GFV2*p1P*p2p3*p3P*qp4)/D3D4 + 
                (64*GFA2*p1p3*p2P*p4P*qp4)/D42 - 
                (128*GFAGFV*p1p3*p2P*p4P*qp4)/D42 + 
                (64*GFV2*p1p3*p2P*p4P*qp4)/D42 + 
                (64*GFA2*p1P*p2p3*p4P*qp4)/D42 + 
                (128*GFAGFV*p1P*p2p3*p4P*qp4)/D42 + 
                (64*GFV2*p1P*p2p3*p4P*qp4)/D42 + 
                (64*GFA2*p1p3*p2P*qP*qp4)/D3D4 + 
                (64*GFV2*p1p3*p2P*qP*qp4)/D3D4 + 
                (64*GFA2*p1P*p2p3*qP*qp4)/D3D4 + 
                (64*GFV2*p1P*p2p3*qP*qp4)/D3D4 - 
                (64*GFA2*p1p2*p3P*qP*qp4)/D3D4 - 
                (64*GFV2*p1p2*p3P*qP*qp4)/D3D4 + 
                (32*GFA2*M2*p2p3*qp1*qp4)/D42 + 
                (32*GFA2*M2*p2p3*qp1*qp4)/D3D4 + 
                (64*GFAGFV*M2*p2p3*qp1*qp4)/D42 - 
                (64*GFAGFV*M2*p2p3*qp1*qp4)/D3D4 + 
                (32*GFV2*M2*p2p3*qp1*qp4)/D42 + 
                (32*GFV2*M2*p2p3*qp1*qp4)/D3D4 + 
                (64*GFA2*p2P*p3P*qp1*qp4)/D3D4 - 
                (128*GFAGFV*p2P*p3P*qp1*qp4)/D3D4 + 
                (64*GFV2*p2P*p3P*qp1*qp4)/D3D4 + 
                (32*GFA2*M2*p1p3*qp2*qp4)/D42 + 
                (32*GFA2*M2*p1p3*qp2*qp4)/D3D4 - 
                (64*GFAGFV*M2*p1p3*qp2*qp4)/D42 + 
                (64*GFAGFV*M2*p1p3*qp2*qp4)/D3D4 + 
                (32*GFV2*M2*p1p3*qp2*qp4)/D42 + 
                (32*GFV2*M2*p1p3*qp2*qp4)/D3D4 + 
                (64*GFA2*p1P*p3P*qp2*qp4)/D3D4 + 
                (128*GFAGFV*p1P*p3P*qp2*qp4)/D3D4 + 
                (64*GFV2*p1P*p3P*qp2*qp4)/D3D4 - 
                (64*GFA2*M2*p1p2*qp3*qp4)/D3D4 - 
                (64*GFV2*M2*p1p2*qp3*qp4)/D3D4 - 
                (128*GFA2*p1P*p2P*qp3*qp4)/D3D4 - 
                (128*GFV2*p1P*p2P*qp3*qp4)/D3D4);

    return result;
}


double SquaredMatrixElementPLPanti(double GFV, double GFA){

    double GFA2, GFV2, GFAGFV, result;
    
    GFA2 = GFA*GFA;
    GFV2 = GFV*GFV;
    GFAGFV = GFA*GFV;

    result = 4*((64*GFA2*m3*m4*p1p2*p3P*p3P)/D32 - 
                (64*GFV2*m3*m4*p1p2*p3P*p3P)/D32 + 
                (64*GFA2*p1p4*p2p3*p3P*p3P)/D32 - 
                (128*GFAGFV*p1p4*p2p3*p3P*p3P)/D32 + 
                (64*GFV2*p1p4*p2p3*p3P*p3P)/D32 + 
                (64*GFA2*p1p3*p2p4*p3P*p3P)/D32 + 
                (128*GFAGFV*p1p3*p2p4*p3P*p3P)/D32 + 
                (64*GFV2*p1p3*p2p4*p3P*p3P)/D32 - 
                (128*GFA2*m3*m4*p1p2*p3P*p4P)/D3D4 + 
                (128*GFV2*m3*m4*p1p2*p3P*p4P)/D3D4 - 
                (128*GFA2*p1p4*p2p3*p3P*p4P)/D3D4 + 
                (256*GFAGFV*p1p4*p2p3*p3P*p4P)/D3D4 - 
                (128*GFV2*p1p4*p2p3*p3P*p4P)/D3D4 - 
                (128*GFA2*p1p3*p2p4*p3P*p4P)/D3D4 - 
                (256*GFAGFV*p1p3*p2p4*p3P*p4P)/D3D4 - 
                (128*GFV2*p1p3*p2p4*p3P*p4P)/D3D4 + 
                (64*GFA2*m3*m4*p1p2*p4P*p4P)/D42 - 
                (64*GFV2*m3*m4*p1p2*p4P*p4P)/D42 + 
                (64*GFA2*p1p4*p2p3*p4P*p4P)/D42 - 
                (128*GFAGFV*p1p4*p2p3*p4P*p4P)/D42 + 
                (64*GFV2*p1p4*p2p3*p4P*p4P)/D42 + 
                (64*GFA2*p1p3*p2p4*p4P*p4P)/D42 + 
                (128*GFAGFV*p1p3*p2p4*p4P*p4P)/D42 + 
                (64*GFV2*p1p3*p2p4*p4P*p4P)/D42 - 
                (16*GFA2*M2*m3*m4*p1p2*q2)/D32 - 
                (16*GFA2*M2*m3*m4*p1p2*q2)/D42 + 
                (32*GFA2*M2*m3*m4*p1p2*q2)/D3D4 + 
                (16*GFV2*M2*m3*m4*p1p2*q2)/D32 + 
                (16*GFV2*M2*m3*m4*p1p2*q2)/D42 - 
                (32*GFV2*M2*m3*m4*p1p2*q2)/D3D4 + 
                (64*GFA2*m3*m4*p1P*p2P*q2)/D3D4 - 
                (64*GFV2*m3*m4*p1P*p2P*q2)/D3D4 - 
                (16*GFA2*M2*p1p4*p2p3*q2)/D32 - 
                (16*GFA2*M2*p1p4*p2p3*q2)/D42 - 
                (32*GFA2*M2*p1p4*p2p3*q2)/D3D4 + 
                (32*GFAGFV*M2*p1p4*p2p3*q2)/D32 + 
                (32*GFAGFV*M2*p1p4*p2p3*q2)/D42 - 
                (64*GFAGFV*M2*p1p4*p2p3*q2)/D3D4 - 
                (16*GFV2*M2*p1p4*p2p3*q2)/D32 - 
                (16*GFV2*M2*p1p4*p2p3*q2)/D42 - 
                (32*GFV2*M2*p1p4*p2p3*q2)/D3D4 - 
                (16*GFA2*M2*p1p3*p2p4*q2)/D32 - 
                (16*GFA2*M2*p1p3*p2p4*q2)/D42 - 
                (32*GFA2*M2*p1p3*p2p4*q2)/D3D4 - 
                (32*GFAGFV*M2*p1p3*p2p4*q2)/D32 - 
                (32*GFAGFV*M2*p1p3*p2p4*q2)/D42 + 
                (64*GFAGFV*M2*p1p3*p2p4*q2)/D3D4 - 
                (16*GFV2*M2*p1p3*p2p4*q2)/D32 - 
                (16*GFV2*M2*p1p3*p2p4*q2)/D42 - 
                (32*GFV2*M2*p1p3*p2p4*q2)/D3D4 - 
                (32*GFA2*p1p4*p2P*p3P*q2)/D32 - 
                (32*GFA2*p1p4*p2P*p3P*q2)/D3D4 + 
                (64*GFAGFV*p1p4*p2P*p3P*q2)/D32 - 
                (64*GFAGFV*p1p4*p2P*p3P*q2)/D3D4 - 
                (32*GFV2*p1p4*p2P*p3P*q2)/D32 - 
                (32*GFV2*p1p4*p2P*p3P*q2)/D3D4 - 
                (32*GFA2*p1P*p2p4*p3P*q2)/D32 - 
                (32*GFA2*p1P*p2p4*p3P*q2)/D3D4 - 
                (64*GFAGFV*p1P*p2p4*p3P*q2)/D32 + 
                (64*GFAGFV*p1P*p2p4*p3P*q2)/D3D4 - 
                (32*GFV2*p1P*p2p4*p3P*q2)/D32 - 
                (32*GFV2*p1P*p2p4*p3P*q2)/D3D4 + 
                (64*GFA2*M2*p1p2*p3p4*q2)/D3D4 + 
                (64*GFV2*M2*p1p2*p3p4*q2)/D3D4 + 
                (64*GFA2*p1P*p2P*p3p4*q2)/D3D4 + 
                (64*GFV2*p1P*p2P*p3p4*q2)/D3D4 - 
                (32*GFA2*p1p3*p2P*p4P*q2)/D42 - 
                (32*GFA2*p1p3*p2P*p4P*q2)/D3D4 - 
                (64*GFAGFV*p1p3*p2P*p4P*q2)/D42 + 
                (64*GFAGFV*p1p3*p2P*p4P*q2)/D3D4 - 
                (32*GFV2*p1p3*p2P*p4P*q2)/D42 - 
                (32*GFV2*p1p3*p2P*p4P*q2)/D3D4 - 
                (32*GFA2*p1P*p2p3*p4P*q2)/D42 - 
                (32*GFA2*p1P*p2p3*p4P*q2)/D3D4 + 
                (64*GFAGFV*p1P*p2p3*p4P*q2)/D42 - 
                (64*GFAGFV*p1P*p2p3*p4P*q2)/D3D4 - 
                (32*GFV2*p1P*p2p3*p4P*q2)/D42 - 
                (32*GFV2*p1P*p2p3*p4P*q2)/D3D4 + 
                (64*GFA2*p1p2*p3P*p4P*q2)/D3D4 + 
                (64*GFV2*p1p2*p3P*p4P*q2)/D3D4 - 
                (64*GFA2*m3*m4*p1p2*p3P*qP)/D32 + 
                (64*GFA2*m3*m4*p1p2*p3P*qP)/D3D4 + 
                (64*GFV2*m3*m4*p1p2*p3P*qP)/D32 - 
                (64*GFV2*m3*m4*p1p2*p3P*qP)/D3D4 - 
                (64*GFA2*p1p4*p2p3*p3P*qP)/D32 + 
                (64*GFA2*p1p4*p2p3*p3P*qP)/D3D4 + 
                (128*GFAGFV*p1p4*p2p3*p3P*qP)/D32 - 
                (128*GFAGFV*p1p4*p2p3*p3P*qP)/D3D4 - 
                (64*GFV2*p1p4*p2p3*p3P*qP)/D32 + 
                (64*GFV2*p1p4*p2p3*p3P*qP)/D3D4 - 
                (64*GFA2*p1p3*p2p4*p3P*qP)/D32 + 
                (64*GFA2*p1p3*p2p4*p3P*qP)/D3D4 - 
                (128*GFAGFV*p1p3*p2p4*p3P*qP)/D32 + 
                (128*GFAGFV*p1p3*p2p4*p3P*qP)/D3D4 - 
                (64*GFV2*p1p3*p2p4*p3P*qP)/D32 + 
                (64*GFV2*p1p3*p2p4*p3P*qP)/D3D4 - 
                (64*GFA2*m3*m4*p1p2*p4P*qP)/D42 + 
                (64*GFA2*m3*m4*p1p2*p4P*qP)/D3D4 + 
                (64*GFV2*m3*m4*p1p2*p4P*qP)/D42 - 
                (64*GFV2*m3*m4*p1p2*p4P*qP)/D3D4 - 
                (64*GFA2*p1p4*p2p3*p4P*qP)/D42 + 
                (64*GFA2*p1p4*p2p3*p4P*qP)/D3D4 + 
                (128*GFAGFV*p1p4*p2p3*p4P*qP)/D42 - 
                (128*GFAGFV*p1p4*p2p3*p4P*qP)/D3D4 - 
                (64*GFV2*p1p4*p2p3*p4P*qP)/D42 + 
                (64*GFV2*p1p4*p2p3*p4P*qP)/D3D4 - 
                (64*GFA2*p1p3*p2p4*p4P*qP)/D42 + 
                (64*GFA2*p1p3*p2p4*p4P*qP)/D3D4 - 
                (128*GFAGFV*p1p3*p2p4*p4P*qP)/D42 + 
                (128*GFAGFV*p1p3*p2p4*p4P*qP)/D3D4 - 
                (64*GFV2*p1p3*p2p4*p4P*qP)/D42 + 
                (64*GFV2*p1p3*p2p4*p4P*qP)/D3D4 - 
                (64*GFA2*p1p4*p2p3*qP*qP)/D3D4 - 
                (64*GFV2*p1p4*p2p3*qP*qP)/D3D4 - 
                (64*GFA2*p1p3*p2p4*qP*qP)/D3D4 - 
                (64*GFV2*p1p3*p2p4*qP*qP)/D3D4 + 
                (64*GFA2*p1p2*p3p4*qP*qP)/D3D4 + 
                (64*GFV2*p1p2*p3p4*qP*qP)/D3D4 - 
                (64*GFA2*p2p4*p3P*p3P*qp1)/D32 - 
                (128*GFAGFV*p2p4*p3P*p3P*qp1)/D32 - 
                (64*GFV2*p2p4*p3P*p3P*qp1)/D32 + 
                (64*GFA2*p2p3*p3P*p4P*qp1)/D3D4 - 
                (128*GFAGFV*p2p3*p3P*p4P*qp1)/D3D4 + 
                (64*GFV2*p2p3*p3P*p4P*qp1)/D3D4 + 
                (64*GFA2*p2p4*p3P*p4P*qp1)/D3D4 + 
                (128*GFAGFV*p2p4*p3P*p4P*qp1)/D3D4 + 
                (64*GFV2*p2p4*p3P*p4P*qp1)/D3D4 - 
                (64*GFA2*p2p3*p4P*p4P*qp1)/D42 + 
                (128*GFAGFV*p2p3*p4P*p4P*qp1)/D42 - 
                (64*GFV2*p2p3*p4P*p4P*qp1)/D42 - 
                (64*GFA2*m3*m4*p2P*qP*qp1)/D3D4 + 
                (64*GFV2*m3*m4*p2P*qP*qp1)/D3D4 + 
                (64*GFA2*p2p4*p3P*qP*qp1)/D32 + 
                (128*GFAGFV*p2p4*p3P*qP*qp1)/D32 - 
                (128*GFAGFV*p2p4*p3P*qP*qp1)/D3D4 + 
                (64*GFV2*p2p4*p3P*qP*qp1)/D32 - 
                (64*GFA2*p2P*p3p4*qP*qp1)/D3D4 - 
                (64*GFV2*p2P*p3p4*qP*qp1)/D3D4 + 
                (64*GFA2*p2p3*p4P*qP*qp1)/D42 - 
                (128*GFAGFV*p2p3*p4P*qP*qp1)/D42 + 
                (128*GFAGFV*p2p3*p4P*qP*qp1)/D3D4 + 
                (64*GFV2*p2p3*p4P*qP*qp1)/D42 - 
                (64*GFA2*p1p4*p3P*p3P*qp2)/D32 + 
                (128*GFAGFV*p1p4*p3P*p3P*qp2)/D32 - 
                (64*GFV2*p1p4*p3P*p3P*qp2)/D32 + 
                (64*GFA2*p1p3*p3P*p4P*qp2)/D3D4 + 
                (128*GFAGFV*p1p3*p3P*p4P*qp2)/D3D4 + 
                (64*GFV2*p1p3*p3P*p4P*qp2)/D3D4 + 
                (64*GFA2*p1p4*p3P*p4P*qp2)/D3D4 - 
                (128*GFAGFV*p1p4*p3P*p4P*qp2)/D3D4 + 
                (64*GFV2*p1p4*p3P*p4P*qp2)/D3D4 - 
                (64*GFA2*p1p3*p4P*p4P*qp2)/D42 - 
                (128*GFAGFV*p1p3*p4P*p4P*qp2)/D42 - 
                (64*GFV2*p1p3*p4P*p4P*qp2)/D42 - 
                (64*GFA2*m3*m4*p1P*qP*qp2)/D3D4 + 
                (64*GFV2*m3*m4*p1P*qP*qp2)/D3D4 + 
                (64*GFA2*p1p4*p3P*qP*qp2)/D32 - 
                (128*GFAGFV*p1p4*p3P*qP*qp2)/D32 + 
                (128*GFAGFV*p1p4*p3P*qP*qp2)/D3D4 + 
                (64*GFV2*p1p4*p3P*qP*qp2)/D32 - 
                (64*GFA2*p1P*p3p4*qP*qp2)/D3D4 - 
                (64*GFV2*p1P*p3p4*qP*qp2)/D3D4 + 
                (64*GFA2*p1p3*p4P*qP*qp2)/D42 + 
                (128*GFAGFV*p1p3*p4P*qP*qp2)/D42 - 
                (128*GFAGFV*p1p3*p4P*qP*qp2)/D3D4 + 
                (64*GFV2*p1p3*p4P*qP*qp2)/D42 - 
                (64*GFA2*M2*m3*m4*qp1*qp2)/D3D4 + 
                (64*GFV2*M2*m3*m4*qp1*qp2)/D3D4 - 
                (64*GFA2*M2*p3p4*qp1*qp2)/D3D4 - 
                (64*GFV2*M2*p3p4*qp1*qp2)/D3D4 - 
                (128*GFA2*p3P*p4P*qp1*qp2)/D3D4 - 
                (128*GFV2*p3P*p4P*qp1*qp2)/D3D4 + 
                (64*GFA2*p1p4*p2P*p3P*qp3)/D32 - 
                (128*GFAGFV*p1p4*p2P*p3P*qp3)/D32 + 
                (64*GFV2*p1p4*p2P*p3P*qp3)/D32 + 
                (64*GFA2*p1P*p2p4*p3P*qp3)/D32 + 
                (128*GFAGFV*p1P*p2p4*p3P*qp3)/D32 + 
                (64*GFV2*p1P*p2p4*p3P*qp3)/D32 - 
                (64*GFA2*p1p4*p2P*p4P*qp3)/D3D4 + 
                (128*GFAGFV*p1p4*p2P*p4P*qp3)/D3D4 - 
                (64*GFV2*p1p4*p2P*p4P*qp3)/D3D4 - 
                (64*GFA2*p1P*p2p4*p4P*qp3)/D3D4 - 
                (128*GFAGFV*p1P*p2p4*p4P*qp3)/D3D4 - 
                (64*GFV2*p1P*p2p4*p4P*qp3)/D3D4 + 
                (64*GFA2*p1p4*p2P*qP*qp3)/D3D4 + 
                (64*GFV2*p1p4*p2P*qP*qp3)/D3D4 + 
                (64*GFA2*p1P*p2p4*qP*qp3)/D3D4 + 
                (64*GFV2*p1P*p2p4*qP*qp3)/D3D4 - 
                (64*GFA2*p1p2*p4P*qP*qp3)/D3D4 - 
                (64*GFV2*p1p2*p4P*qP*qp3)/D3D4 + 
                (32*GFA2*M2*p2p4*qp1*qp3)/D32 + 
                (32*GFA2*M2*p2p4*qp1*qp3)/D3D4 + 
                (64*GFAGFV*M2*p2p4*qp1*qp3)/D32 - 
                (64*GFAGFV*M2*p2p4*qp1*qp3)/D3D4 + 
                (32*GFV2*M2*p2p4*qp1*qp3)/D32 + 
                (32*GFV2*M2*p2p4*qp1*qp3)/D3D4 + 
                (64*GFA2*p2P*p4P*qp1*qp3)/D3D4 - 
                (128*GFAGFV*p2P*p4P*qp1*qp3)/D3D4 + 
                (64*GFV2*p2P*p4P*qp1*qp3)/D3D4 + 
                (32*GFA2*M2*p1p4*qp2*qp3)/D32 + 
                (32*GFA2*M2*p1p4*qp2*qp3)/D3D4 - 
                (64*GFAGFV*M2*p1p4*qp2*qp3)/D32 + 
                (64*GFAGFV*M2*p1p4*qp2*qp3)/D3D4 + 
                (32*GFV2*M2*p1p4*qp2*qp3)/D32 + 
                (32*GFV2*M2*p1p4*qp2*qp3)/D3D4 + 
                (64*GFA2*p1P*p4P*qp2*qp3)/D3D4 + 
                (128*GFAGFV*p1P*p4P*qp2*qp3)/D3D4 + 
                (64*GFV2*p1P*p4P*qp2*qp3)/D3D4 - 
                (64*GFA2*p1p3*p2P*p3P*qp4)/D3D4 - 
                (128*GFAGFV*p1p3*p2P*p3P*qp4)/D3D4 - 
                (64*GFV2*p1p3*p2P*p3P*qp4)/D3D4 - 
                (64*GFA2*p1P*p2p3*p3P*qp4)/D3D4 + 
                (128*GFAGFV*p1P*p2p3*p3P*qp4)/D3D4 - 
                (64*GFV2*p1P*p2p3*p3P*qp4)/D3D4 + 
                (64*GFA2*p1p3*p2P*p4P*qp4)/D42 + 
                (128*GFAGFV*p1p3*p2P*p4P*qp4)/D42 + 
                (64*GFV2*p1p3*p2P*p4P*qp4)/D42 + 
                (64*GFA2*p1P*p2p3*p4P*qp4)/D42 - 
                (128*GFAGFV*p1P*p2p3*p4P*qp4)/D42 + 
                (64*GFV2*p1P*p2p3*p4P*qp4)/D42 + 
                (64*GFA2*p1p3*p2P*qP*qp4)/D3D4 + 
                (64*GFV2*p1p3*p2P*qP*qp4)/D3D4 + 
                (64*GFA2*p1P*p2p3*qP*qp4)/D3D4 + 
                (64*GFV2*p1P*p2p3*qP*qp4)/D3D4 - 
                (64*GFA2*p1p2*p3P*qP*qp4)/D3D4 - 
                (64*GFV2*p1p2*p3P*qP*qp4)/D3D4 + 
                (32*GFA2*M2*p2p3*qp1*qp4)/D42 + 
                (32*GFA2*M2*p2p3*qp1*qp4)/D3D4 - 
                (64*GFAGFV*M2*p2p3*qp1*qp4)/D42 + 
                (64*GFAGFV*M2*p2p3*qp1*qp4)/D3D4 + 
                (32*GFV2*M2*p2p3*qp1*qp4)/D42 + 
                (32*GFV2*M2*p2p3*qp1*qp4)/D3D4 + 
                (64*GFA2*p2P*p3P*qp1*qp4)/D3D4 + 
                (128*GFAGFV*p2P*p3P*qp1*qp4)/D3D4 + 
                (64*GFV2*p2P*p3P*qp1*qp4)/D3D4 + 
                (32*GFA2*M2*p1p3*qp2*qp4)/D42 + 
                (32*GFA2*M2*p1p3*qp2*qp4)/D3D4 + 
                (64*GFAGFV*M2*p1p3*qp2*qp4)/D42 - 
                (64*GFAGFV*M2*p1p3*qp2*qp4)/D3D4 + 
                (32*GFV2*M2*p1p3*qp2*qp4)/D42 + 
                (32*GFV2*M2*p1p3*qp2*qp4)/D3D4 + 
                (64*GFA2*p1P*p3P*qp2*qp4)/D3D4 - 
                (128*GFAGFV*p1P*p3P*qp2*qp4)/D3D4 + 
                (64*GFV2*p1P*p3P*qp2*qp4)/D3D4 - 
                (64*GFA2*M2*p1p2*qp3*qp4)/D3D4 - 
                (64*GFV2*M2*p1p2*qp3*qp4)/D3D4 - 
                (128*GFA2*p1P*p2P*qp3*qp4)/D3D4 - 
                (128*GFV2*p1P*p2P*qp3*qp4)/D3D4);

    return result;
}



double SquaredMatrixElementL(double GFV, double GFA){

    double GFA2, GFV2, GFAGFV, result;
    
    GFA2 = GFA*GFA;
    GFV2 = GFV*GFV;
    GFAGFV = GFA*GFV;
    
    result = 4*((-64*GFA2*m3*m3*m3*m4*p1p2)/D32 + 
                (64*GFV2*m3*m3*m3*m4*p1p2)/D32 - 
                (64*GFA2*m3*m4*m4*m4*p1p2)/D42 + 
                (64*GFV2*m3*m4*m4*m4*p1p2)/D42 - 
                (64*GFA2*m3*m3*p1p4*p2p3)/D32 - 
                (128*GFAGFV*m3*m3*p1p4*p2p3)/D32 - 
                (64*GFV2*m3*m3*p1p4*p2p3)/D32 - 
                (64*GFA2*m4*m4*p1p4*p2p3)/D42 - 
                (128*GFAGFV*m4*m4*p1p4*p2p3)/D42 - 
                (64*GFV2*m4*m4*p1p4*p2p3)/D42 - 
                (64*GFA2*m3*m3*p1p3*p2p4)/D32 + 
                (128*GFAGFV*m3*m3*p1p3*p2p4)/D32 - 
                (64*GFV2*m3*m3*p1p3*p2p4)/D32 - 
                (64*GFA2*m4*m4*p1p3*p2p4)/D42 + 
                (128*GFAGFV*m4*m4*p1p3*p2p4)/D42 - 
                (64*GFV2*m4*m4*p1p3*p2p4)/D42 - 
                (128*GFA2*m3*m4*p1p2*p3p4)/D3D4 + 
                (128*GFV2*m3*m4*p1p2*p3p4)/D3D4 - 
                (128*GFA2*p1p4*p2p3*p3p4)/D3D4 - 
                (256*GFAGFV*p1p4*p2p3*p3p4)/D3D4 - 
                (128*GFV2*p1p4*p2p3*p3p4)/D3D4 - 
                (128*GFA2*p1p3*p2p4*p3p4)/D3D4 + 
                (256*GFAGFV*p1p3*p2p4*p3p4)/D3D4 - 
                (128*GFV2*p1p3*p2p4*p3p4)/D3D4 + 
                (64*GFA2*m3*m4*p1p2*q2)/D32 + 
                (64*GFA2*m3*m4*p1p2*q2)/D42 - 
                (64*GFA2*m3*m4*p1p2*q2)/D3D4 - 
                (64*GFV2*m3*m4*p1p2*q2)/D32 - 
                (64*GFV2*m3*m4*p1p2*q2)/D42 + 
                (64*GFV2*m3*m4*p1p2*q2)/D3D4 + 
                (32*GFA2*p1p4*p2p3*q2)/D32 + 
                (32*GFA2*p1p4*p2p3*q2)/D42 + 
                (64*GFAGFV*p1p4*p2p3*q2)/D32 + 
                (64*GFAGFV*p1p4*p2p3*q2)/D42 - 
                (128*GFAGFV*p1p4*p2p3*q2)/D3D4 + 
                (32*GFV2*p1p4*p2p3*q2)/D32 + 
                (32*GFV2*p1p4*p2p3*q2)/D42 + 
                (32*GFA2*p1p3*p2p4*q2)/D32 + 
                (32*GFA2*p1p3*p2p4*q2)/D42 - 
                (64*GFAGFV*p1p3*p2p4*q2)/D32 - 
                (64*GFAGFV*p1p3*p2p4*q2)/D42 + 
                (128*GFAGFV*p1p3*p2p4*q2)/D3D4 + 
                (32*GFV2*p1p3*p2p4*q2)/D32 + 
                (32*GFV2*p1p3*p2p4*q2)/D42 - 
                (64*GFA2*p1p2*p3p4*q2)/D3D4 - 
                (64*GFV2*p1p2*p3p4*q2)/D3D4 + 
                (64*GFA2*m4*m4*p2p3*qp1)/D42 + 
                (128*GFAGFV*m4*m4*p2p3*qp1)/D42 + 
                (64*GFV2*m4*m4*p2p3*qp1)/D42 + 
                (64*GFA2*m3*m3*p2p4*qp1)/D32 - 
                (128*GFAGFV*m3*m3*p2p4*qp1)/D32 + 
                (64*GFV2*m3*m3*p2p4*qp1)/D32 + 
                (64*GFA2*p2p3*p3p4*qp1)/D3D4 + 
                (128*GFAGFV*p2p3*p3p4*qp1)/D3D4 + 
                (64*GFV2*p2p3*p3p4*qp1)/D3D4 + 
                (64*GFA2*p2p4*p3p4*qp1)/D3D4 - 
                (128*GFAGFV*p2p4*p3p4*qp1)/D3D4 + 
                (64*GFV2*p2p4*p3p4*qp1)/D3D4 + 
                (64*GFA2*m4*m4*p1p3*qp2)/D42 - 
                (128*GFAGFV*m4*m4*p1p3*qp2)/D42 + 
                (64*GFV2*m4*m4*p1p3*qp2)/D42 + 
                (64*GFA2*m3*m3*p1p4*qp2)/D32 + 
                (128*GFAGFV*m3*m3*p1p4*qp2)/D32 + 
                (64*GFV2*m3*m3*p1p4*qp2)/D32 + 
                (64*GFA2*p1p3*p3p4*qp2)/D3D4 - 
                (128*GFAGFV*p1p3*p3p4*qp2)/D3D4 + 
                (64*GFV2*p1p3*p3p4*qp2)/D3D4 + 
                (64*GFA2*p1p4*p3p4*qp2)/D3D4 + 
                (128*GFAGFV*p1p4*p3p4*qp2)/D3D4 + 
                (64*GFV2*p1p4*p3p4*qp2)/D3D4 + 
                (128*GFA2*m3*m4*qp1*qp2)/D3D4 - 
                (128*GFV2*m3*m4*qp1*qp2)/D3D4 - 
                (64*GFA2*m3*m4*p1p2*qp3)/D32 + 
                (64*GFA2*m3*m4*p1p2*qp3)/D3D4 + 
                (64*GFV2*m3*m4*p1p2*qp3)/D32 - 
                (64*GFV2*m3*m4*p1p2*qp3)/D3D4 + 
                (64*GFA2*p1p4*p2p3*qp3)/D3D4 + 
                (128*GFAGFV*p1p4*p2p3*qp3)/D3D4 + 
                (64*GFV2*p1p4*p2p3*qp3)/D3D4 + 
                (64*GFA2*p1p3*p2p4*qp3)/D3D4 - 
                (128*GFAGFV*p1p3*p2p4*qp3)/D3D4 + 
                (64*GFV2*p1p3*p2p4*qp3)/D3D4 - 
                (128*GFA2*p1p4*p2p4*qp3)/D3D4 - 
                (128*GFV2*p1p4*p2p4*qp3)/D3D4 - 
                (64*GFA2*p2p4*qp1*qp3)/D32 + 
                (128*GFAGFV*p2p4*qp1*qp3)/D32 - 
                (64*GFV2*p2p4*qp1*qp3)/D32 - 
                (64*GFA2*p1p4*qp2*qp3)/D32 - 
                (128*GFAGFV*p1p4*qp2*qp3)/D32 - 
                (64*GFV2*p1p4*qp2*qp3)/D32 - 
                (64*GFA2*m3*m4*p1p2*qp4)/D42 + 
                (64*GFA2*m3*m4*p1p2*qp4)/D3D4 + 
                (64*GFV2*m3*m4*p1p2*qp4)/D42 - 
                (64*GFV2*m3*m4*p1p2*qp4)/D3D4 - 
                (128*GFA2*p1p3*p2p3*qp4)/D3D4 - 
                (128*GFV2*p1p3*p2p3*qp4)/D3D4 + 
                (64*GFA2*p1p4*p2p3*qp4)/D3D4 + 
                (128*GFAGFV*p1p4*p2p3*qp4)/D3D4 + 
                (64*GFV2*p1p4*p2p3*qp4)/D3D4 + 
                (64*GFA2*p1p3*p2p4*qp4)/D3D4 - 
                (128*GFAGFV*p1p3*p2p4*qp4)/D3D4 + 
                (64*GFV2*p1p3*p2p4*qp4)/D3D4 - 
                (64*GFA2*p2p3*qp1*qp4)/D42 - 
                (128*GFAGFV*p2p3*qp1*qp4)/D42 - 
                (64*GFV2*p2p3*qp1*qp4)/D42 - 
                (64*GFA2*p1p3*qp2*qp4)/D42 + 
                (128*GFAGFV*p1p3*qp2*qp4)/D42 - 
                (64*GFV2*p1p3*qp2*qp4)/D42);
    
    return result;}
    
    
    
double SquaredMatrixElementLanti(double GFV, double GFA){

    double GFA2, GFV2, GFAGFV, result;
    
    GFA2 = GFA*GFA;
    GFV2 = GFV*GFV;
    GFAGFV = GFA*GFV;
    
    result = 4*((-64*GFA2*m3*m3*m3*m4*p1p2)/D32 + 
                (64*GFV2*m3*m3*m3*m4*p1p2)/D32 - 
                (64*GFA2*m3*m4*m4*m4*p1p2)/D42 + 
                (64*GFV2*m3*m4*m4*m4*p1p2)/D42 - 
                (64*GFA2*m3*m3*p1p4*p2p3)/D32 - 
                (128*GFAGFV*m3*m3*p1p4*p2p3)/D32 - 
                (64*GFV2*m3*m3*p1p4*p2p3)/D32 - 
                (64*GFA2*m4*m4*p1p4*p2p3)/D42 - 
                (128*GFAGFV*m4*m4*p1p4*p2p3)/D42 - 
                (64*GFV2*m4*m4*p1p4*p2p3)/D42 - 
                (64*GFA2*m3*m3*p1p3*p2p4)/D32 + 
                (128*GFAGFV*m3*m3*p1p3*p2p4)/D32 - 
                (64*GFV2*m3*m3*p1p3*p2p4)/D32 - 
                (64*GFA2*m4*m4*p1p3*p2p4)/D42 + 
                (128*GFAGFV*m4*m4*p1p3*p2p4)/D42 - 
                (64*GFV2*m4*m4*p1p3*p2p4)/D42 - 
                (128*GFA2*m3*m4*p1p2*p3p4)/D3D4 + 
                (128*GFV2*m3*m4*p1p2*p3p4)/D3D4 - 
                (128*GFA2*p1p4*p2p3*p3p4)/D3D4 - 
                (256*GFAGFV*p1p4*p2p3*p3p4)/D3D4 - 
                (128*GFV2*p1p4*p2p3*p3p4)/D3D4 - 
                (128*GFA2*p1p3*p2p4*p3p4)/D3D4 + 
                (256*GFAGFV*p1p3*p2p4*p3p4)/D3D4 - 
                (128*GFV2*p1p3*p2p4*p3p4)/D3D4 + 
                (64*GFA2*m3*m4*p1p2*q2)/D32 + 
                (64*GFA2*m3*m4*p1p2*q2)/D42 - 
                (64*GFA2*m3*m4*p1p2*q2)/D3D4 - 
                (64*GFV2*m3*m4*p1p2*q2)/D32 - 
                (64*GFV2*m3*m4*p1p2*q2)/D42 + 
                (64*GFV2*m3*m4*p1p2*q2)/D3D4 + 
                (32*GFA2*p1p4*p2p3*q2)/D32 + 
                (32*GFA2*p1p4*p2p3*q2)/D42 + 
                (64*GFAGFV*p1p4*p2p3*q2)/D32 + 
                (64*GFAGFV*p1p4*p2p3*q2)/D42 - 
                (128*GFAGFV*p1p4*p2p3*q2)/D3D4 + 
                (32*GFV2*p1p4*p2p3*q2)/D32 + 
                (32*GFV2*p1p4*p2p3*q2)/D42 + 
                (32*GFA2*p1p3*p2p4*q2)/D32 + 
                (32*GFA2*p1p3*p2p4*q2)/D42 - 
                (64*GFAGFV*p1p3*p2p4*q2)/D32 - 
                (64*GFAGFV*p1p3*p2p4*q2)/D42 + 
                (128*GFAGFV*p1p3*p2p4*q2)/D3D4 + 
                (32*GFV2*p1p3*p2p4*q2)/D32 + 
                (32*GFV2*p1p3*p2p4*q2)/D42 - 
                (64*GFA2*p1p2*p3p4*q2)/D3D4 - 
                (64*GFV2*p1p2*p3p4*q2)/D3D4 + 
                (64*GFA2*m4*m4*p2p3*qp1)/D42 + 
                (128*GFAGFV*m4*m4*p2p3*qp1)/D42 + 
                (64*GFV2*m4*m4*p2p3*qp1)/D42 + 
                (64*GFA2*m3*m3*p2p4*qp1)/D32 - 
                (128*GFAGFV*m3*m3*p2p4*qp1)/D32 + 
                (64*GFV2*m3*m3*p2p4*qp1)/D32 + 
                (64*GFA2*p2p3*p3p4*qp1)/D3D4 + 
                (128*GFAGFV*p2p3*p3p4*qp1)/D3D4 + 
                (64*GFV2*p2p3*p3p4*qp1)/D3D4 + 
                (64*GFA2*p2p4*p3p4*qp1)/D3D4 - 
                (128*GFAGFV*p2p4*p3p4*qp1)/D3D4 + 
                (64*GFV2*p2p4*p3p4*qp1)/D3D4 + 
                (64*GFA2*m4*m4*p1p3*qp2)/D42 - 
                (128*GFAGFV*m4*m4*p1p3*qp2)/D42 + 
                (64*GFV2*m4*m4*p1p3*qp2)/D42 + 
                (64*GFA2*m3*m3*p1p4*qp2)/D32 + 
                (128*GFAGFV*m3*m3*p1p4*qp2)/D32 + 
                (64*GFV2*m3*m3*p1p4*qp2)/D32 + 
                (64*GFA2*p1p3*p3p4*qp2)/D3D4 - 
                (128*GFAGFV*p1p3*p3p4*qp2)/D3D4 + 
                (64*GFV2*p1p3*p3p4*qp2)/D3D4 + 
                (64*GFA2*p1p4*p3p4*qp2)/D3D4 + 
                (128*GFAGFV*p1p4*p3p4*qp2)/D3D4 + 
                (64*GFV2*p1p4*p3p4*qp2)/D3D4 + 
                (128*GFA2*m3*m4*qp1*qp2)/D3D4 - 
                (128*GFV2*m3*m4*qp1*qp2)/D3D4 - 
                (64*GFA2*m3*m4*p1p2*qp3)/D32 + 
                (64*GFA2*m3*m4*p1p2*qp3)/D3D4 + 
                (64*GFV2*m3*m4*p1p2*qp3)/D32 - 
                (64*GFV2*m3*m4*p1p2*qp3)/D3D4 + 
                (64*GFA2*p1p4*p2p3*qp3)/D3D4 + 
                (128*GFAGFV*p1p4*p2p3*qp3)/D3D4 + 
                (64*GFV2*p1p4*p2p3*qp3)/D3D4 + 
                (64*GFA2*p1p3*p2p4*qp3)/D3D4 - 
                (128*GFAGFV*p1p3*p2p4*qp3)/D3D4 + 
                (64*GFV2*p1p3*p2p4*qp3)/D3D4 - 
                (128*GFA2*p1p4*p2p4*qp3)/D3D4 - 
                (128*GFV2*p1p4*p2p4*qp3)/D3D4 - 
                (64*GFA2*p2p4*qp1*qp3)/D32 + 
                (128*GFAGFV*p2p4*qp1*qp3)/D32 - 
                (64*GFV2*p2p4*qp1*qp3)/D32 - 
                (64*GFA2*p1p4*qp2*qp3)/D32 - 
                (128*GFAGFV*p1p4*qp2*qp3)/D32 - 
                (64*GFV2*p1p4*qp2*qp3)/D32 - 
                (64*GFA2*m3*m4*p1p2*qp4)/D42 + 
                (64*GFA2*m3*m4*p1p2*qp4)/D3D4 + 
                (64*GFV2*m3*m4*p1p2*qp4)/D42 - 
                (64*GFV2*m3*m4*p1p2*qp4)/D3D4 - 
                (128*GFA2*p1p3*p2p3*qp4)/D3D4 - 
                (128*GFV2*p1p3*p2p3*qp4)/D3D4 + 
                (64*GFA2*p1p4*p2p3*qp4)/D3D4 + 
                (128*GFAGFV*p1p4*p2p3*qp4)/D3D4 + 
                (64*GFV2*p1p4*p2p3*qp4)/D3D4 + 
                (64*GFA2*p1p3*p2p4*qp4)/D3D4 - 
                (128*GFAGFV*p1p3*p2p4*qp4)/D3D4 + 
                (64*GFV2*p1p3*p2p4*qp4)/D3D4 - 
                (64*GFA2*p2p3*qp1*qp4)/D42 - 
                (128*GFAGFV*p2p3*qp1*qp4)/D42 - 
                (64*GFV2*p2p3*qp1*qp4)/D42 - 
                (64*GFA2*p1p3*qp2*qp4)/D42 + 
                (128*GFAGFV*p1p3*qp2*qp4)/D42 - 
                (64*GFV2*p1p3*qp2*qp4)/D42);
    
    return result;}
    
//*************************************************
// Compute cross section for fixed neutrino energy
//*************************************************

void ComputeCrossSection(){
    
    double varold, intold, sigma;
    double integral = 0.0;
    double var = 0.0;
    
    errorcounter=0;
    float progress = 0.0;
    int barWidth = 50;
    
    std::cout << " \n\n";
    
    for (int ii = 1; ii < 30000001; ii++){
      
      GenerateEvent();
      DetermineWeight();
      
      intold = integral;
      varold = var;
	    
      integral = (intold*(ii-1)+weight)/ii;
      var = ((varold+intold*intold)*(ii-1)+weight*weight)/ii-integral*integral;
      sigma = sqrt(var/ii);
      
      //progress bar
      if ( ii % 500000 == 0){
      progress = ii/30000000.0;
      std::cout << "computing cross section:  [";
      int pos = barWidth * progress;
      for (int i = 0; i < barWidth; ++i) {
        if (i < pos) std::cout << "=";
        else if (i == pos) std::cout << ">";
        else std::cout << " ";
      }
      std::cout << "]  " << int(progress * 100.0) << " %\r";
      std::cout.flush();
      }
      
    }

    crosssectionresult=integral;
    deltacrosssectionresult=sigma;
    
    if (errorcounter > 0){
    std::cout << " \n\n";
    std::cout << "Out of 30,000,000 weighted events, " << errorcounter << " events with unphysical kinematics were ignored \n\n";}
    
}


//*****************************************************
// Compute cross section for multiple neutrino energies
//*****************************************************

void ComputeCrossSection(double start, double finish, int total){
    
    double h = (double)(finish - start) / (double)(total - 1);
    vector<double> v(total);
    std::generate(v.begin(), v.end(), [n = 0, &h, &start]() mutable { return start + n++ * h; });
    std::cout << " \nCross section computation over energy range initialized.\n";
    int nenergy = 1;
    for(const double& energy_i : v){
        double varold, intold, sigma;
	double integral = 0.0;
	double var = 0.0;

	errorcounter=0;

	for (int ii = 1; ii < 30000001; ii++){

	    GenerateEvent(energy_i);
	    DetermineWeight();

	    intold = integral;
	    varold = var;

	    integral = (intold*(ii-1)+weight)/ii;
	    var = ((varold+intold*intold)*(ii-1)+weight*weight)/ii-integral*integral;
	    sigma = sqrt(var/ii);	
	}

	crosssectionresult=integral;
	deltacrosssectionresult=sigma;

	xsections.push_back(std::make_tuple(energy_i, crosssectionresult, deltacrosssectionresult));

	std::cout << "cross sections computed: " << nenergy << " / " << total << "\r";
	std::cout.flush();

	++nenergy;
	if (errorcounter > 0){
            std::cout << " \n\n";
	    std::cout << "Out of 30,000,000 weighted events, " << errorcounter << " events with unphysical kinematics were ignored \n\n";}
    }
}
 
//*****************************************************************
// Compute Q2 distribution either for fixed or flux neutrino energy
//*****************************************************************

void ComputeQ2Distribution(){
    
    errorcounter=0;
    float progress = 0.0;
    int barWidth = 50;
    
    std::cout << " \n\n";
    
    for (int ii = 1; ii < 30000001; ii++){
      
      GenerateEvent();
      
      //progress bar
      if ( ii % 500000 == 0){
      progress = ii/30000000.0;
      std::cout << "computing Q2 distribution:  [";
      int pos = barWidth * progress;
      for (int i = 0; i < barWidth; ++i) {
        if (i < pos) std::cout << "=";
        else if (i == pos) std::cout << ">";
        else std::cout << " ";
      }
      std::cout << "]  " << int(progress * 100.0) << " %\r";
      std::cout.flush();
      }
      
    }
    
    if (errorcounter > 0){
    std::cout << " \n\n";
    std::cout << "Out of 30,000,000 weighted events, " << errorcounter << " events with unphysical kinematics were ignored \n\n";}
    
}

 
//**********************************
// Determine the weight of an event
//**********************************

void DetermineWeight(){
    
    if (zeroweight == 1){weight = 0.0;}
    else {
  
    // Set vector and axialvector couplings
    // note that the sign in the propagator corresponds to the unconventional metric of Lovseth, Radomski 
    
    if (model.compare("4F") == 0){
    GV = GVtot/2;  // factor 1/2 to agree with the normalization of the effective Hamiltonian of the paper
    GA = GAtot/2;} // factor 1/2 to agree with the normalization of the effective Hamiltonian of the paper
    else {  
    GV = GVSM - GP*GP*sqrt(2)/2/GF/(2*p1p2-MZP*MZP);
    GA = GASM;}
    
    // Jacobian factor (27) of Lovseth, Radomski, without the form factor 
    // (form factor is cancelled by the corresponding term in PLP)
    J = Twopi/8/eps1/M*D3/16/(-qp1)/sqrt(u4)*D4/8/qc/WC;
    
    // Define the squared matrix element
    if (anti == 0){PLP = SquaredMatrixElementPLP(GV, GA);}
    else {PLP = SquaredMatrixElementPLPanti(GV, GA);}
    
    Laa = 0.0;
    if (material.compare("proton") == 0 || material.compare("neutron") == 0){
    if (anti == 0){Laa = SquaredMatrixElementL(GV, GA);}
    else {Laa = SquaredMatrixElementLanti(GV, GA);}
    }
	      
    // Cross section (26) of Lovseth, Radomski
    if (material.compare("proton") == 0){
      deltaSigma=(GF*GF)*aem*aem*(Z*Z)*0.5/(2*pi*2*pi*2*pi*2*pi*2*pi*2*pi)/M/eps1*
      (4*PLP+4*M2*Laa*(1+q2/4/M2)*q2/4/M2*GMp(q2)*GMp(q2)/(GEp(q2)*GEp(q2)+q2/4/M2*GMp(q2)*GMp(q2)))/
      (q2*q2)*J*(0.389379e12)*Pauli(sqrt(q2*(1+q2/4/M2)));
    }
    else if (material.compare("neutron") == 0){
      deltaSigma=(GF*GF)*aem*aem*(Z*Z)*0.5/(2*pi*2*pi*2*pi*2*pi*2*pi*2*pi)/M/eps1*
      (4*PLP+4*M2*Laa*(1+q2/4/M2)*q2/4/M2*GMn(q2)*GMn(q2)/(GEn(q2)*GEn(q2)+q2/4/M2*GMn(q2)*GMn(q2)))/
      (q2*q2)*J*(0.389379e12)*Pauli(sqrt(q2*(1+q2/4/M2)));
    }
    else {
      deltaSigma=(GF*GF)*aem*aem*(Z*Z)*0.5/(2*pi*2*pi*2*pi*2*pi*2*pi*2*pi)/M/eps1*4*PLP/(q2*q2)*J*(0.389379e12);
    }
    
       
    // Define the weight of the event
    weight = deltaSigma*((u1max-u1min)*(u2max-u2min)*(u3max-u3min)*(u4max-u4min)*(u5max-u5min)*(u6max-u6min)*(u7max-u7min));}
    
    if (energy_type.compare("1") != 0){
      weight=weight*probability_list[bin]*length_probability_list;
      }
      
    if (flagkinematics == 1){
      weight = 0.0; errorcounter = errorcounter+1; 
    }
    
    if (is_nan(weight) == 1){
      weight = 0.0; errorcounter = errorcounter+1;
    }
   
    return;
}


//**********************************
// Determine the maximum weight
//**********************************

void FindMaxWeight(){
  
    maxweight = 0.0;
    averageweight = 0.0;
    
    float progress = 0.0;
    int barWidth = 50;

    std::cout << "\n\n";
    
    for(int n=1; n<30000001; n++){
      
      //progress bar
      if (n % 500000 == 0){
      progress = n/30000000.0;
      std::cout << "finding max weight:  [";
      int pos = barWidth * progress;
      for (int i = 0; i < barWidth; ++i) {
        if (i < pos) std::cout << "=";
        else if (i == pos) std::cout << ">";
        else std::cout << " ";
      }
      std::cout << "]  " << int(progress * 100.0) << " %\r";
      std::cout.flush();
      }
    
    GenerateEvent();
    DetermineWeight();
    
    averageweight = ((n-1)*averageweight+weight)/n;
    
    if (weight > maxweight){maxweight = weight;}}
          
    std::cout << "\n\n";
    std::cout << "To determine the maximum weight, 30,000,000 weighted events were computed \n\n";
    std::cout << "max_weight =  " << maxweight*2 << "\n";
    std::cout << "average_weight =  " << averageweight << "\n";
 
    return;
 
}

//*************************************************
// Read the file containing the neutrino flux distribution
//*************************************************

void ReadDistribution(){
    
    length_probability_list = distribution_list.size()/3;
    
    double Enumin;
    double Enumax;
    double probability;
    
    for(int n=0; n < length_probability_list; n++){
      
      Enumin=distribution_list[n*3];
      Enumax=distribution_list[n*3+1];
      probability=distribution_list[n*3+2];
      
      Enumin_list.push_back(Enumin);
      Enumax_list.push_back(Enumax);
      probability_list.push_back(probability);
      
    }
    
    return;
    
}

//*************************************************
// Write file with the generated events
//*************************************************

void WriteEventFile(string filename){
  
    ofstream outfile;
    outfile.open(filename.c_str(), ios_base::trunc | ios_base::out | ios_base::in);
    
    // write the header
    outfile << "This is an event file created by TEG version 1.0 \n\n\n";
    outfile << "The format of the events is similar to that of MadGraph \n\n";
    outfile << "======================================== \n";
    outfile << "PDG code, in/out state, px, py, pz, E, m \n"; 
    outfile << "======================================== \n\n";   
    outfile << "PDG codes are       11 for a electron \n";
    outfile << "                   -11 for a positron \n";
    outfile << "                    12 for a electron neutrino \n";
    outfile << "                   -12 for a electron anti-neutrino \n";
    outfile << "                    13 for a muon \n";
    outfile << "                   -13 for a anti-muon \n";
    outfile << "                    14 for a muon neutrino \n";
    outfile << "                   -14 for a muon anti-neutrino \n";
    outfile << "                    15 for a tau \n";
    outfile << "                   -15 for a anti-tau \n";
    outfile << "                    16 for a tau neutrino \n";
    outfile << "                   -16 for a tau anti-neutrino \n";
    outfile << "                  2212 for a proton \n";
    outfile << "                  2112 for a neutron \n\n";
    outfile << "in/out state is    -1 for a particle in the initial state \n";
    outfile << "                    1 for a particle in the final state \n\n";
    outfile << "px is the particle momentum in x direction \n";
    outfile << "py is the particle momentum in y direction \n";
    outfile << "pz is the particle momentum in z direction (= beam direction) \n";
    outfile << "E is the particle Energy \n";
    outfile << "m is the particle mass \n\n";
    outfile << "(momenta, energies and masses are all in GeV) \n\n\n";
    
    int n = 0;

    while(n < 20*Nevents){

            outfile << "\n<event>\n";
            outfile << PDG1 << " -1 ";
            for(int d=1;d<4;d++){
                outfile << std::fixed << std::setprecision(8) << data_output[n+d] << " ";
            }
            outfile << std::fixed << std::setprecision(8) << data_output[n] << " ";
            outfile << std::fixed << std::setprecision(8) << "0.0\n";
            n += 4;
            
            outfile << PDG2 << "  1 ";
            for(int d=1;d<4;d++){
                outfile << std::fixed << std::setprecision(8) << data_output[n+d] << " ";
            }
            outfile << std::fixed << std::setprecision(8) << data_output[n] << " ";
            outfile << std::fixed << std::setprecision(8) << "0.0\n";
            n += 4;
            
            outfile << PDG4 << "  1 ";
            for(int d=1;d<4;d++){
                outfile << std::fixed << std::setprecision(8) << data_output[n+d] << " ";
            }
            outfile << std::fixed << std::setprecision(8) << data_output[n] << " ";
            outfile << std::fixed << std::setprecision(8) << m4 << "\n";
            n += 4;
            
            outfile << PDG3 << "  1 ";
            for(int d=1;d<4;d++){
                outfile << std::fixed << std::setprecision(8) << data_output[n+d] << " ";
            }
            outfile << std::fixed << std::setprecision(8) << data_output[n] << " ";
            outfile << std::fixed << std::setprecision(8) << m3 << "\n";
	    
	    if (material.compare("proton") == 0){
            n += 4;}
	    else if (material.compare("neutron") == 0){
	    n += 4;}
	    else {
	    n += 8;}
	    	    
	    if (material.compare("proton") == 0){
	    outfile << 2212 << "  1 ";
            for(int d=1;d<4;d++){
                outfile << std::fixed << std::setprecision(8) << data_output[n+d] << " ";
            }
            outfile << std::fixed << std::setprecision(8) << data_output[n] << " ";
            outfile << std::fixed << std::setprecision(8) << M << "\n";
            n += 4;}
            
        else if (material.compare("neutron") == 0){
	    outfile << 2112 << "  1 ";
            for(int d=1;d<4;d++){
                outfile << std::fixed << std::setprecision(8) << data_output[n+d] << " ";
            }
            outfile << std::fixed << std::setprecision(8) << data_output[n] << " ";
            outfile << std::fixed << std::setprecision(8) << M << "\n";
            n += 4;}
            
	    outfile << "</event>";
    }

    outfile.close();
}

//*************************************************
// Write file with calculated cross sections
//*************************************************

void WriteXSecFile(string filename){
    
    ofstream outfile;
    outfile.open(filename.c_str(), ios_base::trunc | ios_base::out | ios_base::in);

    // format: energy, xsec, deltaxsec
    for(auto const& [energy_i, xsec, delta] : xsections){
        outfile << energy_i << "," << xsec << "," << delta << "\n";
    }

    outfile.close();
}

//*************************************************
// Write file with q2 distribution
//*************************************************

void WriteQ2DistributionFile(string filename){
    
    ofstream outfile;
    outfile.open(filename.c_str(), ios_base::trunc | ios_base::out | ios_base::in);

    // format: q2
    for(double const& q2 : q2distribution){
        outfile << q2 << "\n";
    }

    outfile.close();
}

//*************************************************
// Generate unweighted events
//*************************************************
   
void GenerateEvents(){
      
      double random;
      int i = 0;
      
      errorcounter=0;
      eventcounter=0;
      reweightcounter=0; 
      
      float progress = 0.0;
      int barWidth = 50;
      
      std::cout << "\n\n";
      
      while(i<Nevents){
		
      //progress bar
      if (eventcounter % 500000 == 0){
      progress = (i + 0.1)/Nevents;
      std::cout << "generating events:  [";
      int pos = barWidth * progress;
      for (int j = 0; j < barWidth; ++j) {
        if (j < pos) std::cout << "=";
        else if (j == pos) std::cout << ">";
        else std::cout << " ";
      }
      std::cout << "]  " << int(progress * 100.0) << " %\r";
      std::cout.flush();
      }

      eventcounter=eventcounter+1;

      GenerateEvent();
      DetermineWeight();
      
      if(weight>2*maxweight){
	 reweightcounter=reweightcounter+1;
//	 std::cout << "\n\n";
//	 std::cout << "Warning: weight of an event is larger than the maximum weight \n";
//	 std::cout << "weight / maxweight = " << weight/2/maxweight << "\n\n";
      }
      
      random = realdistribution(generator);
      
      if(random < weight/maxweight/2.0){
	
        data_output[20*i] = event[0][0];
        data_output[20*i+1] = event[0][1];
        data_output[20*i+2] = event[0][2];
        data_output[20*i+3] = event[0][3];
        data_output[20*i+4] = event[1][0];
        data_output[20*i+5] = event[1][1];
        data_output[20*i+6] = event[1][2];
        data_output[20*i+7] = event[1][3];
        data_output[20*i+8] = event[2][0];
        data_output[20*i+9] = event[2][1];
        data_output[20*i+10] = event[2][2];
        data_output[20*i+11] = event[2][3];
        data_output[20*i+12] = event[3][0];
        data_output[20*i+13] = event[3][1];
        data_output[20*i+14] = event[3][2];
        data_output[20*i+15] = event[3][3];
        data_output[20*i+16] = event[4][0];
        data_output[20*i+17] = event[4][1];
        data_output[20*i+18] = event[4][2];
        data_output[20*i+19] = event[4][3];
	
	i++;}}
    
    std::cout << "\n\n";
    std::cout << "To generate the " << Nevents << " events, " << eventcounter << " weighted events were computed \n\n";
    
    if (errorcounter > 0){
    std::cout << "Out of the " << eventcounter << " weighted events, " << errorcounter << " events with unphysical kinematics were ignored \n\n";}
    
    if (reweightcounter > 0){
    std::cout << "Out of the " << eventcounter << " weighted events, " << reweightcounter << " events had weights larger than the maximum weight determined earlier \n\n";}
	
    return;

}
